{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\src\\\\Stations\\\\StationForm.js\";\nimport { useState } from 'react';\nimport StationCalcList from './StationCalcList.js';\nimport React from 'react';\n\n// Angela McNeese\n\n// Station Form component\n// Takes AddStation callback function\n// Returns a form that can be used to define a new Station object in a StationList\nvar StationForm = function StationForm(props) {\n  var clearStation = function clearStation() {\n    return {\n      stn_name: \"\",\n      num_servings: undefined,\n      hh_allergies: []\n    };\n  };\n\n  // The state of this Station Form with each attribute of Station, using the clearStation helper function\n  var _useState = useState(clearStation()),\n    _useState2 = _slicedToArray(_useState, 2),\n    station = _useState2[0],\n    setStation = _useState2[1]; // Handle form submission (prevent refresh, pass Station to addStation, and clear form state)\n  // Takes submit event information (form submission)\n  // Returns none\n  var handleSubmit = function handleSubmit(event) {\n    // Prevent refresh\n    event.preventDefault();\n    // Pass Station object to StationList callback\n    props.addStation(station);\n    // Clear the form state\n    setStation(clearStation());\n  };\n  var updateEditForm = function updateEditForm(names, values) {\n    var newStation = _objectSpread({}, station);\n    for (var i = 0; i < names.length; i++) {\n      newStation[names[i]] = values[i];\n      // console.log('(' + names[i] + ', ' + values[i] + ')', newStation.aFlag);\n    }\n\n    setStation(newStation);\n  };\n\n  // Handle the data inputted to each form input and set the state with the new values\n  // General solution, input verification is tricky with this implementation\n  // Takes input change event information (name, type, and value)\n  // Returns None\n  var handleFormChange = function handleFormChange(event) {\n    // Get the name and value of the changed field\n    var fieldName = event.target.getAttribute('name');\n    var fieldValue = event.target.type === 'checkbox' ? +event.target.checked : event.target.value;\n    // Create new Station object before setting state\n    updateEditForm([fieldName], [fieldValue]);\n    // updateEditForm('aFlag', true);\n  };\n\n  // HTML structure of this component\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"stn_name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"stn_name\",\n    id: \"stn_name\",\n    type: \"text\",\n    maxLength: \"50\",\n    required: true,\n    value: station.stn_name,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"num_servings\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Number of Adults: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"num_servings\",\n    id: \"num_servings\",\n    type: \"number\",\n    value: station.num_servings,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"Submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Add\"));\n};\nexport default StationForm;","map":{"version":3,"names":["useState","StationCalcList","React","StationForm","props","clearStation","stn_name","num_servings","undefined","hh_allergies","station","setStation","handleSubmit","event","preventDefault","addStation","updateEditForm","names","values","newStation","i","length","handleFormChange","fieldName","target","getAttribute","fieldValue","type","checked","value"],"sources":["C:/Users/mcnee/OneDrive/Desktop/fft/ffreact-prod/src/Stations/StationForm.js"],"sourcesContent":["import {useState} from 'react'\r\nimport StationCalcList from './StationCalcList.js'\r\nimport React from 'react'\r\n\r\n// Angela McNeese\r\n\r\n// Station Form component\r\n// Takes AddStation callback function\r\n// Returns a form that can be used to define a new Station object in a StationList\r\nconst StationForm = (props) => {\r\n\r\n    const clearStation = () => {\r\n    return {\r\n      stn_name: \"\",\r\n      num_servings: undefined,\r\n     \r\n      hh_allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this Station Form with each attribute of Station, using the clearStation helper function\r\n    const [station, setStation] = useState(clearStation());\r\n\r\n    // Handle form submission (prevent refresh, pass Station to addStation, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass Station object to StationList callback\r\n        props.addStation(station)\r\n      // Clear the form state\r\n        setStation(clearStation());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newStation = {...station};\r\n      for (let i = 0; i < names.length; i++) {\r\n          newStation[names[i]] = values[i];\r\n        // console.log('(' + names[i] + ', ' + values[i] + ')', newStation.aFlag);\r\n      }\r\n        setStation(newStation);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n      // Create new Station object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic station info */}\r\n          <label htmlFor=\"stn_name\">Name: </label>\r\n            <input name=\"stn_name\" id=\"stn_name\" type=\"text\" maxLength='50' required={true} value={station.stn_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_servings'>Number of Adults: </label>\r\n            <input name='num_servings' id=\"num_servings\" type=\"number\" value={station.num_servings} onChange={handleFormChange}/>\r\n\r\n          <br />\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default StationForm"],"mappings":";;;;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAEA;AACA;AACA;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAK,EAAK;EAE3B,IAAMC,YAAY,GAAG,SAAfA,YAAY,GAAS;IAC3B,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAEC,SAAS;MAEvBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;;EAED;EAAA,gBACgCT,QAAQ,CAACK,YAAY,EAAE,CAAC;IAAA;IAA/CK,OAAO;IAAEC,UAAU,kBAE1B;EACA;EACA;EACA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;IAC9B;IACAA,KAAK,CAACC,cAAc,EAAE;IACtB;IACEV,KAAK,CAACW,UAAU,CAACL,OAAO,CAAC;IAC3B;IACEC,UAAU,CAACN,YAAY,EAAE,CAAC;EAC9B,CAAC;EAED,IAAMW,cAAc,GAAG,SAAjBA,cAAc,CAAIC,KAAK,EAAEC,MAAM,EAAK;IACxC,IAAMC,UAAU,qBAAOT,OAAO,CAAC;IAC/B,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCD,UAAU,CAACF,KAAK,CAACG,CAAC,CAAC,CAAC,GAAGF,MAAM,CAACE,CAAC,CAAC;MAClC;IACF;;IACET,UAAU,CAACQ,UAAU,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;EACA;EACA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIT,KAAK,EAAK;IAClC;IACA,IAAMU,SAAS,GAAGV,KAAK,CAACW,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC;IACnD,IAAMC,UAAU,GAAGb,KAAK,CAACW,MAAM,CAACG,IAAI,KAAK,UAAU,GAAI,CAACd,KAAK,CAACW,MAAM,CAACI,OAAO,GAAIf,KAAK,CAACW,MAAM,CAACK,KAAK;IAClG;IACAb,cAAc,CAAC,CAACO,SAAS,CAAC,EAAE,CAACG,UAAU,CAAC,CAAC;IACzC;EACF,CAAC;;EAED;EACA,oBACE;IAAM,QAAQ,EAAEd,YAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEzB;IAAO,OAAO,EAAC,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,YAAe,eACtC;IAAO,IAAI,EAAC,UAAU;IAAC,EAAE,EAAC,UAAU;IAAC,IAAI,EAAC,MAAM;IAAC,SAAS,EAAC,IAAI;IAAC,QAAQ,EAAE,IAAK;IAAC,KAAK,EAAEF,OAAO,CAACJ,QAAS;IAAC,QAAQ,EAAEgB,gBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eAExI;IAAO,OAAO,EAAC,cAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBAA2B,eACtD;IAAO,IAAI,EAAC,cAAc;IAAC,EAAE,EAAC,cAAc;IAAC,IAAI,EAAC,QAAQ;IAAC,KAAK,EAAEZ,OAAO,CAACH,YAAa;IAAC,QAAQ,EAAEe,gBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eAEvH;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAM,eAEN;IAAQ,IAAI,EAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,SAAa,CAC/B;AAEb,CAAC;AAED,eAAenB,WAAW"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\mcnee\\\\OneDrive\\\\Desktop\\\\fft\\\\ffreact-prod\\\\src\\\\Meals\\\\MealPlanForm.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport ReusableForm from '../ReusableForm.js';\n\n// Sabona Abubeker\n\n// Neal Plan Form component\n// Takes AddMeal callback function\n// Returns a form that can be used to define a new meal object in a mealList\nvar MealPlanForm = function MealPlanForm(props) {\n  var clearMeal = function clearMeal() {\n    return {\n      m_id: null,\n      m_date: '',\n      snack_r_num: null,\n      meal_r_num: null,\n      num_servings: null\n    };\n  };\n\n  // The state of this Meal Plan Form with each attribute of Meals\n  var _useState = useState(clearMeal()),\n    _useState2 = _slicedToArray(_useState, 2),\n    meal = _useState2[0],\n    setMeal = _useState2[1]; // const [mealList, setMealList] = useState([{m_id: 1, meal_r_num: 'Meal Name'}, {m_id: 2, meal_r_num: 'Meal Name'}]);\n  // Handle form submission (prevent refresh, pass ingredient to addMeal, and clear form state)\n  // Takes submit event information (form submission)\n  // Returns none\n  var handleSubmit = function handleSubmit(event) {\n    // Prevent refresh\n    event.preventDefault();\n    // Pass Meal object to MealList callback\n    props.addMeal(meal);\n    // Clear the form state\n    setMeal(clearMeal());\n  };\n  var updateEditForm = function updateEditForm(names, values) {\n    var newMeal = _objectSpread({}, meal);\n    for (var i = 0; i < names.length; i++) {\n      newMeal[names[i]] = values[i];\n      console.log('(' + names[i] + ', ' + values[i] + ')');\n    }\n    setMeal(newMeal);\n  };\n\n  // Handle the data inputted to each form input and set the state with the new values\n  // General solution, input verification is tricky with this implementation\n  // Takes input change event information (name, type, and value)\n  // Returns None\n  var handleFormChange = function handleFormChange(event) {\n    // Get the name and value of the changed field\n    var fieldName = event.target.getAttribute('name');\n    var fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\n    // Create new ingredient object before setting state\n    updateEditForm([fieldName], [fieldValue]);\n    // updateEditForm('aFlag', true);\n  };\n\n  // HTML structure of this component\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"m_id\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Meal Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"Meal Name\",\n    type: \"text\",\n    maxLength: \"30\",\n    value: meal.m_id,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"snack_r_num\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Snack Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"snack_r_num\",\n    type: \"text\",\n    value: meal.snack_r_num,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"m_date\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Meal Date: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"m_date\",\n    type: \"date\",\n    value: meal.m_date,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"meal_r_num\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Meal Number: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"meal_r_num\",\n    type: \"number\",\n    value: meal.in_qty,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"unit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Snack Number: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"unit\",\n    type: \"text\",\n    value: meal.unit,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"exp_date\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Exp Date: \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"exp_date\",\n    type: \"date\",\n    value: meal.exp_date,\n    onChange: handleFormChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"snack_r_num\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Snack Recipe Number: \"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"snack_r_num\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    selected: \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"N/A\"), mealList.map(function (meal, key) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: meal.snack_r_num,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, meal.snack_r_num);\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"Submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Add\"));\n};\nexport default MealPlanForm;","map":{"version":3,"names":["useState","React","ReusableForm","MealPlanForm","props","clearMeal","m_id","m_date","snack_r_num","meal_r_num","num_servings","meal","setMeal","handleSubmit","event","preventDefault","addMeal","updateEditForm","names","values","newMeal","i","length","console","log","handleFormChange","fieldName","target","getAttribute","fieldValue","type","checked","value","in_qty","unit","exp_date","mealList","map","key"],"sources":["C:/Users/mcnee/OneDrive/Desktop/fft/ffreact-prod/src/Meals/MealPlanForm.js"],"sourcesContent":["import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm.js'\r\n\r\n// Sabona Abubeker\r\n\r\n// Neal Plan Form component\r\n// Takes AddMeal callback function\r\n// Returns a form that can be used to define a new meal object in a mealList\r\nconst MealPlanForm = (props) => {\r\n  \r\n  const clearMeal = () => {\r\n    return {\r\n      m_id: null,\r\n      m_date: '',\r\n      snack_r_num: null,\r\n      meal_r_num: null,\r\n      num_servings: null\r\n    }\r\n  }\r\n\r\n  // The state of this Meal Plan Form with each attribute of Meals\r\n  const [meal, setMeal] = useState(clearMeal());\r\n // const [mealList, setMealList] = useState([{m_id: 1, meal_r_num: 'Meal Name'}, {m_id: 2, meal_r_num: 'Meal Name'}]);\r\n\r\n    // Handle form submission (prevent refresh, pass ingredient to addMeal, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass Meal object to MealList callback\r\n      props.addMeal(meal)\r\n      // Clear the form state\r\n      setMeal(clearMeal());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newMeal = {...meal};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newMeal[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')');\r\n      }\r\n      setMeal(newMeal);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new ingredient object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic Meal Plan info */}\r\n          <label htmlFor=\"m_id\">Meal Name: </label>\r\n          <input name=\"Meal Name\" type=\"text\" maxLength='30' value={meal.m_id} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='snack_r_num'>Snack Name: </label>\r\n          <input name='snack_r_num' type=\"text\" value={meal.snack_r_num} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor=\"m_date\">Meal Date: </label>\r\n          <input name=\"m_date\" type=\"date\" value={meal.m_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"meal_r_num\">Meal Number: </label>\r\n          <input name=\"meal_r_num\" type=\"number\" value={meal.in_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit\">Snack Number: </label>\r\n          <input name=\"unit\" type=\"text\" value={meal.unit} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"exp_date\">Exp Date: </label>\r\n          <input name=\"exp_date\" type=\"date\" value={meal.exp_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"snack_r_num\">Snack Recipe Number: </label>\r\n          <select name=\"snack_r_num\">\r\n            <option selected=\"true\">N/A</option>\r\n            {mealList.map((meal, key) => {\r\n              return (\r\n                <option value={meal.snack_r_num}>{meal.snack_r_num}</option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default MealPlanForm\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
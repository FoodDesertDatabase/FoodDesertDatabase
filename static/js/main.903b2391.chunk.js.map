{"version":3,"sources":["MealPlan.js","DisplayMessage.js","Households/AllergiesList.js","Households/HouseholdForm.js","LoginPage.js","Households/EditableHouseholdRow.js","Households/HouseholdRow.js","Error.js","Households/HouseholdList.js","Ingredients/IngredientForm.js","Ingredients/EditableIngredientRow.js","Ingredients/IngredientRow.js","Ingredients/IngredientList.js","App.js","reportWebVitals.js","index.js"],"names":["MealRepositoryTable","props","_useState","useState","meals","_useState2","Object","slicedToArray","react_default","a","createElement","DisplayMessage","text","AllergiesList","allergies","setAllergies","_useState3","aType","_useState4","currAllergy","setCurrAllergy","_useState5","_useState6","_useState7","isEditable","_useState8","useEffect","setAFlag","allergyList","length","react","map","allergy","thisKey","key","a_type","type","onClick","allergyID","newAllergies","toConsumableArray","splice","ret","updateEditForm","handleDeleteAllergy","name","onChange","event","fieldName","target","getAttribute","fieldValue","checked","value","newAllergy","objectSpread","preventDefault","concat","console","log","HouseholdForm","hh_name","num_adult","num_child","veg_flag","gf_flag","a_flag","sms_flag","paused_flag","phone","street","city","pcode","delivery_notes","state","hh_allergies","household","setHousehold","names","values","newHousehold","i","aFlag","handleFormChange","onSubmit","addHousehold","htmlFor","id","maxLength","required","pattern","minLength","Households_AllergiesList","LoginPage","handlePageClick","username","password","user","setUser","handleLoginChange","thisUser","axios","method","url","data","then","response","catch","error","status","headers","EditableHouseholdRow","editFormData","updateHousehold","handleEditFormChange","handleCancelClick","updateAllergies","hh","defaultValue","HouseholdRow","deleteHousehold","handleEditClick","String","Boolean","Error","errorText","style","color","HouseholdList","undefined","households","setHouseholds","editHouseholdID","setEditHouseholdID","setEditFormData","errorComponent","setErrorComponent","_useState9","_useState10","displayMsgComponent","setdisplayMsgComponent","clearError","getDBHouseholds","hhData","householdID","newHouseholds","newEditFormData","Fragment","className","Households_EditableHouseholdRow","Households_HouseholdRow","Households_HouseholdForm","find","HH","src_Error","src_DisplayMessage","msg","IngredientForm","i_id","ingredient_name","pkg_type","storage_type","in_date","in_qty","unit","exp_date","qty_on_hand","unit_cost","flat_fee","isupplier_name","pref_isupplier_name","ingredient","setIngredient","s_id","supplier_name","supplierList","newIngredient","addIngredient","step","selected","supplier","EditableIngredientRow","updateIngredient","placeholder","IngredientRow","deleteIngredient","ing","IngredientList","usages","i_usage_id","used_date","used_qty","ingredients","setIngredients","editIngredientID","setEditIngredientID","ingID","newIngredients","thisID","class","Ingredients_EditableIngredientRow","Ingredients_IngredientRow","Ingredients_IngredientForm","lastID","ingData","App","currPage","setCurrPage","pageName","src_LoginPage","MealPlan","HouseholdList_HouseholdList","IngredientList_IngredientList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"uPAeeA,EAVa,SAACC,GAE3B,IAAAC,EAC0BC,mBAASF,EAAMG,OAAMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAnCG,EAAA,GAAUA,EAAA,GAEtB,OACEG,EAAAC,EAAAC,cAAA,4CCCWC,EAPQ,SAACV,GACpB,IAAMW,EAAOX,EAAMW,KACnB,OACIJ,EAAAC,EAAAC,cAAA,UAAKE,ICgHEC,EAlHO,SAACZ,GAAU,IAAAC,EACKC,mBAASF,EAAMa,WAAUT,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAApDY,EAAST,EAAA,GAAEU,EAAYV,EAAA,GAAAW,EACQb,mBAAS,CAACc,MAAO,KAAIC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAApDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAAAG,EACoBlB,mBAAS,MAAKmB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAAlBE,GAAxBD,EAAA,GAAwBA,EAAA,GACdnB,mBAASF,EAAMuB,aAAWC,EAAAnB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAAvDC,EAAUC,EAAA,GAAeA,EAAA,GAEhCC,oBAAW,WACPX,EAAad,EAAMa,YACpB,CAACb,EAAMa,YAKV,IAWMa,EAAW,SAACC,GACd,OAAIA,EAAYC,OAAS,EACd,CAAC,UAAU,GAGX,CAAC,UAAU,IAuB1B,OAAIL,EAEIhB,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KACLtB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aAEKI,EAAUiB,IAAI,SAACC,EAASC,GACrB,OACIzB,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KACLtB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKD,GACLzB,EAAAC,EAAAC,cAAA,UACKsB,EAAQG,QAEb3B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,SAASC,QAAS,YAvB3C,SAACH,GACzB,IAAMI,EAAYJ,EACdK,EAAYjC,OAAAkC,EAAA,EAAAlC,CAAOQ,GACvByB,EAAaE,OAAOH,EAAW,GAC/BvB,EAAawB,GACb,IAAMG,EAAMf,EAASY,GACrBtC,EAAM0C,eAAe,CAAC,YAAaD,EAAI,IAAK,CAACH,EAAcG,EAAI,KAiBWE,CAAoBX,KAAU,eAQxFzB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQT,KAAK,OAAOU,SA/DhC,SAACC,GAEzB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpFC,EAAUhD,OAAAiD,EAAA,EAAAjD,CAAA,GAAOa,GACvBmC,EAAWN,GAAaG,EAExB/B,EAAekC,IAuDwED,MAAOlC,EAAYF,SAEtFT,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,SAASC,QA9CzB,SAACU,GACtBA,EAAMS,iBACN,IAAMjB,EAAY,GAAAkB,OAAAnD,OAAAkC,EAAA,EAAAlC,CAAQQ,GAAS,CAAEK,IACrCJ,EAAawB,GACbnB,EAAe,CAACe,OAAQ,KACxB,IAAMO,EAAMf,EAASY,GACrBmB,QAAQC,IAAIjB,GACZzC,EAAM0C,eAAe,CAAC,YAAaD,EAAI,IAAK,CAACH,EAAcG,EAAI,OAuCS,YAYpElC,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KACLtB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aAEKI,EAAUiB,IAAI,SAACC,EAASC,GACrB,OACIzB,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KACLtB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKD,GACLzB,EAAAC,EAAAC,cAAA,UACKsB,EAAQG,gBCkCtCyB,EAnIO,SAAC3D,GAErB,IAoBAC,EACkCC,mBApBzB,CACL0D,QAAS,GACTC,UAAW,EACXC,UAAW,EACXC,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,MAAO,GACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,eAAgB,GAChBC,MAAO,KACPC,aAAc,KAK0CtE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAArD0E,EAASvE,EAAA,GAAEwE,EAAYxE,EAAA,GActBsC,EAAiB,SAACmC,EAAOC,GAE7B,IADA,IAAMC,EAAY1E,OAAAiD,EAAA,EAAAjD,CAAA,GAAOsE,GAChBK,EAAI,EAAGA,EAAIH,EAAMjD,OAAQoD,IAChCD,EAAaF,EAAMG,IAAMF,EAAOE,GAChCvB,QAAQC,IAAI,IAAMmB,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKD,EAAaE,OAEpEL,EAAaG,IAOTG,EAAmB,SAACpC,GAExB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAE1FV,EAAe,CAACK,GAAY,CAACG,KAK/B,OACE3C,EAAAC,EAAAC,cAAA,QAAM0E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAENvD,EAAMoF,aAAaT,GAEnBC,EA/BK,CACLhB,QAAS,GACTC,UAAW,EACXC,UAAW,EACXC,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,MAAO,GACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,GACPC,eAAgB,GAChBC,MAAO,KACPC,aAAc,OA6CVnE,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,WAAS,UACxB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,UAAU0C,GAAG,UAAUnD,KAAK,OAAOoD,UAAU,KAAKC,UAAU,EAAMpC,MAAOuB,EAAUf,QAASf,SAAUqC,IAElH3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,aAAW,sBAC1B9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,YAAY0C,GAAG,YAAYnD,KAAK,SAASiB,MAAOuB,EAAUd,UAAWhB,SAAUqC,IAE3F3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,aAAW,wBAC1B9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,YAAY0C,GAAG,YAAYnD,KAAK,SAASiB,MAAOuB,EAAUb,UAAWjB,SAAUqC,IAI3F3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,sBACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,WAAWgB,QAASwB,EAAUZ,SAAUlB,SAAUqC,IAE5F3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,WAAS,iBACxB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,UAAU0C,GAAG,UAAUnD,KAAK,WAAWgB,QAASwB,EAAUX,QAASnB,SAAUqC,IAEzF3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,UAAQ,aACvB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAS0C,GAAG,SAASnD,KAAK,WAAWgB,QAASwB,EAAUV,OAAQpB,SAAUqC,IAEtF3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,mBACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,WAAWgB,QAASwB,EAAUT,SAAUrB,SAAUqC,IAE5F3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,eAAa,eAC5B9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,cAAc0C,GAAG,cAAcnD,KAAK,WAAWgB,QAASwB,EAAUR,YAAatB,SAAUqC,IAGrG3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,SAAO,kBACtB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQ0C,GAAG,QAAQnD,KAAK,MAAMsD,QAAQ,6BAA6BC,UAAU,KAAKH,UAAU,KAAKnC,MAAOuB,EAAUP,MAAOvB,SAAUqC,IAE/I3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,UAAQ,YACvB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAS0C,GAAG,SAASC,UAAU,KAAKnC,MAAOuB,EAAUN,OAAQxB,SAAUqC,IAEnF3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,QAAM,UACrB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAO0C,GAAG,OAAOC,UAAU,KAAKnC,MAAOuB,EAAUL,KAAMzB,SAAUqC,IAE7E3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,SAAO,iBACtB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQ0C,GAAG,QAAQI,UAAU,IAAIH,UAAU,IAAInC,MAAOuB,EAAUJ,MAAO1B,SAAUqC,IAE7F3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,SAAO,WACtB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQ0C,GAAG,QAAQI,UAAU,IAAIH,UAAU,IAAInC,MAAOuB,EAAUF,MAAO5B,SAAUqC,IAE7F3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,kBAAgB,oBAC/B9E,EAAAC,EAAAC,cAAA,YAAUmC,KAAK,iBAAiB0C,GAAG,iBAAiBC,UAAU,MAAMnC,MAAOuB,EAAUH,eAAgB3B,SAAUqC,IAG/G3E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACkF,EAAa,CAAC9E,UAAW8D,EAAUD,aAAcnD,YAAY,EAAMmB,eAAgBA,IAEpFnC,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAQ,gBC9DhByD,EAjEG,SAAC5F,GACf,IAAM6F,EAAkB7F,EAAM6F,gBAAgB5F,EACtBC,mBACpB,CACI4F,SAAU,GACVC,SAAU,KAEjB3F,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GALM+F,EAAI5F,EAAA,GAAE6F,EAAO7F,EAAA,GA2Bd8F,EAAoB,SAACpD,GACvB,IAAMC,EAAYD,EAAME,OAAOJ,KACzBM,EAAaJ,EAAME,OAAOI,MAC1B+C,EAAQ9F,OAAAiD,EAAA,EAAAjD,CAAA,GAAO2F,GACrBG,EAASpD,GAAaG,EACtB+C,EAAQE,IAiBZ,OACI5F,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KACLtB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QAAM0E,SAdY,SAACrC,GAEvBA,EAAMS,iBAhCN6C,YAAM,CACFC,OAAQ,OACRC,IAAI,GACJC,KAAMP,IACLQ,KAAK,SAACC,GACP,IAAMF,EAAOE,EAASF,KACtB9C,QAAQC,IAAI6C,KACXG,MAAM,SAACC,GACJA,EAAMF,WACRhD,QAAQC,IAAIiD,EAAMF,UAClBhD,QAAQC,IAAIiD,EAAMF,SAASG,QAC3BnD,QAAQC,IAAIiD,EAAMF,SAASI,YAyBjChB,EAAgB,aASRtF,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,cACzB9E,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOoD,UAAU,KAAK3C,KAAK,WAAWQ,MAAO4C,EAAKF,SAAUjD,SAAUqD,IAClF3F,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,cACzB9E,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,WAAWoD,UAAU,KAAK3C,KAAK,WAAWQ,MAAO4C,EAAKD,SAAUlD,SAAUqD,IACtF3F,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAQ,YC/BtB2E,EA9Bc,SAAC9G,GAAU,IAC7BgC,EAAoHhC,EAApHgC,QAAS+E,EAA2G/G,EAA3G+G,aAAcC,EAA6FhH,EAA7FgH,gBAAiBC,EAA4EjH,EAA5EiH,qBAAsBC,EAAsDlH,EAAtDkH,kBAAmBC,EAAmCnH,EAAnCmH,gBAAiBzE,EAAkB1C,EAAlB0C,eACnG0E,EAAKL,EACL9E,EAAMD,EAGZ,OACIzB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKA,GACL1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOS,KAAK,UAAUyE,aAAcD,EAAGxD,QAASf,SAAUoE,KAC1E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,SAASS,KAAK,YAAYyE,aAAcD,EAAGvD,UAAWhB,SAAUoE,KAChF1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,SAASS,KAAK,YAAYyE,aAAcD,EAAGtD,UAAWjB,SAAUoE,KAChF1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,WAAWgB,QAASiE,EAAGrD,SAAUlB,SAAUoE,KAC3E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,UAAUT,KAAK,WAAWgB,QAASiE,EAAGpD,QAASnB,SAAUoE,KACzE1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAST,KAAK,WAAWgB,QAASiE,EAAGnD,OAAQpB,SAAUoE,KACvE1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,WAAWgB,QAASiE,EAAGlD,SAAUrB,SAAUoE,KAC3E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,cAAcT,KAAK,WAAWgB,QAASiE,EAAGjD,YAAatB,SAAUoE,KACjF1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQT,KAAK,MAAMsD,QAAQ,6BAA6BC,UAAU,KAAKH,UAAU,KAAK8B,aAAcD,EAAGhD,MAAOvB,SAAUoE,KACxI1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAST,KAAK,OAAOkF,aAAcD,EAAG/C,OAAQxB,SAAUoE,KACxE1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOT,KAAK,OAAOkF,aAAcD,EAAG9C,KAAMzB,SAAUoE,KACpE1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQT,KAAK,SAASuD,UAAU,IAAIH,UAAU,IAAI8B,aAAcD,EAAG7C,MAAO1B,SAAUoE,KACpG1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,QAAQT,KAAK,OAAOuD,UAAU,IAAIH,UAAU,IAAI8B,aAAcD,EAAG3C,MAAO5B,SAAUoE,KAClG1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAUmC,KAAK,gBAAgByE,aAAcD,EAAG5C,eAAgB3B,SAAUoE,KAC9E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkF,EAAa,CAAC9E,UAAWuG,EAAG1C,aAAcnD,YAAY,EAAM4F,gBAAiBA,EAAiBzE,eAAgBA,KACnHnC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,SAASC,QAAS,WAAK4E,EAAgB/E,KAAM,SAC9D1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS8E,GAAkB,aCMpCI,EA/BM,SAACtH,GAAU,IACrBgC,EAAwDhC,EAAxDgC,QAAS2C,EAA+C3E,EAA/C2E,UAAW4C,EAAoCvH,EAApCuH,gBAAiBC,EAAmBxH,EAAnBwH,gBACtCvF,EAAMD,EACNoF,EAAKzC,EAGX,OACIpE,EAAAC,EAAAC,cAAA,MAAIwB,IAAKA,GACL1B,EAAAC,EAAAC,cAAA,UAAK2G,EAAGxD,SACRrD,EAAAC,EAAAC,cAAA,UAAK2G,EAAGvD,WACRtD,EAAAC,EAAAC,cAAA,UAAK2G,EAAGtD,WACRvD,EAAAC,EAAAC,cAAA,UAAKgH,OAAOC,QAAQN,EAAGrD,YACvBxD,EAAAC,EAAAC,cAAA,UAAKgH,OAAOC,QAAQN,EAAGpD,WACvBzD,EAAAC,EAAAC,cAAA,UAAKgH,OAAOC,QAAQN,EAAGnD,UACvB1D,EAAAC,EAAAC,cAAA,UAAKgH,OAAOC,QAAQN,EAAGlD,YACvB3D,EAAAC,EAAAC,cAAA,UAAKgH,OAAOC,QAAQN,EAAGjD,eACvB5D,EAAAC,EAAAC,cAAA,UAAK2G,EAAGhD,OACR7D,EAAAC,EAAAC,cAAA,UAAK2G,EAAG/C,QACR9D,EAAAC,EAAAC,cAAA,UAAK2G,EAAG9C,MACR/D,EAAAC,EAAAC,cAAA,UAAK2G,EAAG7C,OACRhE,EAAAC,EAAAC,cAAA,UAAK2G,EAAG3C,OACRlE,EAAAC,EAAAC,cAAA,UAAK2G,EAAG5C,gBACRjE,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACkF,EAAa,CAAC9E,UAAWuG,EAAG1C,aAAcnD,YAAY,KAE3DhB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAKoF,EAAgBvF,KAAK,SAE/C1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMmF,EAAgBtF,KAAK,aCpB7C0F,EAPD,SAAC3H,GACX,IAAM4H,EAAY5H,EAAMW,KACxB,OACIJ,EAAAC,EAAAC,cAAA,MAAIoH,MAAO,CAACC,MAAO,QAASF,UCIrB,SAASG,IAIpB,IAAA9H,EAEoCC,wBAAS8H,GAAU5H,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAhDgI,EAAU7H,EAAA,GAAE8H,EAAa9H,EAAA,GAAAW,EACcb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAArDoH,EAAelH,EAAA,GAAEmH,EAAkBnH,EAAA,GAAAG,EACFlB,mBAAS,MAAKmB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAA/C2F,EAAY1F,EAAA,GAAEgH,EAAehH,EAAA,GAAAC,EACQpB,mBAAS,MAAKsB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAAnDgH,EAAc9G,EAAA,GAAE+G,EAAiB/G,EAAA,GAAAgH,EACctI,mBAAS,MAAKuI,EAAApI,OAAAC,EAAA,EAAAD,CAAAmI,EAAA,GAA7DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAS5CG,EAAa,WACfL,EAAkB,OAGtB9G,oBAAU,WACNyG,EAAcW,MACf,IAEH,IAAMA,EAAkB,WACpBpF,QAAQC,IAAI,4BACZ0C,YAAM,CACFC,OAAQ,MACRC,IAAI,uDACHE,KAAK,SAACC,GACP,IAAMqC,EAASrC,EAASF,KACxB2B,EAAcY,KACbpC,MAAM,SAACC,GACJA,EAAMF,WACRhD,QAAQC,IAAIiD,EAAMF,UAClBhD,QAAQC,IAAIiD,EAAMF,SAASG,QAC3BnD,QAAQC,IAAIiD,EAAMF,SAASI,aAqC/BU,EAAkB,SAACtF,GACrB,IAAM8G,EAAc9G,EAChB+G,EAAa3I,OAAAkC,EAAA,EAAAlC,CAAO4H,GACxBe,EAAcxG,OAAOuG,EAAa,GAClCb,EAAcc,IAGZhC,EAAkB,SAAC/E,GACNgG,EAAWhG,GAA1B,IACI+G,EAAa3I,OAAAkC,EAAA,EAAAlC,CAAO4H,GACxBe,EAAc/G,GAAO8E,EACrBqB,EAAmB,MACnBF,EAAcc,GACdJ,KAGE3B,EAAuB,SAACnE,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF6F,EAAe5I,OAAAiD,EAAA,EAAAjD,CAAA,GAAO0G,GAC5BkC,EAAgBlG,GAAaG,EAE7BmF,EAAgBY,IAEdvG,EAAiB,SAACmC,EAAOC,GAE3B,IADA,IAAMmE,EAAe5I,OAAAiD,EAAA,EAAAjD,CAAA,GAAO0G,GACnB/B,EAAI,EAAGA,EAAIH,EAAMjD,OAAQoD,IAChCiE,EAAgBpE,EAAMG,IAAMF,EAAOE,GACnCvB,QAAQC,IAAI,IAAMmB,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKiE,EAAgBhF,QAEvEoE,EAAgBY,IAGdzB,EAAkB,SAACvF,GACrBmG,EAAmBnG,GACnBoG,EAAgBJ,EAAWhG,KAEzBiF,EAAoB,WACtBkB,EAAmB,MACnBC,EAAgB,OAGpB,YAAmBL,IAAfC,EACQ1H,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0I,SAAA,gBAMR3I,EAAAC,EAAAC,cAAA,OAAK0I,UAAU,aACX5I,EAAAC,EAAAC,cAAA,SAAO0I,UAAU,cACb5I,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yBAGRF,EAAAC,EAAAC,cAAA,aAEKwH,EAAWnG,IAAI,SAAC6C,EAAW1C,GACxB,IAAMD,EAAUC,EAChB,OACI1B,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KAGLsG,IAAoBnG,EAClBzB,EAAAC,EAAAC,cAAC2I,EAAoB,CAACpH,QAASA,EAAS+E,aAAcA,EAAcC,gBAAiBA,EAAiBC,qBAAsBA,EAAsBvE,eAAgBA,EAAgBwE,kBAAmBA,IACrM3G,EAAAC,EAAAC,cAAC4I,EAAY,CAACrH,QAASA,EAAS2C,UAAWA,EAAW4C,gBAAiBA,EAAiBC,gBAAiBA,SAO/HjH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC6I,EAAa,CAAClE,aAxGF,SAACT,GAElB,GAAKsD,EAAWsB,KAAK,SAACC,GAAE,OAAKA,EAAG5F,UAAYe,EAAUf,UAlDlD2E,EACIhI,EAAAC,EAAAC,cAACgJ,EAAK,CAAC9I,KAAK,uCAkDpB,CACI,IAAIqI,EAAa,GAAAxF,OAAAnD,OAAAkC,EAAA,EAAAlC,CAAO4H,GAAU,CAAEtD,IACpCuD,EAAcc,GACdJ,QAmGArI,EAAAC,EAAAC,cAAA,UAAQ2B,QA3HS,WACrBqB,QAAQC,IAAIuE,GACZ7B,YAAM,CACFC,OAAQ,OACRC,IAAK,qDACLC,KAAM0B,IACLzB,KAAK,SAACC,GACPoC,MACCnC,MAAM,SAACC,GACJA,EAAMF,WACRhD,QAAQC,IAAIiD,EAAMF,UAClBhD,QAAQC,IAAIiD,EAAMF,SAASG,QAC3BnD,QAAQC,IAAIiD,EAAMF,SAASI,YAGjC8B,EAAuBpI,EAAAC,EAAAC,cAACiJ,EAAc,CAACC,IAAI,uCA4GL,kBACjCrB,EACAI,GC5Kb,IAqHekB,EArHQ,SAAC5J,GAEtB,IAkBAC,EACoCC,mBAlB3B,CACL2J,KAAM,KACNC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACdC,QAAS,GACTC,OAAQ,KACRC,KAAM,KACNC,SAAU,KACVC,YAAa,KACbC,UAAW,KACXC,SAAU,KACVC,eAAgB,KAChBC,oBAAqB,OAKsCrK,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAxDyK,EAAUtK,EAAA,GAAEuK,EAAavK,EAAA,GAAAW,EACQb,mBAAS,CAAC,CAAC0K,KAAM,EAAGC,cAAe,4BAA6B,CAACD,KAAM,EAAGC,cAAe,6BAA4B5J,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAtJ+J,EAAY7J,EAAA,GA2BXiE,GA3B4BjE,EAAA,GA2BT,SAAC6B,IAbH,SAAC+B,EAAOC,GAE7B,IADA,IAAMiG,EAAa1K,OAAAiD,EAAA,EAAAjD,CAAA,GAAOqK,GACjB1F,EAAI,EAAGA,EAAIH,EAAMjD,OAAQoD,IAChC+F,EAAclG,EAAMG,IAAMF,EAAOE,GACjCvB,QAAQC,IAAI,IAAMmB,EAAMG,GAAK,KAAOF,EAAOE,GAAK,KAElD2F,EAAcI,GAYdrI,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,UAO5F,OACE7C,EAAAC,EAAAC,cAAA,QAAM0E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAENvD,EAAMgL,cAAcN,GAEpBC,EA9BK,CACLd,KAAM,KACNC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACdC,QAAS,GACTC,OAAQ,KACRC,KAAM,KACNC,SAAU,KACVC,YAAa,KACbC,UAAW,KACXC,SAAU,KACVC,eAAgB,KAChBC,oBAAqB,SA8CjBlK,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,mBAAiB,qBAChC9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,kBAAkBT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOsH,EAAWZ,gBAAiBjH,SAAUqC,IAEtG3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,kBACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWX,SAAUlH,SAAUqC,IAEzE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,gBAAc,kBAC7B9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,eAAeT,KAAK,OAAOiB,MAAOsH,EAAWV,aAAcnH,SAAUqC,IAEjF3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,WAAS,aACxB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,UAAUT,KAAK,OAAOiB,MAAOsH,EAAWT,QAASpH,SAAUqC,IAEvE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,UAAQ,iBACvB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAST,KAAK,SAASiB,MAAOsH,EAAWR,OAAQrH,SAAUqC,IAEvE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,QAAM,UACrB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOT,KAAK,OAAOiB,MAAOsH,EAAWP,KAAMtH,SAAUqC,IAEjE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,cACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWN,SAAUvH,SAAUqC,IAEzE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,aAAW,eAC1B9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,YAAYT,KAAK,SAAS8I,KAAK,OAAO7H,MAAOsH,EAAWJ,UAAWzH,SAAUqC,IAEzF3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,cACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,SAAS8I,KAAK,OAAO7H,MAAOsH,EAAWH,SAAU1H,SAAUqC,IAEvF3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,YAAU,cACzB9E,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWN,SAAUvH,SAAUqC,IAEzE3E,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,aAAW,cAC1B9E,EAAAC,EAAAC,cAAA,UAAQmC,KAAK,eAAeC,SAAUqC,GACpC3E,EAAAC,EAAAC,cAAA,UAAQyK,SAAS,QAAM,OACtBJ,EAAahJ,IAAI,SAACqJ,EAAUlJ,GAC3B,OACE1B,EAAAC,EAAAC,cAAA,UAAQmC,KAAK,eAAeQ,MAAO+H,EAASP,MAAOO,EAASN,kBAKlEtK,EAAAC,EAAAC,cAAA,SAAO4E,QAAQ,kBAAgB,cAC/B9E,EAAAC,EAAAC,cAAA,UAAQmC,KAAK,qBACXrC,EAAAC,EAAAC,cAAA,UAAQyK,SAAS,QAAM,OACtBJ,EAAahJ,IAAI,SAACqJ,EAAUlJ,GAC3B,OACE1B,EAAAC,EAAAC,cAAA,UAAQ2C,MAAO+H,EAASP,MAAOO,EAASN,kBAK9CtK,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAQ,SC/EhBiJ,EArCe,SAACpL,GAAU,IAC9BgC,EAAqHhC,EAArHgC,QAAS+E,EAA4G/G,EAA5G+G,aAAcsE,EAA8FrL,EAA9FqL,iBAAkBpE,EAA4EjH,EAA5EiH,qBAAsBC,EAAsDlH,EAAtDkH,kBAChEwD,GADsH1K,EAAnCmH,gBAAmCnH,EAAlB0C,eACvFqE,GACb9E,EAAMD,EAGZ,OACIzB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKA,GACP1B,EAAAC,EAAAC,cAAA,UAAKiK,EAAWb,MAChBtJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,kBAAkBT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOsH,EAAWZ,gBAAiBjH,SAAUoE,KAE1G1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWX,SAAUlH,SAAUoE,KAE7E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,eAAeT,KAAK,OAAOiB,MAAOsH,EAAWV,aAAcnH,SAAUoE,KAErF1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,UAAUT,KAAK,OAAOmJ,YAAaZ,EAAWT,QAAS7G,MAAOsH,EAAWT,QAASpH,SAAUoE,KAE5G1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,SAAST,KAAK,SAASiB,MAAOsH,EAAWR,OAAQrH,SAAUoE,KAE3E1G,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,OAAOT,KAAK,OAAOiB,MAAOsH,EAAWP,KAAMtH,SAAUoE,KAErE1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWN,SAAUvH,SAAUoE,KAE7E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,YAAYT,KAAK,SAAS8I,KAAK,OAAO7H,MAAOsH,EAAWJ,UAAWzH,SAAUoE,KAE7F1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,SAAS8I,KAAK,OAAO7H,MAAOsH,EAAWH,SAAU1H,SAAUoE,KAE3F1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOmC,KAAK,WAAWT,KAAK,OAAOiB,MAAOsH,EAAWN,SAAUvH,SAAUoE,KAE7E1G,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,WAAKiJ,EAAiBpJ,KAAM,SACjD1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS8E,GAAkB,aCFlCqE,EA9BO,SAACvL,GAAU,IACtBgC,EAA0DhC,EAA1DgC,QAAS0I,EAAiD1K,EAAjD0K,WAAYc,EAAqCxL,EAArCwL,iBAAkBhE,EAAmBxH,EAAnBwH,gBACxCvF,EAAMD,EACNyJ,EAAMf,EAGZ,OACInK,EAAAC,EAAAC,cAAA,MAAIwB,IAAKA,GACL1B,EAAAC,EAAAC,cAAA,UAAKgL,EAAI5B,MACTtJ,EAAAC,EAAAC,cAAA,UAAKgL,EAAI3B,iBACTvJ,EAAAC,EAAAC,cAAA,UAAKgL,EAAI1B,UACTxJ,EAAAC,EAAAC,cAAA,UAAKgL,EAAIzB,cACTzJ,EAAAC,EAAAC,cAAA,UAAKgH,OAAOgE,EAAIxB,UAChB1J,EAAAC,EAAAC,cAAA,UAAKgH,OAAOgE,EAAIvB,SAChB3J,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKgL,EAAIpB,aACT9J,EAAAC,EAAAC,cAAA,UAAKgH,OAAOgE,EAAItB,OAChB5J,EAAAC,EAAAC,cAAA,UAAKgH,OAAOgE,EAAInB,YAChB/J,EAAAC,EAAAC,cAAA,UAAKgH,OAAOgE,EAAIlB,WAChBhK,EAAAC,EAAAC,cAAA,UAAKgL,EAAIrB,UACT7J,EAAAC,EAAAC,cAAA,UAAKgL,EAAIjB,gBACTjK,EAAAC,EAAAC,cAAA,UAAKgL,EAAIhB,qBAETlK,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAKoF,EAAgBvF,KAAK,SAE/C1B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMoJ,EAAiBvJ,KAAK,mBCjB9C,SAASyJ,IACpB,IAICzL,EAEqCC,mBANzB,CACT,CAAC2J,KAAM,EAAGC,gBAAiB,kBAAmBC,SAAU,UAAWC,aAAc,MAAOC,QAAS,WAAYC,OAAQ,GAAIC,KAAM,MAAOC,SAAU,WAAYC,YAAa,GAAIC,UAAW,IAAMC,SAAU,EAAMC,eAAgB,2BAA4BC,oBAAqB,MAAOkB,OAAQ,IAC9R,CAAC9B,KAAM,EAAGC,gBAAiB,cAAeC,SAAU,SAAUC,aAAc,MAAOC,QAAS,WAAYC,OAAQ,EAAGC,KAAM,MAAOC,SAAU,UAAWC,YAAa,EAAGC,UAAW,IAAMC,SAAU,EAAMC,eAAgB,2BAA4BC,oBAAqB,MAAOkB,OAAQ,IACtR,CAAC9B,KAAM,EAAGC,gBAAiB,cAAeC,SAAU,SAAUC,aAAc,MAAOC,QAAS,WAAYC,OAAQ,EAAGC,KAAM,MAAOC,SAAU,UAAWC,YAAa,EAAGC,UAAW,IAAMC,SAAU,EAAMC,eAAgB,2BAA4BC,oBAAqB,MAAOkB,OAAQ,CAAC,CAACC,WAAY,EAAGC,UAAW,WAAYC,SAAU,OAGxR1L,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA7C8L,EAAW3L,EAAA,GAAE4L,EAAc5L,EAAA,GAAAW,EACcb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAvDkL,EAAgBhL,EAAA,GAAEiL,EAAmBjL,EAAA,GAAAG,EACJlB,mBAAS,MAAKmB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAA/C2F,EAAY1F,EAAA,GAAEgH,EAAehH,EAAA,GAAAC,EACQpB,mBAAS,MAAKsB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAAnDgH,EAAc9G,EAAA,GAAE+G,EAAiB/G,EAAA,GAAAgH,EACctI,mBAAS,MAAKuI,EAAApI,OAAAC,EAAA,EAAAD,CAAAmI,EAAA,GAA7DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GA0C5CG,EAAa,WACfL,EAAkB,OAsBhBiD,EAAmB,SAACvJ,GACtB,IAAMkK,EAAQlK,EACVmK,EAAc/L,OAAAkC,EAAA,EAAAlC,CAAO0L,GACzBK,EAAe5J,OAAO2J,EAAO,GAC7BH,EAAeI,IAGbf,EAAmB,SAACpJ,GACtB,IAAIoK,EAASN,EAAY9J,GAAW,KACpC,GAAI8J,EAAYxC,KAAK,SAACkC,GAAG,OAAKA,EAAI5B,OAASwC,IAC3C,CACI,IAAID,EAAc/L,OAAAkC,EAAA,EAAAlC,CAAO0L,GACzBK,EAAenK,GAAO8E,EACtBmF,EAAoB,MACpBF,EAAeI,GACfxD,QA5CY,iBAgDA,gBA/CZL,EACIhI,EAAAC,EAAAC,cAACgJ,EAAK,CAAC9I,KAAK,mCAmDlBsG,EAAuB,SAACnE,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF6F,EAAe5I,OAAAiD,EAAA,EAAAjD,CAAA,GAAO0G,GAC5BkC,EAAgBlG,GAAaG,EAE7BmF,EAAgBY,IAEdvG,EAAiB,SAACmC,EAAOC,GAE3B,IADA,IAAMmE,EAAe5I,OAAAiD,EAAA,EAAAjD,CAAA,GAAO0G,GACnB/B,EAAI,EAAGA,EAAIH,EAAMjD,OAAQoD,IAChCiE,EAAgBpE,EAAMG,IAAMF,EAAOE,GACnCvB,QAAQC,IAAI,IAAMmB,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKiE,EAAgBhE,OAEvEoD,EAAgBY,IAGdzB,EAAkB,SAACvF,GACrBiK,EAAoBjK,GACpBoG,EAAgB0D,EAAY9J,KAE1BiF,EAAoB,WACtBgF,EAAoB,MACpB7D,EAAgB,OAIpB,OAEI9H,EAAAC,EAAAC,cAAA,OAAK6L,MAAM,aACP/L,EAAAC,EAAAC,cAAA,SAAO0I,UAAU,cACb5I,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kCAGRF,EAAAC,EAAAC,cAAA,aAEKsL,EAAYjK,IAAI,SAAC4I,EAAYzI,GAC1B,IAAMD,EAAUC,EAChB,OACI1B,EAAAC,EAAAC,cAACoB,EAAA,SAAQ,KAGLoK,IAAqBjK,EACnBzB,EAAAC,EAAAC,cAAC8L,EAAqB,CAACvK,QAASA,EAAS+E,aAAcA,EAAcsE,iBAAkBA,EAAkBpE,qBAAsBA,EAAsBvE,eAAgBA,EAAgBwE,kBAAmBA,IACxM3G,EAAAC,EAAAC,cAAC+L,EAAa,CAACxK,QAASA,EAAS0I,WAAYA,EAAYc,iBAAkBA,EAAkBhE,gBAAiBA,SAOpIjH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACgM,EAAc,CAACzB,cAhHF,SAACN,GACnB,IAAMgC,EAASX,EAAYA,EAAYnK,OAAS,GAAS,KACzD8I,EAAiB,KAAIgC,EAAS,EAC9B,IAAIN,EAAc,GAAA5I,OAAAnD,OAAAkC,EAAA,EAAAlC,CAAO0L,GAAW,CAAErB,IACtCsB,EAAeI,GACfxD,OA4GIrI,EAAAC,EAAAC,cAAA,UAAQ2B,QA7IU,WACtBgE,YAAM,CACFC,OAAQ,OACRC,IAAI,gBACJC,KAAMwF,IACLvF,KAAK,SAACC,GApBXL,YAAM,CACFC,OAAQ,MACRC,IAAI,kBACHE,KAAK,SAACC,GACP,IAAMkG,EAAUlG,EAASF,KACzByF,EAAeW,KACdjG,MAAM,SAACC,GACJA,EAAMF,WACRhD,QAAQC,IAAIiD,EAAMF,UAClBhD,QAAQC,IAAIiD,EAAMF,SAASG,QAC3BnD,QAAQC,IAAIiD,EAAMF,SAASI,cAY5BH,MAAM,SAACC,GACJA,EAAMF,WACRhD,QAAQC,IAAIiD,EAAMF,UAClBhD,QAAQC,IAAIiD,EAAMF,SAASG,QAC3BnD,QAAQC,IAAIiD,EAAMF,SAASI,YAGjC8B,EAAuBpI,EAAAC,EAAAC,cAACiJ,EAAc,CAACC,IAAI,uCA+HJ,kBAClCrB,EACAI,GChLb,IAoCekE,EApCH,WAAM,IAAA3M,EACgBC,qBAAUE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAnC4M,EAAQzM,EAAA,GAAE0M,EAAW1M,EAAA,GAEtByF,EAAkB,SAAlBA,EAAmBkH,GACvBtJ,QAAQC,IAAIqJ,GACK,kBAAbA,EAA8BD,EAAYvM,EAAAC,EAAAC,cAAC6I,EAAa,OACtC,cAAbyD,EAA0BD,EAAYvM,EAAAC,EAAAC,cAACuM,EAAS,CAACnH,gBAAiBA,KACrD,wBAAbkH,EAAoCD,EAAYvM,EAAAC,EAAAC,cAACwM,EAAmB,OACvD,eAAbF,EAA2BD,EAAYvM,EAAAC,EAAAC,cAACyM,EAAa,OACxC,gBAAbH,EAA4BD,EAAYvM,EAAAC,EAAAC,cAAC0M,EAAW,OACvC,YAAbJ,EAAwBD,EAAYvM,EAAAC,EAAAC,cAACwM,EAAmB,OAC3C,cAAbF,GAA0BD,EAAYvM,EAAAC,EAAAC,cAACkF,EAAa,CAAC9E,UAAW,CAAC,CAACG,MAAO,UAAW,CAACA,MAAO,eAGvG,OACET,EAAAC,EAAAC,cAAA,OAAK0I,UAAU,OACb5I,EAAAC,EAAAC,cAAA,UAAQ0I,UAAU,cAChB5I,EAAAC,EAAAC,cAAA,kCAIAF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMyD,EAAgB,eAAa,cAGpDtF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMyD,EAAgB,gBAAc,cAGrDtF,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMyD,EAAgB,iBAAe,eAGrDgH,KC3BMO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAhH,KAAA+G,EAAAE,KAAA,UAAqBjH,KAAK,SAAAkH,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7N,EAAAC,EAAAC,cAACF,EAAAC,EAAM6N,WAAU,KACf9N,EAAAC,EAAAC,cAAC6N,EAAG,QAORlB","file":"static/js/main.903b2391.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\n// Meal Repository Table component\r\n// Takes list of meals\r\nconst MealRepositoryTable = (props) => {\r\n  // Meals is a list of meal objects with the data from a meal repository query.\r\n  // Each Meal contains: recipeName, dietCategories(a list of diet categories this recipe belongs to), dateLastServed)\r\n  const [meals, setMeals] = useState(props.meals); \r\n  \r\n  return (\r\n    <h1>Meal Repository</h1>\r\n  );\r\n}\r\n\r\nexport default MealRepositoryTable;\r\n","import React from 'react'\r\n\r\n// A display message component\r\n// Takes message text\r\n// Returns an <h4> display message component\r\nconst DisplayMessage = (props) => {\r\n    const text = props.text;\r\n    return (\r\n        <h4>{text}</h4>\r\n    )\r\n}\r\n\r\nexport default DisplayMessage;","import { Fragment } from \"react\";\r\nimport { useState, useEffect } from 'react';\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport React from 'react'\r\n\r\n// Allergy List Component\r\nconst AllergiesList = (props) => {\r\n    const [allergies, setAllergies] = useState(props.allergies);\r\n    const [currAllergy, setCurrAllergy] = useState({aType: ''});\r\n    const [displayMsgComponent, setDisplayMsgComponent] = useState(null);\r\n    const [isEditable, setIsEditable] = useState(props.isEditable);\r\n\r\n    useEffect( () => {\r\n        setAllergies(props.allergies);\r\n    }, [props.allergies]); \r\n\r\n    // Callback function that updates the allergy object currently being edited\r\n    // Takes input change event information (name, type, and value of input field)\r\n    // Returns none\r\n    const handleAllergyChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newAllergy = {...currAllergy};\r\n        newAllergy[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setCurrAllergy(newAllergy);\r\n    }\r\n\r\n    const setAFlag = (allergyList) => {\r\n        if (allergyList.length > 0) {\r\n            return ['a_flag', true];\r\n        }\r\n        else {\r\n            return ['a_flag', false];\r\n        }\r\n    }\r\n\r\n    const handleAddAllergy = (event) => {\r\n        event.preventDefault();\r\n        const newAllergies =  [...allergies, currAllergy];\r\n        setAllergies(newAllergies);\r\n        setCurrAllergy({a_type: ''});\r\n        const ret = setAFlag(newAllergies);\r\n        console.log(ret)\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    const handleDeleteAllergy = (key) => {\r\n        const allergyID = key; \r\n        let newAllergies = [...allergies];\r\n        newAllergies.splice(allergyID, 1);\r\n        setAllergies(newAllergies);\r\n        const ret = setAFlag(newAllergies);\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    if (isEditable) {\r\n        return (\r\n            <Fragment>\r\n                <table>  \r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.a_type}\r\n                                        </td>\r\n                                        <td>\r\n                                            <button type='button' onClick={() => {handleDeleteAllergy(thisKey)}}>\r\n                                                delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                        <tr>\r\n                            <td>\r\n                                <input name=\"aType\" type=\"text\" onChange={handleAllergyChange} value={currAllergy.aType}></input>\r\n                            </td>\r\n                            <td>\r\n                                <button type='button' onClick={handleAddAllergy}>\r\n                                    Add\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Fragment>\r\n                <table>\r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.a_type}\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default AllergiesList;","import {useState} from 'react'\r\nimport AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n\r\n  const clearHousehold = () => {\r\n    return {\r\n      hh_name: '',\r\n      num_adult: 0,\r\n      num_child: 0,\r\n      veg_flag: false,\r\n      gf_flag: false,\r\n      a_flag: false,\r\n      sms_flag: false,\r\n      paused_flag: false,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pcode: '',\r\n      delivery_notes: '',\r\n      state: 'MI',\r\n      hh_allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this Household Form with each attribute of Household, using the clearHousehold helper function\r\n  const [household, setHousehold] = useState(clearHousehold());\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold(clearHousehold());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hh_name\">Name: </label>\r\n          <input name=\"hh_name\" id=\"hh_name\" type=\"text\" maxLength='30' required={true} value={household.hh_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_adult'>Number of Adults: </label>\r\n          <input name='num_adult' id=\"num_adult\" type=\"number\" value={household.num_adult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_child'>Number of Children: </label>\r\n          <input name='num_child' id=\"num_child\" type=\"number\" value={household.num_child} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='veg_flag'>Vegan/Vegetarian: </label>          \r\n          <input name='veg_flag' id='veg_flag' type=\"checkbox\" checked={household.veg_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gf_flag'>Gluten Free: </label>          \r\n          <input name='gf_flag' id='gf_flag' type='checkbox' checked={household.gf_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='a_flag'>Allergy: </label>\r\n          <input name='a_flag' id='a_flag' type='checkbox' checked={household.a_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='sms_flag'>Recieving SMS: </label>\r\n          <input name='sms_flag' id='sms_flag' type='checkbox' checked={household.sms_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='paused_flag'>Is Paused: </label>          \r\n          <input name='paused_flag' id='paused_flag' type='checkbox' checked={household.paused_flag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pcode'>Postal Code: </label>\r\n          <input name='pcode' id='pcode' minLength='5' maxLength='5' value={household.pcode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='delivery_notes'>Delivery Notes: </label>\r\n          <textarea name='delivery_notes' id='delivery_notes' maxLength='255' value={household.delivery_notes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <label>Allergies</label>\r\n          <AllergiesList allergies={household.hh_allergies} isEditable={true} updateEditForm={updateEditForm}/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {Fragment} from 'react'\r\nimport axios from 'axios'\r\n\r\n// Login Page Component\r\n// Takes handlePageClick callback function to enable page switching when login is completed\r\n// Returns a login page component that allows users to enter account information \r\nconst LoginPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            password: ''\r\n        }\r\n    );\r\n\r\n    const sendLoginRequest = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"\",\r\n            data: user\r\n          }).then((response)=>{\r\n            const data = response.data;\r\n            console.log(data);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    // Handle input change for user login\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const handleLoginChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = {...user};\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n    }\r\n    \r\n    // Handle login form submit\r\n    // Takes login form event information (form submission)\r\n    // Returns none\r\n    const handleLoginSubmit = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // send login to backend\r\n        sendLoginRequest();\r\n        // Switch to 'landing' page\r\n        handlePageClick('landing');\r\n        // TO DO;\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h3>Login Page</h3>\r\n            <form onSubmit={handleLoginSubmit}>\r\n                <label htmlFor='username'>Username: </label>\r\n                <input type='text' maxLength='30' name='username' value={user.username} onChange={handleLoginChange}></input>\r\n                <label htmlFor='username'>Password: </label>\r\n                <input type='password' maxLength='30' name='password' value={user.password} onChange={handleLoginChange}></input>\r\n                <button type='Submit'>Login</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableHouseholdRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"hh_name\" defaultValue={hh.hh_name} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"num_adult\" defaultValue={hh.num_adult} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"num_child\" defaultValue={hh.num_child} onChange={handleEditFormChange}/></td>\r\n            <td><input name='veg_flag' type=\"checkbox\" checked={hh.veg_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='gf_flag' type='checkbox' checked={hh.gf_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='a_flag' type='checkbox' checked={hh.a_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='sms_flag' type='checkbox' checked={hh.sms_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='paused_flag' type='checkbox' checked={hh.paused_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></td>\r\n            <td><input name='street' type='text' defaultValue={hh.street} onChange={handleEditFormChange}/></td>\r\n            <td><input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pcode' type='number' minLength='5' maxLength='5' defaultValue={hh.pcode} onChange={handleEditFormChange}/></td>\r\n            <td><input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></td>\r\n            <td><textarea name='deliveryNotes' defaultValue={hh.delivery_notes} onChange={handleEditFormChange}/></td>\r\n            <td><AllergiesList allergies={hh.hh_allergies} isEditable={true} updateAllergies={updateAllergies} updateEditForm={updateEditForm}/></td>\r\n            <td></td>\r\n            <td><button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableHouseholdRow;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Household Row component\r\n// Takes: key of current row, the state of the Household Page's hh list, deleteHousehold callback, handleEditClick callback\r\n// Returns a household table row component \r\nconst HouseholdRow = (props) => {\r\n    const {thisKey, household, deleteHousehold, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const hh = household;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{hh.hh_name}</td>\r\n            <td>{hh.num_adult}</td>\r\n            <td>{hh.num_child}</td>\r\n            <td>{String(Boolean(hh.veg_flag))}</td>\r\n            <td>{String(Boolean(hh.gf_flag))}</td>\r\n            <td>{String(Boolean(hh.a_flag))}</td>\r\n            <td>{String(Boolean(hh.sms_flag))}</td>\r\n            <td>{String(Boolean(hh.paused_flag))}</td>\r\n            <td>{hh.phone}</td>\r\n            <td>{hh.street}</td>\r\n            <td>{hh.city}</td>\r\n            <td>{hh.pcode}</td>\r\n            <td>{hh.state}</td>\r\n            <td>{hh.delivery_notes}</td>\r\n            <td><AllergiesList allergies={hh.hh_allergies} isEditable={false}/></td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteHousehold is called with this row's key */}\r\n            <td><button onClick={() => deleteHousehold(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default HouseholdRow;","import React from 'react'\r\n\r\n// Error message component\r\n// Takes error text\r\n// Returns an <h3> error message component\r\nconst Error = (props) => {\r\n    const errorText = props.text;\r\n    return (\r\n        <h3 style={{color: 'red'}}>{errorText}</h3>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdForm from './HouseholdForm.js'\r\nimport EditableHouseholdRow from './EditableHouseholdRow.js'\r\nimport HouseholdRow from './HouseholdRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './HouseholdList.css'\r\n\r\n\r\n// Household List Component\r\nexport default function HouseholdList() {\r\n    // const data = [\r\n    //     {hh_name: 'Anom', num_adult: 2, num_child: 1, veg_flag: false, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '123-456-7890', street: '1234 aStreet', city: 'aCity', pcode: '12345', state: 'MI', delivery_notes: 'N/A', allergies: []},\r\n    //     {hh_name: 'Jean', num_adult: 1, num_child: 1, veg_flag: true, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '234-567-8912', street: '4321 bStreet', city: 'bCity', pcode: '54321', state: 'MI', delivery_notes: 'Leave on porch', allergies: [{aType: 'Peanut'}]}\r\n    // ]\r\n\r\n    const [households, setHouseholds] = useState(undefined);\r\n    const [editHouseholdID, setEditHouseholdID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Household Name already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setHouseholds(getDBHouseholds());\r\n    }, []);\r\n\r\n    const getDBHouseholds = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"http://4.236.185.213:8000/api/households-allergies\"\r\n          }).then((response)=>{\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBHouseholds = () => {\r\n        console.log(households);\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://4.236.185.213:8000/api/households-allergies\",\r\n            data: households\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const addHousehold = (household) => {\r\n        // Check to see if we already have a duplicate Household Name\r\n        if (!households.find((HH) => HH.hh_name === household.hh_name))\r\n        {\r\n            let newHouseholds = [...households, household];\r\n            setHouseholds(newHouseholds);\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteHousehold = (key) => {\r\n        const householdID = key; \r\n        let newHouseholds = [...households];\r\n        newHouseholds.splice(householdID, 1);\r\n        setHouseholds(newHouseholds);\r\n    }\r\n\r\n    const updateHousehold = (key) => {\r\n        let thisName = households[key];\r\n        let newHouseholds = [...households];\r\n        newHouseholds[key] = editFormData;\r\n        setEditHouseholdID(null);\r\n        setHouseholds(newHouseholds)\r\n        clearError();\r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditHouseholdID(key);\r\n        setEditFormData(households[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditHouseholdID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    if (households === undefined) {\r\n        return (<>loading</>);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div className='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children</th>\r\n                        <th>Vegan</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Allergies</th>\r\n                        <th>Receive SMS</th>\r\n                        <th>Paused</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Street</th>\r\n                        <th>City</th>\r\n                        <th>Postal Code</th>\r\n                        <th>State</th>\r\n                        <th>Delivery Notes</th>\r\n                        <th>Allergies</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each household in households.*/}\r\n                    {households.map((household, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this household is the one to be edited, show an editable row instead\r\n                                editHouseholdID === thisKey \r\n                                ? <EditableHouseholdRow thisKey={thisKey} editFormData={editFormData} updateHousehold={updateHousehold} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <HouseholdRow thisKey={thisKey} household={household} deleteHousehold={deleteHousehold} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add A Household</h3>\r\n            <HouseholdForm addHousehold={addHousehold}></HouseholdForm>\r\n            <button onClick={postDBHouseholds}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm.js'\r\n\r\n// Kainoa Borges\r\n\r\n// Ingredient Form component\r\n// Takes AddIngredient callback function\r\n// Returns a form that can be used to define a new ingredient object in a IngredientList\r\nconst IngredientForm = (props) => {\r\n  \r\n  const clearIngredient = () => {\r\n    return {\r\n      i_id: null,\r\n      ingredient_name: '',\r\n      pkg_type: '',\r\n      storage_type: '',\r\n      in_date: '',\r\n      in_qty: null,\r\n      unit: null,\r\n      exp_date: null,\r\n      qty_on_hand: null,\r\n      unit_cost: null,\r\n      flat_fee: null,\r\n      isupplier_name: null,\r\n      pref_isupplier_name: null\r\n    }\r\n  }\r\n\r\n  // The state of this Ingredient Form with each attribute of Ingredient\r\n  const [ingredient, setIngredient] = useState(clearIngredient());\r\n  const [supplierList, setSupplierList] = useState([{s_id: 1, supplier_name: 'Second Harvest Food Bank'}, {s_id: 2, supplier_name: 'Third Harvest Food Bank'}]);\r\n\r\n    // Handle form submission (prevent refresh, pass ingredient to addIngredient, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass ingredient object to IngredientList callback\r\n      props.addIngredient(ingredient)\r\n      // Clear the form state\r\n      setIngredient(clearIngredient());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newIngredient = {...ingredient};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newIngredient[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')');\r\n      }\r\n      setIngredient(newIngredient);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new ingredient object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic ingredient info */}\r\n          <label htmlFor=\"ingredient_name\">Ingredient Name: </label>\r\n          <input name=\"ingredient_name\" type=\"text\" maxLength='30' value={ingredient.ingredient_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='pkg_type'>Package Type: </label>\r\n          <input name='pkg_type' type=\"text\" value={ingredient.pkg_type} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='storage_type'>Storage Type: </label>\r\n          <input name='storage_type' type=\"text\" value={ingredient.storage_type} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor=\"in_date\">In Date: </label>\r\n          <input name=\"in_date\" type=\"date\" value={ingredient.in_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"in_qty\">In Quantity: </label>\r\n          <input name=\"in_qty\" type=\"number\" value={ingredient.in_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit\">Unit: </label>\r\n          <input name=\"unit\" type=\"text\" value={ingredient.unit} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"exp_date\">Exp Date: </label>\r\n          <input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit_cost\">Unit Cost: </label>\r\n          <input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={ingredient.unit_cost} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"flat_fee\">Flat Fee: </label>\r\n          <input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={ingredient.flat_fee} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"exp_date\">Exp Date: </label>\r\n          <input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"isupplier\">Supplier: </label>\r\n          <select name=\"isupplier_id\" onChange={handleFormChange}>\r\n            <option selected=\"true\">N/A</option>\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option name='isupplier_id' value={supplier.s_id}>{supplier.supplier_name}</option>\r\n              )\r\n            })}\r\n          </select>\r\n\r\n          <label htmlFor=\"pref_isupplier\">Supplier: </label>\r\n          <select name=\"pref_isupplier_id\">\r\n            <option selected=\"true\">N/A</option>\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option value={supplier.s_id}>{supplier.supplier_name}</option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default IngredientForm","import React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableIngredientRow = (props) => {\r\n    const {thisKey, editFormData, updateIngredient, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const ingredient = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n          <td>{ingredient.i_id}</td>\r\n          <td><input name=\"ingredient_name\" type=\"text\" maxLength='30' value={ingredient.ingredient_name} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='pkg_type' type=\"text\" value={ingredient.pkg_type} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='storage_type' type=\"text\" value={ingredient.storage_type} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name=\"in_date\" type=\"date\" placeholder={ingredient.in_date} value={ingredient.in_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"in_qty\" type=\"number\" value={ingredient.in_qty} onChange={handleEditFormChange}/></td>\r\n\r\n          <td>placeholder</td>\r\n\r\n          <td><input name=\"unit\" type=\"text\" value={ingredient.unit} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={ingredient.unit_cost} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={ingredient.flat_fee} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><button onClick={()=>{updateIngredient(key)}}>Save</button></td>\r\n          <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableIngredientRow;","import React from 'react'\r\n\r\n// Ingredient Row component\r\n// Takes: key of current row, the state of the Ingredient Page's ingredient list, deleteIngredient callback, handleEditClick callback\r\n// Returns a Ingredient table row component \r\nconst IngredientRow = (props) => {\r\n    const {thisKey, ingredient, deleteIngredient, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const ing = ingredient;\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{ing.i_id}</td>\r\n            <td>{ing.ingredient_name}</td>\r\n            <td>{ing.pkg_type}</td>\r\n            <td>{ing.storage_type}</td>\r\n            <td>{String(ing.in_date)}</td>\r\n            <td>{String(ing.in_qty)}</td>\r\n            <td>placeholder</td>\r\n            <td>{ing.qty_on_hand}</td>\r\n            <td>{String(ing.unit)}</td>\r\n            <td>{String(ing.unit_cost)}</td>\r\n            <td>{String(ing.flat_fee)}</td>\r\n            <td>{ing.exp_date}</td>\r\n            <td>{ing.isupplier_name}</td>\r\n            <td>{ing.pref_isupplier_name}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteIngredient is called with this row's key */}\r\n            <td><button onClick={() => deleteIngredient(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default IngredientRow;","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport IngredientForm from './IngredientForm.js'\r\nimport EditableIngredientRow from './EditableIngredientRow.js'\r\nimport IngredientRow from './IngredientRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport ReusableTable from '../ReusableTable.js'\r\n\r\nimport './IngredientList.css'\r\n\r\n\r\n// Ingredient List Component\r\nexport default function IngredientList() {\r\n    const data = [\r\n        {i_id: 1, ingredient_name: 'Lasagna Noodles', pkg_type: 'DRY-BAG', storage_type: 'N/A', in_date: '11/20/22', in_qty: 10, unit: 'lbs', exp_date: '11-20-24', qty_on_hand: 10, unit_cost: 0.75, flat_fee: 0.00, isupplier_name: 'Second Harvest Food Bank', pref_isupplier_name: 'N/A', usages: []},\r\n        {i_id: 2, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11/11/22', in_qty: 2, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 2, unit_cost: 0.75, flat_fee: 0.00, isupplier_name: 'Second Harvest Food Bank', pref_isupplier_name: 'N/A', usages: []},\r\n        {i_id: 3, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11/20/22', in_qty: 5, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 5, unit_cost: 0.75, flat_fee: 0.00, isupplier_name: 'Second Harvest Food Bank', pref_isupplier_name: 'N/A', usages: [{i_usage_id: 1, used_date: '11/29/22', used_qty: 2}]}\r\n    ]\r\n\r\n    const [ingredients, setIngredients] = useState(data);\r\n    const [editIngredientID, setEditIngredientID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBIngredients = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/ingredients/\"\r\n          }).then((response)=>{\r\n            const ingData = response.data\r\n            setIngredients(ingData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBIngredients = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/ingredients/\",\r\n            data: ingredients\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient ID already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addIngredient = (ingredient) => {\r\n        const lastID = ingredients[ingredients.length - 1]['i_id'];\r\n        ingredient['i_id'] = lastID + 1;\r\n        let newIngredients = [...ingredients, ingredient];\r\n        setIngredients(newIngredients);\r\n        clearError();\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        // if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        // {\r\n        //     let newIngredients = [...ingredients, ingredient];\r\n        //     setIngredients(newIngredients);\r\n        //     clearError();\r\n        // }\r\n        // else {\r\n        //     // If this ingredient is already in ingredients list, display error message\r\n        //     handleError('DuplicateKey');\r\n        // }\r\n    }\r\n\r\n    const deleteIngredient = (key) => {\r\n        const ingID = key; \r\n        let newIngredients = [...ingredients];\r\n        newIngredients.splice(ingID, 1);\r\n        setIngredients(newIngredients);\r\n    }\r\n\r\n    const updateIngredient = (key) => {\r\n        let thisID = ingredients[key]['i_id'];\r\n        if (ingredients.find((ing) => ing.i_id === thisID))\r\n        {\r\n            let newIngredients = [...ingredients];\r\n            newIngredients[key] = editFormData;\r\n            setEditIngredientID(null);\r\n            setIngredients(newIngredients)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.aFlag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditIngredientID(key);\r\n        setEditFormData(ingredients[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditIngredientID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Ingredient Name</th>\r\n                        <th>Package Type</th>\r\n                        <th>Storage Type</th>\r\n                        <th>Date In</th>\r\n                        <th>Qty In</th>\r\n                        <th>Usages</th>\r\n                        <th>Qty On Hand</th>\r\n                        <th>Unit</th>\r\n                        <th>Unit Cost</th>\r\n                        <th>Flat Fee</th>\r\n                        <th>Expiration Date</th>\r\n                        <th>Supplier</th>\r\n                        <th>Preferred Supplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {ingredients.map((ingredient, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editIngredientID === thisKey \r\n                                ? <EditableIngredientRow thisKey={thisKey} editFormData={editFormData} updateIngredient={updateIngredient} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <IngredientRow thisKey={thisKey} ingredient={ingredient} deleteIngredient={deleteIngredient} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add An Ingredient</h3>\r\n            <IngredientForm addIngredient={addIngredient}></IngredientForm>\r\n            <button onClick={postDBIngredients}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import MealRepositoryTable from './MealPlan.js'\nimport HouseholdForm from './Households/HouseholdForm.js'\nimport LoginPage from './LoginPage.js'\nimport HouseholdList from './Households/HouseholdList.js'\nimport AllergiesList from './Households/AllergiesList.js'\nimport Ingredients from './Ingredients/IngredientList.js'\nimport React from 'react'\nimport {useState} from 'react'\n\nconst App = () => {\n  const [currPage, setCurrPage] = useState();\n\n  const handlePageClick = (pageName) => {\n    console.log(pageName)\n    if (pageName === 'householdForm') setCurrPage(<HouseholdForm/>);\n    else if (pageName === 'loginPage') setCurrPage(<LoginPage handlePageClick={handlePageClick}/>);\n    else if (pageName === 'mealRepositoryTable') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'households') setCurrPage(<HouseholdList/>);\n    else if (pageName === 'ingredients') setCurrPage(<Ingredients/>);\n    else if (pageName === 'landing') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'allergies') setCurrPage(<AllergiesList allergies={[{aType: 'Gluten'}, {aType: 'Peanut'}]}/>);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Food Forward Tracker</h1>\n        {/* <button onClick={() => handlePageClick('householdForm')}>\n          Household Form\n        </button> */}\n        <button onClick={() => handlePageClick('loginPage')}>\n          Login Page\n        </button>\n        <button onClick={() => handlePageClick('households')}>\n          Households\n        </button>\n        <button onClick={() => handlePageClick('ingredients')}>\n          Ingredients\n        </button>\n        {currPage}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
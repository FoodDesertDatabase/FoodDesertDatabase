{"version":3,"sources":["MealPlan.js","DisplayMessage.js","Households/AllergiesList.js","Households/HouseholdForm.js","LoginPage.js","Households/EditableHouseholdRow.js","Households/HouseholdRow.js","Error.js","Households/HouseholdList.js","Ingredients/IngredientForm.js","Ingredients/EditableIngredientRow.js","Ingredients/IngredientRow.js","Ingredients/IngredientList.js","App.js","reportWebVitals.js","index.js"],"names":["MealRepositoryTable","props","_useState","useState","meals","_useState2","Object","slicedToArray","react_default","a","createElement","DisplayMessage","text","AllergiesList","allergies","setAllergies","_useState3","aType","_useState4","currAllergy","setCurrAllergy","_useState5","_useState6","_useState7","isEditable","_useState8","useEffect","setAFlag","allergyList","length","react","map","allergy","thisKey","key","type","onClick","allergyID","newAllergies","toConsumableArray","splice","ret","updateEditForm","handleDeleteAllergy","name","onChange","event","fieldName","target","getAttribute","fieldValue","checked","value","newAllergy","objectSpread","preventDefault","concat","console","log","HouseholdForm","hhName","numAdult","numChild","vegFlag","gfFlag","aFlag","smsFlag","pausedFlag","phone","street","city","pCode","deliveryNotes","state","household","setHousehold","names","values","newHousehold","i","handleFormChange","onSubmit","addHousehold","htmlFor","maxLength","required","hh_name","num_adult","num_child","id","veg_flag","gf_flag","a_flag","sms_flag","paused_flag","pattern","minLength","pcode","delivery_notes","Households_AllergiesList","LoginPage","handlePageClick","username","password","user","setUser","handleLoginChange","thisUser","EditableHouseholdRow","editFormData","updateHousehold","handleEditFormChange","handleCancelClick","updateAllergies","hh","defaultValue","HouseholdRow","deleteHousehold","handleEditClick","String","Error","errorText","style","color","HouseholdList","households","setHouseholds","editHouseholdID","setEditHouseholdID","setEditFormData","errorComponent","setErrorComponent","_useState9","_useState10","displayMsgComponent","setdisplayMsgComponent","handleError","errCode","src_Error","clearError","householdID","newHouseholds","thisName","find","HH","newEditFormData","class","className","Households_EditableHouseholdRow","Households_HouseholdRow","Households_HouseholdForm","axios","method","url","data","then","response","hhData","catch","error","status","headers","src_DisplayMessage","msg","EditableIngredientRow","IngredientRow","ingredient","deleteIngredient","ing","ingName","IngredientList","i_id","ingredient_name","pkg_type","storage_type","in_date","in_qty","unit","exp_date","qty_on_hand","unit_cost","flat_fee","i_supplier_name","i_pref_supplier_name","i_qty_in","ingredients","setIngredients","editIngredientID","setEditIngredientID","ingID","newIngredients","updateIngredient","Ingredients_EditableIngredientRow","Ingredients_IngredientRow","IngredientForm","addIngredient","ingData","App","currPage","setCurrPage","pageName","src_LoginPage","MealPlan","HouseholdList_HouseholdList","IngredientList_IngredientList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f04af9c3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\n// Meal Repository Table component\r\n// Takes list of meals\r\nconst MealRepositoryTable = (props) => {\r\n  // Meals is a list of meal objects with the data from a meal repository query.\r\n  // Each Meal contains: recipeName, dietCategories(a list of diet categories this recipe belongs to), dateLastServed)\r\n  const [meals, setMeals] = useState(props.meals); \r\n  \r\n  return (\r\n    <h1>Meal Repository</h1>\r\n  );\r\n}\r\n\r\nexport default MealRepositoryTable;\r\n","import React from 'react'\r\n\r\n// A display message component\r\n// Takes message text\r\n// Returns an <h4> display message component\r\nconst DisplayMessage = (props) => {\r\n    const text = props.text;\r\n    return (\r\n        <h4>{text}</h4>\r\n    )\r\n}\r\n\r\nexport default DisplayMessage;","import { Fragment } from \"react\";\r\nimport { useState, useEffect } from 'react';\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport React from 'react'\r\n\r\n// Allergy List Component\r\nconst AllergiesList = (props) => {\r\n    const [allergies, setAllergies] = useState(props.allergies);\r\n    const [currAllergy, setCurrAllergy] = useState({aType: ''});\r\n    const [displayMsgComponent, setDisplayMsgComponent] = useState(null);\r\n    const [isEditable, setIsEditable] = useState(props.isEditable);\r\n\r\n    useEffect( () => {\r\n        setAllergies(props.allergies);\r\n    }, [props.allergies]); \r\n\r\n    // Callback function that updates the allergy object currently being edited\r\n    // Takes input change event information (name, type, and value of input field)\r\n    // Returns none\r\n    const handleAllergyChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newAllergy = {...currAllergy};\r\n        newAllergy[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setCurrAllergy(newAllergy);\r\n    }\r\n\r\n    const setAFlag = (allergyList) => {\r\n        if (allergyList.length > 0) {\r\n            return ['aFlag', true];\r\n        }\r\n        else {\r\n            return ['aFlag', false];\r\n        }\r\n    }\r\n\r\n    const handleAddAllergy = (event) => {\r\n        event.preventDefault();\r\n        const newAllergies =  [...allergies, currAllergy];\r\n        setAllergies(newAllergies);\r\n        setCurrAllergy({aType: ''});\r\n        const ret = setAFlag(newAllergies);\r\n        console.log(ret)\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    const handleDeleteAllergy = (key) => {\r\n        const allergyID = key; \r\n        let newAllergies = [...allergies];\r\n        newAllergies.splice(allergyID, 1);\r\n        setAllergies(newAllergies);\r\n        const ret = setAFlag(newAllergies);\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    if (isEditable) {\r\n        return (\r\n            <Fragment>\r\n                <table>  \r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.aType}\r\n                                        </td>\r\n                                        <td>\r\n                                            <button type='button' onClick={() => {handleDeleteAllergy(thisKey)}}>\r\n                                                delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                        <tr>\r\n                            <td>\r\n                                <input name=\"aType\" type=\"text\" onChange={handleAllergyChange} value={currAllergy.aType}></input>\r\n                            </td>\r\n                            <td>\r\n                                <button type='button' onClick={handleAddAllergy}>\r\n                                    Add\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Fragment>\r\n                <table>\r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.aType}\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default AllergiesList;","import {useState} from 'react'\r\nimport AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n  \r\n  // The state of this Household Form with each attribute of Household\r\n  const [household, setHousehold] = useState({\r\n      hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: false,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      deliveryNotes: '',\r\n      state: 'MI',\r\n      allergies: []\r\n    });\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold({hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: true,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      state: 'MI',\r\n      deliveryNotes: '',\r\n      allergies: []\r\n    });\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hhName\">Name: </label>\r\n          <input name=\"hhName\" type=\"text\" maxLength='30' required={true} value={household.hh_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numAdult'>Number of Adults: </label>\r\n          <input name='numAdult' type=\"number\" value={household.num_adult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numChild'>Number of Children: </label>\r\n          <input name='numChild' type=\"number\" value={household.num_child} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='vegFlag'>Vegan/Vegetarian: </label>          \r\n          <input name='vegFlag' id='vegFlag' type=\"checkbox\" checked={household.veg_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gfFlag'>Gluten Free: </label>          \r\n          <input name='gfFlag' id='gfFlag' type='checkbox' checked={household.gf_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='aFlag'>Allergy: </label>\r\n          <input name='aFlag' id='aFlag' type='checkbox' checked={household.a_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='smsFlag'>Recieving SMS: </label>\r\n          <input name='smsFlag' id='smsFlag' type='checkbox' checked={household.sms_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='pausedFlag'>Is Paused: </label>          \r\n          <input name='pausedFlag' id='pausedFlag' type='checkbox' checked={household.paused_flag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pCode'>Postal Code: </label>\r\n          <input name='pCode' id='pCode' minLength='5' maxLength='5' value={household.pcode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='deliveryNotes'>Delivery Notes: </label>\r\n          <textarea name='deliveryNotes' id='deliveryNotes' maxLength='255' value={household.delivery_notes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <label>Allergies</label>\r\n          <AllergiesList allergies={household.allergies} isEditable={true} updateEditForm={updateEditForm}/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {Fragment} from 'react'\r\n\r\n// Login Page Component\r\n// Takes handlePageClick callback function to enable page switching when login is completed\r\n// Returns a login page component that allows users to enter account information \r\nconst LoginPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            password: ''\r\n        }\r\n    );\r\n\r\n    // Handle input change for user login\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const handleLoginChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = {...user};\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n    }\r\n    \r\n    // Handle login form submit\r\n    // Takes login form event information (form submission)\r\n    // Returns none\r\n    const handleLoginSubmit = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // Switch to 'landing' page\r\n        handlePageClick('landing');\r\n        // TO DO;\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h3>Login Page</h3>\r\n            <form onSubmit={handleLoginSubmit}>\r\n                <label htmlFor='username'>Username: </label>\r\n                <input type='text' maxLength='30' name='username' value={user.username} onChange={handleLoginChange}></input>\r\n                <label htmlFor='username'>Password: </label>\r\n                <input type='password' maxLength='30' name='password' value={user.password} onChange={handleLoginChange}></input>\r\n                <button type='Submit'>Login</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableHouseholdRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"hhName\" defaultValue={hh.hh_name} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numAdult\" defaultValue={hh.num_adult} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numChild\" defaultValue={hh.num_child} onChange={handleEditFormChange}/></td>\r\n            <td><input name='vegFlag' type=\"checkbox\" checked={hh.veg_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='gfFlag' type='checkbox' checked={hh.gf_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='aFlag' type='checkbox' checked={hh.a_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='smsFlag' type='checkbox' checked={hh.sms_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pausedFlag' type='checkbox' checked={hh.paused_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></td>\r\n            <td><input name='street' type='text' defaultValue={hh.street} onChange={handleEditFormChange}/></td>\r\n            <td><input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pCode' type='number' minLength='5' maxLength='5' defaultValue={hh.pCode} onChange={handleEditFormChange}/></td>\r\n            <td><input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></td>\r\n            <td><textarea name='deliveryNotes' defaultValue={hh.delivery_notes} onChange={handleEditFormChange}/></td>\r\n            <td><AllergiesList allergies={hh.allergies} isEditable={true} updateAllergies={updateAllergies} updateEditForm={updateEditForm}/></td>\r\n            <td></td>\r\n            <td><button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableHouseholdRow;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Household Row component\r\n// Takes: key of current row, the state of the Household Page's hh list, deleteHousehold callback, handleEditClick callback\r\n// Returns a household table row component \r\nconst HouseholdRow = (props) => {\r\n    const {thisKey, household, deleteHousehold, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const hh = household;\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{hh.hh_name}</td>\r\n            <td>{hh.num_adult}</td>\r\n            <td>{hh.num_child}</td>\r\n            <td>{String(hh.veg_flag)}</td>\r\n            <td>{String(hh.gf_flag)}</td>\r\n            <td>{String(hh.a_flag)}</td>\r\n            <td>{String(hh.sms_flag)}</td>\r\n            <td>{String(hh.paused_flag)}</td>\r\n            <td>{hh.phone}</td>\r\n            <td>{hh.street}</td>\r\n            <td>{hh.city}</td>\r\n            <td>{hh.pCode}</td>\r\n            <td>{hh.state}</td>\r\n            <td>{hh.delivery_notes}</td>\r\n            <td><AllergiesList allergies={hh.allergies} isEditable={false}/></td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteHousehold is called with this row's key */}\r\n            <td><button onClick={() => deleteHousehold(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default HouseholdRow;","import React from 'react'\r\n\r\n// Error message component\r\n// Takes error text\r\n// Returns an <h3> error message component\r\nconst Error = (props) => {\r\n    const errorText = props.text;\r\n    return (\r\n        <h3 style={{color: 'red'}}>{errorText}</h3>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdForm from './HouseholdForm.js'\r\nimport EditableHouseholdRow from './EditableHouseholdRow.js'\r\nimport HouseholdRow from './HouseholdRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './HouseholdList.css'\r\n\r\n\r\n// Household List Component\r\nexport default function HouseholdList() {\r\n    const data = [\r\n        {hh_name: 'Anom', num_adult: 2, num_child: 1, veg_flag: false, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '123-456-7890', street: '1234 aStreet', city: 'aCity', pCode: '12345', state: 'MI', delivery_notes: 'N/A', allergies: []},\r\n        {hhName: 'Jean', numAdult: 1, num_child: 1, veg_flag: true, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '234-567-8912', street: '4321 bStreet', city: 'bCity', pCode: '54321', state: 'MI', delivery_notes: 'Leave on porch', allergies: [{aType: 'Peanut'}]}\r\n    ]\r\n\r\n    const [households, setHouseholds] = useState(data);\r\n    const [editHouseholdID, setEditHouseholdID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBHouseholds = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/households/\"\r\n          }).then((response)=>{\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBHouseholds = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/households/\",\r\n            data: households\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Household Name already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addHousehold = (household) => {\r\n        // Check to see if we already have a duplicate Household Name\r\n        if (!households.find((HH) => HH.hhName === household.hhName))\r\n        {\r\n            let newHouseholds = [...households, household];\r\n            setHouseholds(newHouseholds);\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteHousehold = (key) => {\r\n        const householdID = key; \r\n        let newHouseholds = [...households];\r\n        newHouseholds.splice(householdID, 1);\r\n        setHouseholds(newHouseholds);\r\n    }\r\n\r\n    const updateHousehold = (key) => {\r\n        let thisName = households[key];\r\n        if (!households.find((HH) => HH.hhName === thisName))\r\n        {\r\n            let newHouseholds = [...households];\r\n            newHouseholds[key] = editFormData;\r\n            setEditHouseholdID(null);\r\n            setHouseholds(newHouseholds)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditHouseholdID(key);\r\n        setEditFormData(households[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditHouseholdID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children</th>\r\n                        <th>Vegan</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Allergies</th>\r\n                        <th>Receive SMS</th>\r\n                        <th>Paused</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Street</th>\r\n                        <th>City</th>\r\n                        <th>Postal Code</th>\r\n                        <th>State</th>\r\n                        <th>Delivery Notes</th>\r\n                        <th>Allergies</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each household in households.*/}\r\n                    {households.map((household, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this household is the one to be edited, show an editable row instead\r\n                                editHouseholdID === thisKey \r\n                                ? <EditableHouseholdRow thisKey={thisKey} editFormData={editFormData} updateHousehold={updateHousehold} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <HouseholdRow thisKey={thisKey} household={household} deleteHousehold={deleteHousehold} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add A Household</h3>\r\n            <HouseholdForm addHousehold={addHousehold}></HouseholdForm>\r\n            <button onClick={postDBHouseholds}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\n\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n  \r\n  // The state of this Household Form with each attribute of Household\r\n  const [household, setHousehold] = useState({\r\n      hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: false,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      deliveryNotes: '',\r\n      state: 'MI',\r\n      allergies: []\r\n    });\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold({hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: true,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      state: 'MI',\r\n      deliveryNotes: '',\r\n      allergies: []\r\n    });\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hhName\">Name: </label>\r\n          <input name=\"hhName\" type=\"text\" maxLength='30' required={true} value={household.hhName} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numAdult'>Number of Adults: </label>\r\n          <input name='numAdult' type=\"number\" value={household.numAdult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numChild'>Number of Children: </label>\r\n          <input name='numChild' type=\"number\" value={household.numChild} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='vegFlag'>Vegan/Vegetarian: </label>          \r\n          <input name='vegFlag' id='vegFlag' type=\"checkbox\" checked={household.vegFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gfFlag'>Gluten Free: </label>          \r\n          <input name='gfFlag' id='gfFlag' type='checkbox' checked={household.gfFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='aFlag'>Allergy: </label>\r\n          <input name='aFlag' id='aFlag' type='checkbox' checked={household.aFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='smsFlag'>Recieving SMS: </label>\r\n          <input name='smsFlag' id='smsFlag' type='checkbox' checked={household.smsFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='pausedFlag'>Is Paused: </label>          \r\n          <input name='pausedFlag' id='pausedFlag' type='checkbox' checked={household.pausedFlag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pCode'>Postal Code: </label>\r\n          <input name='pCode' id='pCode' minLength='5' maxLength='5' value={household.pCode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='deliveryNotes'>Delivery Notes: </label>\r\n          <textarea name='deliveryNotes' id='deliveryNotes' maxLength='255' value={household.deliveryNotes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableIngredientRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"hhName\" defaultValue={hh.hhName} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numAdult\" defaultValue={hh.numAdult} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numChild\" defaultValue={hh.numChild} onChange={handleEditFormChange}/></td>\r\n            <td><input name='vegFlag' type=\"checkbox\" checked={hh.vegFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='gfFlag' type='checkbox' checked={hh.gfFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='aFlag' type='checkbox' checked={hh.aFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='smsFlag' type='checkbox' checked={hh.smsFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pausedFlag' type='checkbox' checked={hh.pausedFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></td>\r\n            <td><input name='street' type='text' defaultValue={hh.street} onChange={handleEditFormChange}/></td>\r\n            <td><input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pCode' type='number' minLength='5' maxLength='5' defaultValue={hh.pCode} onChange={handleEditFormChange}/></td>\r\n            <td><input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></td>\r\n            <td><textarea name='deliveryNotes' defaultValue={hh.deliveryNotes} onChange={handleEditFormChange}/></td>\r\n            <td><button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableIngredientRow;","import React from 'react'\r\n\r\n// Ingredient Row component\r\n// Takes: key of current row, the state of the Ingredient Page's ingredient list, deleteIngredient callback, handleEditClick callback\r\n// Returns a Ingredient table row component \r\nconst IngredientRow = (props) => {\r\n    const {thisKey, ingredient, deleteIngredient, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const ing = ingredient;\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{ing.ingName}</td>\r\n            <td>{ing.numAdult}</td>\r\n            <td>{ing.numChild}</td>\r\n            <td>{String(ing.vegFlag)}</td>\r\n            <td>{String(ing.gfFlag)}</td>\r\n            <td>{String(ing.aFlag)}</td>\r\n            <td>{String(ing.smsFlag)}</td>\r\n            <td>{String(ing.pausedFlag)}</td>\r\n            <td>{ing.phone}</td>\r\n            <td>{ing.street}</td>\r\n            <td>{ing.city}</td>\r\n            <td>{ing.pCode}</td>\r\n            <td>{ing.state}</td>\r\n            <td>{ing.deliveryNotes}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteIngredient is called with this row's key */}\r\n            <td><button onClick={() => deleteIngredient(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default IngredientRow;","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport IngredientForm from './IngredientForm.js'\r\nimport EditableIngredientRow from './EditableIngredientRow.js'\r\nimport IngredientRow from './IngredientRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './IngredientList.css'\r\n\r\n\r\n// Ingredient List Component\r\nexport default function IngredientList() {\r\n    const data = [\r\n        {i_id: 1, ingredient_name: 'Lasagna Noodles', pkg_type: 'DRY-BAG', storage_type: 'N/A', in_date: '11-20-22', in_qty: 10, unit: 'lbs', exp_date: '11-20-24', qty_on_hand: 10, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'},\r\n        {i_id: 1, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11-11-22', i_qty_in: 2, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 2, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'},\r\n        {i_id: 1, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11-20-22', i_qty_in: 5, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 5, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'}\r\n    ]\r\n\r\n    const [ingredients, setIngredients] = useState(data);\r\n    const [editIngredientID, setEditIngredientID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBIngredients = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/ingredients/\"\r\n          }).then((response)=>{\r\n            const ingData = response.data\r\n            setIngredients(ingData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBIngredients = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/ingredients/\",\r\n            data: ingredients\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient Name already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addIngredient = (ingredient) => {\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        {\r\n            let newIngredients = [...ingredients, ingredient];\r\n            setIngredients(newIngredients);\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteIngredient = (key) => {\r\n        const ingID = key; \r\n        let newIngredients = [...ingredients];\r\n        newIngredients.splice(ingID, 1);\r\n        setIngredients(newIngredients);\r\n    }\r\n\r\n    const updateIngredient = (key) => {\r\n        let thisName = ingredients[key];\r\n        if (!ingredients.find((HH) => HH.hhName === thisName))\r\n        {\r\n            let newIngredients = [...ingredients];\r\n            newIngredients[key] = editFormData;\r\n            setEditIngredientID(null);\r\n            setIngredients(newIngredients)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.aFlag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditIngredientID(key);\r\n        setEditFormData(ingredients[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditIngredientID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children</th>\r\n                        <th>Vegan</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Allergies</th>\r\n                        <th>Receive SMS</th>\r\n                        <th>Paused</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Street</th>\r\n                        <th>City</th>\r\n                        <th>Postal Code</th>\r\n                        <th>State</th>\r\n                        <th>Delivery Notes</th>\r\n                        <th>Allergies</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {ingredients.map((ingredient, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editIngredientID === thisKey \r\n                                ? <EditableIngredientRow thisKey={thisKey} editFormData={editFormData} updateIngredient={updateIngredient} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <IngredientRow thisKey={thisKey} ingredient={ingredient} deleteIngredient={deleteIngredient} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add An Ingredient</h3>\r\n            <IngredientForm addIngredient={addIngredient}></IngredientForm>\r\n            <button onClick={postDBIngredients}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import MealRepositoryTable from './MealPlan.js'\nimport HouseholdForm from './Households/HouseholdForm.js'\nimport LoginPage from './LoginPage.js'\nimport HouseholdList from './Households/HouseholdList.js'\nimport AllergiesList from './Households/AllergiesList.js'\nimport Ingredients from './Ingredients/IngredientList.js'\nimport React from 'react'\nimport {useState} from 'react'\n\nconst App = () => {  \n  const [currPage, setCurrPage] = useState();\n\n  const handlePageClick = (pageName) => {\n    console.log(pageName)\n    if (pageName === 'householdForm') setCurrPage(<HouseholdForm/>);\n    else if (pageName === 'loginPage') setCurrPage(<LoginPage handlePageClick={handlePageClick}/>);\n    else if (pageName === 'mealRepositoryTable') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'households') setCurrPage(<HouseholdList/>);\n    else if (pageName === 'ingredients') setCurrPage(<Ingredients/>);\n    else if (pageName === 'landing') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'allergies') setCurrPage(<AllergiesList allergies={[{aType: 'Gluten'}, {aType: 'Peanut'}]}/>);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Food Forward Tracker</h1>\n        <button onClick={() => handlePageClick('householdForm')}>\n          Household Form\n        </button>\n        <button onClick={() => handlePageClick('loginPage')}>\n          Login Page\n        </button>\n        <button onClick={() => handlePageClick('households')}>\n          Households\n        </button>\n        <button onClick={() => handlePageClick('ingredients')}>\n          Ingredients\n        </button>\n        {currPage}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
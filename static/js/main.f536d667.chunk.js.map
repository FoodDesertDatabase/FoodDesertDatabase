{"version":3,"sources":["MealPlan.js","DisplayMessage.js","Households/AllergiesList.js","Households/HouseholdForm.js","LoginPage.js","Households/EditableHouseholdRow.js","Households/HouseholdRow.js","Error.js","Households/HouseholdList.js","Ingredients/IngredientForm.js","Ingredients/EditableIngredientRow.js","Ingredients/IngredientRow.js","Ingredients/IngredientList.js","App.js","reportWebVitals.js","index.js"],"names":["MealRepositoryTable","props","_useState","useState","meals","_useState2","Object","slicedToArray","react_default","a","createElement","DisplayMessage","text","AllergiesList","allergies","setAllergies","_useState3","aType","_useState4","currAllergy","setCurrAllergy","_useState5","_useState6","_useState7","isEditable","_useState8","useEffect","setAFlag","allergyList","length","react","map","allergy","thisKey","key","type","onClick","allergyID","newAllergies","toConsumableArray","splice","ret","updateEditForm","handleDeleteAllergy","name","onChange","event","fieldName","target","getAttribute","fieldValue","checked","value","newAllergy","objectSpread","preventDefault","concat","console","log","HouseholdForm","hh_name","num_adult","num_child","veg_flag","gf_flag","a_flag","sms_flag","paused_flag","phone","street","city","pcode","delivery_notes","state","household","setHousehold","names","values","newHousehold","i","aFlag","handleFormChange","onSubmit","addHousehold","htmlFor","id","maxLength","required","pattern","minLength","Households_AllergiesList","LoginPage","handlePageClick","username","password","user","setUser","handleLoginChange","thisUser","EditableHouseholdRow","editFormData","updateHousehold","handleEditFormChange","handleCancelClick","updateAllergies","hh","defaultValue","HouseholdRow","deleteHousehold","handleEditClick","String","Error","errorText","style","color","HouseholdList","households","setHouseholds","editHouseholdID","setEditHouseholdID","setEditFormData","errorComponent","setErrorComponent","_useState9","_useState10","displayMsgComponent","setdisplayMsgComponent","handleError","errCode","src_Error","clearError","householdID","newHouseholds","thisName","find","HH","newEditFormData","class","className","Households_EditableHouseholdRow","Households_HouseholdRow","Households_HouseholdForm","axios","method","url","data","then","response","hhData","catch","error","status","headers","src_DisplayMessage","msg","hhName","numAdult","numChild","vegFlag","gfFlag","smsFlag","pausedFlag","pCode","deliveryNotes","EditableIngredientRow","IngredientRow","ingredient","deleteIngredient","ing","ingName","IngredientList","i_id","ingredient_name","pkg_type","storage_type","in_date","in_qty","unit","exp_date","qty_on_hand","unit_cost","flat_fee","i_supplier_name","i_pref_supplier_name","i_qty_in","ingredients","setIngredients","editIngredientID","setEditIngredientID","ingID","newIngredients","updateIngredient","Ingredients_EditableIngredientRow","Ingredients_IngredientRow","IngredientForm","addIngredient","ingData","App","currPage","setCurrPage","pageName","src_LoginPage","MealPlan","HouseholdList_HouseholdList","IngredientList_IngredientList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f536d667.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState} from 'react'\r\n\r\n// Meal Repository Table component\r\n// Takes list of meals\r\nconst MealRepositoryTable = (props) => {\r\n  // Meals is a list of meal objects with the data from a meal repository query.\r\n  // Each Meal contains: recipeName, dietCategories(a list of diet categories this recipe belongs to), dateLastServed)\r\n  const [meals, setMeals] = useState(props.meals); \r\n  \r\n  return (\r\n    <h1>Meal Repository</h1>\r\n  );\r\n}\r\n\r\nexport default MealRepositoryTable;\r\n","import React from 'react'\r\n\r\n// A display message component\r\n// Takes message text\r\n// Returns an <h4> display message component\r\nconst DisplayMessage = (props) => {\r\n    const text = props.text;\r\n    return (\r\n        <h4>{text}</h4>\r\n    )\r\n}\r\n\r\nexport default DisplayMessage;","import { Fragment } from \"react\";\r\nimport { useState, useEffect } from 'react';\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport React from 'react'\r\n\r\n// Allergy List Component\r\nconst AllergiesList = (props) => {\r\n    const [allergies, setAllergies] = useState(props.allergies);\r\n    const [currAllergy, setCurrAllergy] = useState({aType: ''});\r\n    const [displayMsgComponent, setDisplayMsgComponent] = useState(null);\r\n    const [isEditable, setIsEditable] = useState(props.isEditable);\r\n\r\n    useEffect( () => {\r\n        setAllergies(props.allergies);\r\n    }, [props.allergies]); \r\n\r\n    // Callback function that updates the allergy object currently being edited\r\n    // Takes input change event information (name, type, and value of input field)\r\n    // Returns none\r\n    const handleAllergyChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newAllergy = {...currAllergy};\r\n        newAllergy[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setCurrAllergy(newAllergy);\r\n    }\r\n\r\n    const setAFlag = (allergyList) => {\r\n        if (allergyList.length > 0) {\r\n            return ['aFlag', true];\r\n        }\r\n        else {\r\n            return ['aFlag', false];\r\n        }\r\n    }\r\n\r\n    const handleAddAllergy = (event) => {\r\n        event.preventDefault();\r\n        const newAllergies =  [...allergies, currAllergy];\r\n        setAllergies(newAllergies);\r\n        setCurrAllergy({aType: ''});\r\n        const ret = setAFlag(newAllergies);\r\n        console.log(ret)\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    const handleDeleteAllergy = (key) => {\r\n        const allergyID = key; \r\n        let newAllergies = [...allergies];\r\n        newAllergies.splice(allergyID, 1);\r\n        setAllergies(newAllergies);\r\n        const ret = setAFlag(newAllergies);\r\n        props.updateEditForm(['allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    if (isEditable) {\r\n        return (\r\n            <Fragment>\r\n                <table>  \r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.aType}\r\n                                        </td>\r\n                                        <td>\r\n                                            <button type='button' onClick={() => {handleDeleteAllergy(thisKey)}}>\r\n                                                delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                        <tr>\r\n                            <td>\r\n                                <input name=\"aType\" type=\"text\" onChange={handleAllergyChange} value={currAllergy.aType}></input>\r\n                            </td>\r\n                            <td>\r\n                                <button type='button' onClick={handleAddAllergy}>\r\n                                    Add\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Fragment>\r\n                <table>\r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.aType}\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default AllergiesList;","import {useState} from 'react'\r\nimport AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n\r\n  const clearHousehold = () => {\r\n    return {\r\n      hh_name: '',\r\n      num_adult: 0,\r\n      num_child: 0,\r\n      veg_flag: false,\r\n      gf_flag: false,\r\n      a_flag: false,\r\n      sms_flag: false,\r\n      paused_flag: false,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pcode: '',\r\n      delivery_notes: '',\r\n      state: 'MI',\r\n      allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this Household Form with each attribute of Household, using the clearHousehold helper function\r\n  const [household, setHousehold] = useState(clearHousehold());\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold(clearHousehold());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hh_name\">Name: </label>\r\n          <input name=\"hh_name\" id=\"hh_name\" type=\"text\" maxLength='30' required={true} value={household.hh_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_adult'>Number of Adults: </label>\r\n          <input name='num_adult' id=\"num_adult\" type=\"number\" value={household.num_adult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_child'>Number of Children: </label>\r\n          <input name='num_child' id=\"num_child\" type=\"number\" value={household.num_child} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='veg_flag'>Vegan/Vegetarian: </label>          \r\n          <input name='veg_flag' id='veg_flag' type=\"checkbox\" checked={household.veg_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gf_flag'>Gluten Free: </label>          \r\n          <input name='gf_flag' id='gf_flag' type='checkbox' checked={household.gf_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='a_flag'>Allergy: </label>\r\n          <input name='a_flag' id='a_flag' type='checkbox' checked={household.a_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='sms_flag'>Recieving SMS: </label>\r\n          <input name='sms_flag' id='sms_flag' type='checkbox' checked={household.sms_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='paused_flag'>Is Paused: </label>          \r\n          <input name='paused_flag' id='paused_flag' type='checkbox' checked={household.paused_flag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pcode'>Postal Code: </label>\r\n          <input name='pcode' id='pcode' minLength='5' maxLength='5' value={household.pcode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='delivery_notes'>Delivery Notes: </label>\r\n          <textarea name='delivery_notes' id='delivery_notes' maxLength='255' value={household.delivery_notes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <label>Allergies</label>\r\n          <AllergiesList allergies={household.allergies} isEditable={true} updateEditForm={updateEditForm}/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {Fragment} from 'react'\r\n\r\n// Login Page Component\r\n// Takes handlePageClick callback function to enable page switching when login is completed\r\n// Returns a login page component that allows users to enter account information \r\nconst LoginPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            password: ''\r\n        }\r\n    );\r\n\r\n    // Handle input change for user login\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const handleLoginChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = {...user};\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n    }\r\n    \r\n    // Handle login form submit\r\n    // Takes login form event information (form submission)\r\n    // Returns none\r\n    const handleLoginSubmit = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // Switch to 'landing' page\r\n        handlePageClick('landing');\r\n        // TO DO;\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h3>Login Page</h3>\r\n            <form onSubmit={handleLoginSubmit}>\r\n                <label htmlFor='username'>Username: </label>\r\n                <input type='text' maxLength='30' name='username' value={user.username} onChange={handleLoginChange}></input>\r\n                <label htmlFor='username'>Password: </label>\r\n                <input type='password' maxLength='30' name='password' value={user.password} onChange={handleLoginChange}></input>\r\n                <button type='Submit'>Login</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableHouseholdRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"hh_name\" defaultValue={hh.hh_name} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"num_adult\" defaultValue={hh.num_adult} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"num_child\" defaultValue={hh.num_child} onChange={handleEditFormChange}/></td>\r\n            <td><input name='veg_flag' type=\"checkbox\" checked={hh.veg_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='gf_flag' type='checkbox' checked={hh.gf_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='a_flag' type='checkbox' checked={hh.a_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='sms_flag' type='checkbox' checked={hh.sms_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='paused_flag' type='checkbox' checked={hh.paused_flag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></td>\r\n            <td><input name='street' type='text' defaultValue={hh.street} onChange={handleEditFormChange}/></td>\r\n            <td><input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pcode' type='number' minLength='5' maxLength='5' defaultValue={hh.pcode} onChange={handleEditFormChange}/></td>\r\n            <td><input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></td>\r\n            <td><textarea name='deliveryNotes' defaultValue={hh.delivery_notes} onChange={handleEditFormChange}/></td>\r\n            <td><AllergiesList allergies={hh.allergies} isEditable={true} updateAllergies={updateAllergies} updateEditForm={updateEditForm}/></td>\r\n            <td></td>\r\n            <td><button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableHouseholdRow;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\n// Household Row component\r\n// Takes: key of current row, the state of the Household Page's hh list, deleteHousehold callback, handleEditClick callback\r\n// Returns a household table row component \r\nconst HouseholdRow = (props) => {\r\n    const {thisKey, household, deleteHousehold, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const hh = household;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{hh.hh_name}</td>\r\n            <td>{hh.num_adult}</td>\r\n            <td>{hh.num_child}</td>\r\n            <td>{String(hh.veg_flag)}</td>\r\n            <td>{String(hh.gf_flag)}</td>\r\n            <td>{String(hh.a_flag)}</td>\r\n            <td>{String(hh.sms_flag)}</td>\r\n            <td>{String(hh.paused_flag)}</td>\r\n            <td>{hh.phone}</td>\r\n            <td>{hh.street}</td>\r\n            <td>{hh.city}</td>\r\n            <td>{hh.pcode}</td>\r\n            <td>{hh.state}</td>\r\n            <td>{hh.delivery_notes}</td>\r\n            <td><AllergiesList allergies={hh.allergies} isEditable={false}/></td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteHousehold is called with this row's key */}\r\n            <td><button onClick={() => deleteHousehold(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default HouseholdRow;","import React from 'react'\r\n\r\n// Error message component\r\n// Takes error text\r\n// Returns an <h3> error message component\r\nconst Error = (props) => {\r\n    const errorText = props.text;\r\n    return (\r\n        <h3 style={{color: 'red'}}>{errorText}</h3>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdForm from './HouseholdForm.js'\r\nimport EditableHouseholdRow from './EditableHouseholdRow.js'\r\nimport HouseholdRow from './HouseholdRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './HouseholdList.css'\r\n\r\n\r\n// Household List Component\r\nexport default function HouseholdList() {\r\n    const data = [\r\n        {hh_name: 'Anom', num_adult: 2, num_child: 1, veg_flag: false, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '123-456-7890', street: '1234 aStreet', city: 'aCity', pcode: '12345', state: 'MI', delivery_notes: 'N/A', allergies: []},\r\n        {hh_name: 'Jean', num_adult: 1, num_child: 1, veg_flag: true, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '234-567-8912', street: '4321 bStreet', city: 'bCity', pcode: '54321', state: 'MI', delivery_notes: 'Leave on porch', allergies: [{aType: 'Peanut'}]}\r\n    ]\r\n\r\n    const [households, setHouseholds] = useState(data);\r\n    const [editHouseholdID, setEditHouseholdID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBHouseholds = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/households/\"\r\n          }).then((response)=>{\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBHouseholds = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/households/\",\r\n            data: households\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Household Name already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addHousehold = (household) => {\r\n        // Check to see if we already have a duplicate Household Name\r\n        if (!households.find((HH) => HH.hh_name === household.hh_name))\r\n        {\r\n            let newHouseholds = [...households, household];\r\n            setHouseholds(newHouseholds);\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteHousehold = (key) => {\r\n        const householdID = key; \r\n        let newHouseholds = [...households];\r\n        newHouseholds.splice(householdID, 1);\r\n        setHouseholds(newHouseholds);\r\n    }\r\n\r\n    const updateHousehold = (key) => {\r\n        let thisName = households[key];\r\n        if (!households.find((HH) => HH.hh_name === thisName))\r\n        {\r\n            let newHouseholds = [...households];\r\n            newHouseholds[key] = editFormData;\r\n            setEditHouseholdID(null);\r\n            setHouseholds(newHouseholds)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditHouseholdID(key);\r\n        setEditFormData(households[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditHouseholdID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children</th>\r\n                        <th>Vegan</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Allergies</th>\r\n                        <th>Receive SMS</th>\r\n                        <th>Paused</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Street</th>\r\n                        <th>City</th>\r\n                        <th>Postal Code</th>\r\n                        <th>State</th>\r\n                        <th>Delivery Notes</th>\r\n                        <th>Allergies</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each household in households.*/}\r\n                    {households.map((household, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this household is the one to be edited, show an editable row instead\r\n                                editHouseholdID === thisKey \r\n                                ? <EditableHouseholdRow thisKey={thisKey} editFormData={editFormData} updateHousehold={updateHousehold} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <HouseholdRow thisKey={thisKey} household={household} deleteHousehold={deleteHousehold} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add A Household</h3>\r\n            <HouseholdForm addHousehold={addHousehold}></HouseholdForm>\r\n            <button onClick={postDBHouseholds}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\n\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n  \r\n  // The state of this Household Form with each attribute of Household\r\n  const [household, setHousehold] = useState({\r\n      hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: false,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      deliveryNotes: '',\r\n      state: 'MI',\r\n      allergies: []\r\n    });\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold({hhName: '',\r\n      numAdult: 0,\r\n      numChild: 0,\r\n      vegFlag: false,\r\n      gfFlag: false,\r\n      aFlag: false,\r\n      smsFlag: false,\r\n      pausedFlag: true,\r\n      phone: '',\r\n      street: '',\r\n      city: '',\r\n      pCode: '',\r\n      state: 'MI',\r\n      deliveryNotes: '',\r\n      allergies: []\r\n    });\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hhName\">Name: </label>\r\n          <input name=\"hhName\" type=\"text\" maxLength='30' required={true} value={household.hhName} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numAdult'>Number of Adults: </label>\r\n          <input name='numAdult' type=\"number\" value={household.numAdult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='numChild'>Number of Children: </label>\r\n          <input name='numChild' type=\"number\" value={household.numChild} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='vegFlag'>Vegan/Vegetarian: </label>          \r\n          <input name='vegFlag' id='vegFlag' type=\"checkbox\" checked={household.vegFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gfFlag'>Gluten Free: </label>          \r\n          <input name='gfFlag' id='gfFlag' type='checkbox' checked={household.gfFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='aFlag'>Allergy: </label>\r\n          <input name='aFlag' id='aFlag' type='checkbox' checked={household.aFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='smsFlag'>Recieving SMS: </label>\r\n          <input name='smsFlag' id='smsFlag' type='checkbox' checked={household.smsFlag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='pausedFlag'>Is Paused: </label>          \r\n          <input name='pausedFlag' id='pausedFlag' type='checkbox' checked={household.pausedFlag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pCode'>Postal Code: </label>\r\n          <input name='pCode' id='pCode' minLength='5' maxLength='5' value={household.pCode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='deliveryNotes'>Delivery Notes: </label>\r\n          <textarea name='deliveryNotes' id='deliveryNotes' maxLength='255' value={household.deliveryNotes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableIngredientRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"hhName\" defaultValue={hh.hhName} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numAdult\" defaultValue={hh.numAdult} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"numChild\" defaultValue={hh.numChild} onChange={handleEditFormChange}/></td>\r\n            <td><input name='vegFlag' type=\"checkbox\" checked={hh.vegFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='gfFlag' type='checkbox' checked={hh.gfFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='aFlag' type='checkbox' checked={hh.aFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='smsFlag' type='checkbox' checked={hh.smsFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pausedFlag' type='checkbox' checked={hh.pausedFlag} onChange={handleEditFormChange}/></td>\r\n            <td><input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></td>\r\n            <td><input name='street' type='text' defaultValue={hh.street} onChange={handleEditFormChange}/></td>\r\n            <td><input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></td>\r\n            <td><input name='pCode' type='number' minLength='5' maxLength='5' defaultValue={hh.pCode} onChange={handleEditFormChange}/></td>\r\n            <td><input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></td>\r\n            <td><textarea name='deliveryNotes' defaultValue={hh.deliveryNotes} onChange={handleEditFormChange}/></td>\r\n            <td><button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableIngredientRow;","import React from 'react'\r\n\r\n// Ingredient Row component\r\n// Takes: key of current row, the state of the Ingredient Page's ingredient list, deleteIngredient callback, handleEditClick callback\r\n// Returns a Ingredient table row component \r\nconst IngredientRow = (props) => {\r\n    const {thisKey, ingredient, deleteIngredient, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const ing = ingredient;\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{ing.ingName}</td>\r\n            <td>{ing.numAdult}</td>\r\n            <td>{ing.numChild}</td>\r\n            <td>{String(ing.vegFlag)}</td>\r\n            <td>{String(ing.gfFlag)}</td>\r\n            <td>{String(ing.aFlag)}</td>\r\n            <td>{String(ing.smsFlag)}</td>\r\n            <td>{String(ing.pausedFlag)}</td>\r\n            <td>{ing.phone}</td>\r\n            <td>{ing.street}</td>\r\n            <td>{ing.city}</td>\r\n            <td>{ing.pCode}</td>\r\n            <td>{ing.state}</td>\r\n            <td>{ing.deliveryNotes}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteIngredient is called with this row's key */}\r\n            <td><button onClick={() => deleteIngredient(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default IngredientRow;","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport IngredientForm from './IngredientForm.js'\r\nimport EditableIngredientRow from './EditableIngredientRow.js'\r\nimport IngredientRow from './IngredientRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './IngredientList.css'\r\n\r\n\r\n// Ingredient List Component\r\nexport default function IngredientList() {\r\n    const data = [\r\n        {i_id: 1, ingredient_name: 'Lasagna Noodles', pkg_type: 'DRY-BAG', storage_type: 'N/A', in_date: '11-20-22', in_qty: 10, unit: 'lbs', exp_date: '11-20-24', qty_on_hand: 10, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'},\r\n        {i_id: 1, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11-11-22', i_qty_in: 2, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 2, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'},\r\n        {i_id: 1, ingredient_name: 'Ground Beef', pkg_type: 'FROZEN', storage_type: 'N/A', in_date: '11-20-22', i_qty_in: 5, unit: 'lbs', exp_date: '12-7-22', qty_on_hand: 5, unit_cost: 0.75, flat_fee: 0.00, i_supplier_name: 'Second Harvest Food Bank', i_pref_supplier_name: 'N/A'}\r\n    ]\r\n\r\n    const [ingredients, setIngredients] = useState(data);\r\n    const [editIngredientID, setEditIngredientID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBIngredients = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/ingredients/\"\r\n          }).then((response)=>{\r\n            const ingData = response.data\r\n            setIngredients(ingData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBIngredients = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/ingredients/\",\r\n            data: ingredients\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient Name already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addIngredient = (ingredient) => {\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        {\r\n            let newIngredients = [...ingredients, ingredient];\r\n            setIngredients(newIngredients);\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteIngredient = (key) => {\r\n        const ingID = key; \r\n        let newIngredients = [...ingredients];\r\n        newIngredients.splice(ingID, 1);\r\n        setIngredients(newIngredients);\r\n    }\r\n\r\n    const updateIngredient = (key) => {\r\n        let thisName = ingredients[key];\r\n        if (!ingredients.find((HH) => HH.hhName === thisName))\r\n        {\r\n            let newIngredients = [...ingredients];\r\n            newIngredients[key] = editFormData;\r\n            setEditIngredientID(null);\r\n            setIngredients(newIngredients)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.aFlag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditIngredientID(key);\r\n        setEditFormData(ingredients[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditIngredientID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children</th>\r\n                        <th>Vegan</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Allergies</th>\r\n                        <th>Receive SMS</th>\r\n                        <th>Paused</th>\r\n                        <th>Phone Number</th>\r\n                        <th>Street</th>\r\n                        <th>City</th>\r\n                        <th>Postal Code</th>\r\n                        <th>State</th>\r\n                        <th>Delivery Notes</th>\r\n                        <th>Allergies</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {ingredients.map((ingredient, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editIngredientID === thisKey \r\n                                ? <EditableIngredientRow thisKey={thisKey} editFormData={editFormData} updateIngredient={updateIngredient} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <IngredientRow thisKey={thisKey} ingredient={ingredient} deleteIngredient={deleteIngredient} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add An Ingredient</h3>\r\n            <IngredientForm addIngredient={addIngredient}></IngredientForm>\r\n            <button onClick={postDBIngredients}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import MealRepositoryTable from './MealPlan.js'\nimport HouseholdForm from './Households/HouseholdForm.js'\nimport LoginPage from './LoginPage.js'\nimport HouseholdList from './Households/HouseholdList.js'\nimport AllergiesList from './Households/AllergiesList.js'\nimport Ingredients from './Ingredients/IngredientList.js'\nimport React from 'react'\nimport {useState} from 'react'\n\nconst App = () => {  \n  const [currPage, setCurrPage] = useState();\n\n  const handlePageClick = (pageName) => {\n    console.log(pageName)\n    if (pageName === 'householdForm') setCurrPage(<HouseholdForm/>);\n    else if (pageName === 'loginPage') setCurrPage(<LoginPage handlePageClick={handlePageClick}/>);\n    else if (pageName === 'mealRepositoryTable') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'households') setCurrPage(<HouseholdList/>);\n    else if (pageName === 'ingredients') setCurrPage(<Ingredients/>);\n    else if (pageName === 'landing') setCurrPage(<MealRepositoryTable/>);\n    else if (pageName === 'allergies') setCurrPage(<AllergiesList allergies={[{aType: 'Gluten'}, {aType: 'Peanut'}]}/>);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Food Forward Tracker</h1>\n        {/* <button onClick={() => handlePageClick('householdForm')}>\n          Household Form\n        </button> */}\n        <button onClick={() => handlePageClick('loginPage')}>\n          Login Page\n        </button>\n        <button onClick={() => handlePageClick('households')}>\n          Households\n        </button>\n        {/* <button onClick={() => handlePageClick('ingredients')}>\n          Ingredients\n        </button> */}\n        {currPage}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
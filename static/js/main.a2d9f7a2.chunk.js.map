{"version":3,"sources":["DisplayMessage.js","Households/AllergiesList.js","Households/HouseholdForm.js","NewUserPage.js","PwResetPage.js","LoginPage.js","LandingPage.js","MealsPage.js","InventoryPage.js","Households/EditableHouseholdRow.js","Households/HouseholdRow.js","Error.js","Households/HouseholdList.js","ReusableTable.js","Households/HouseholdsReport.js","Ingredients/IngredientForm.js","Ingredients/EditableIngUsageTable.js","Ingredients/EditableIngredientRow.js","Ingredients/IngredientRow.js","Ingredients/IngredientList.js","Stations/StationForm.js","Stations/EditableStationRow.js","Stations/StationRow.js","Stations/StationList.js","ReportsPage.js","UserPage.js","User/UserForm.js","User/EditableUserRow.js","User/UserRow.js","User/UserList.js","Recipe/RecipeForm.js","Recipe/EditableRecipeRow.js","Recipe/RecipeRow.js","Recipe/RecipeList.js","Meals/MealPlanForm.js","Meals/EditableMealRow.js","Meals/MealPlanRow.js","Meals/MealList.js","Packaging/PackagingForm.js","Packaging/EditablePkgUsageTable.js","Packaging/EditablePackagingRow.js","Packaging/PackagingRow.js","Packaging/PackagingList.js","Search.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayMessage","props","text","react_default","a","createElement","AllergiesList","_useState","useState","allergies","_useState2","Object","slicedToArray","setAllergies","_useState3","aType","_useState4","currAllergy","setCurrAllergy","_useState5","_useState6","_useState7","isEditable","_useState8","useEffect","setAFlag","allergyList","length","react","map","allergy","thisKey","key","a_type","type","onClick","allergyID","newAllergies","toConsumableArray","splice","ret","updateEditForm","handleDeleteAllergy","name","onChange","event","fieldName","target","getAttribute","fieldValue","checked","value","newAllergy","objectSpread","preventDefault","concat","HouseholdForm","hh_name","num_adult","undefined","num_child_lt_6","num_child_gt_6","sms_flag","veg_flag","allergy_flag","gf_flag","ls_flag","paused_flag","phone","street","city","pcode","state","delivery_notes","hh_allergies","household","setHousehold","names","values","newHousehold","i","handleFormChange","onSubmit","addHousehold","htmlFor","id","maxLength","required","a_flag","minLength","Households_AllergiesList","NewUserPage","handlePageClick","username","password","email","user","setUser","createNewUser","thisUser","axios","method","url","data","then","response","console","log","catch","error","status","headers","PwResetPage","sendEmail","handleResetChange","LoginPage","sendLoginRequest","userInList","userData","setLoginState","handleLoginChange","Grid","item","container","spacing","sx","margin","marginTop","maxWidth","alignItems","md","display","xs","Box","component","width","src","Typography","variant","paddingBottom","Card","sm","elevation","padding","height","Stack","TextField","label","Button","textAlign","size","LandingPage","justifyContent","direction","maxHeight","CardActionArea","CardContent","MealsPage","EditableHouseholdRow","editFormData","updateHousehold","handleEditFormChange","handleCancelClick","updateAllergies","hh","TableRow","&:last-child TableCell, &:last-child th","border","TableCell","align","Input","defaultValue","pattern","sTableRoweet","HouseholdRow","deleteHousehold","handleEditClick","color","TrueMarker","bool","Check","&:last-child td, &:last-child th","Boolean","IconButton","Edit_default","Delete_default","Error","errorText","style","HouseholdList","households","setHouseholds","editHouseholdID","setEditHouseholdID","setEditFormData","errorComponent","setErrorComponent","_useState9","_useState10","displayMsgComponent","setdisplayMsgComponent","handleError","errCode","src_Error","clearError","getDBHouseholds","hhData","thisName","JSON","stringify","newEditFormData","Fragment","Table","Paper","stickyHeader","minWidth","TableHead","TableBody","Households_EditableHouseholdRow","Households_HouseholdRow","Households_HouseholdForm","find","HH","src_DisplayMessage","msg","ReusableTable","dataState","keys","thisData","thisValue","colKey","editID","metadata","className","IngredientForm","supplierList","suppliers","i_id","ingredient_name","pkg_type","storage_type","in_date","in_qty","ingredient_usage","qty_on_hand","unit","exp_date","unit_cost","flat_fee","isupplier_id","pref_isupplier_id","ingredient","setIngredient","newIngredient","addIngredient","step","selected","supplier","s_id","s_name","EditableIngUsageTable","used_date","used_qty","currUsage","setCurrUsage","ingUsages","setIngUsages","handleKeyUsageChange","newUsage","newIngUsages","handleUsageChange","usage","dataKey","newUsages","handleDeleteUsage","EditableIngredientRow","updateIngredient","isSelected","IngredientRow","deleteIngredient","ing","String","ing_usages","ingredient_usages","isupplier","pref_isupplier","IngredientList","ingredients","setIngredients","setSuppliers","editIngredientID","setEditIngredientID","_useState11","_useState12","_useState13","_useState14","loadingComponent","setLoadingComponent","getDBIngredients","getDBSuppliers","ingData","ingID","thisID","class","InventoryPage","Ingredients_EditableIngredientRow","Ingredients_IngredientRow","Ingredients_IngredientForm","lastID","StationForm","stn_name","num_servings","station","setStation","addStation","newStation","EditableStationRow","updateStation","s","StationRow","deleteStation","StationList","stations","setStations","editStationID","setEditStationID","_useState15","_useState16","getDBStations","getDBHhref","stnData","src_MealsPage","TableContainer","Stations_EditableStationRow","Stations_StationRow","Stations_StationForm","ReportsPage","currPage","setCurrPage","pageName","HouseholdsReport_HouseholdList","UserPage","UserForm","u_id","admin_flag","newUser","addUser","EditableUserRow","updateUser","u","UserRow","deleteUser","UserList","users","setUsers","editUserID","setEditUserID","getDBUsers","uData","allign","User_EditableUserRow","User_UserRow","User_UserForm","U","RecipeForm","r_num","r_name","ri_id","amt","prep","ri_ing","ri_recipe_num","inst_id","step_no","step_inst","inst_recipe_num","recipe","setRecipe","newRecipe","addRecipe","snack_r_num","m_date","EditableRecipeRow","updateRecipe","meal_name","snack_name","placeholder","RecipeRow","deleteRecipe","r","RecipeList","usages","recipeID","editRecipeID","setEditRecipeID","recipes","aFlag","Recipe_EditableRecipeRow","Recipe_RecipeRow","Recipe_RecipeForm","recipeData","MealPlanForm","recipeList","m_id","meal_r_num","meal_servings","snack_servings","meal","setMeal","newMeal","addMeal","EditableMealRow","updateMeal","MealPlanRow","deleteMeal","m","MealList","mealPlan","setMealPlan","setRecipeList","editMealID","setEditMealID","getDBMealPlan","mealData","meals","Meals_EditableMealRow","Meals_MealPlanRow","Meals_MealPlanForm","postDBMealPlan","PackagingForm","p_id","package_type","unit_qty","qty_holds","returnable","packaging_usage","psupplier_id","pref_psupplier_id","packaging","setPackaging","newPackaging","addPackaging","EditablePkgUsageTable","pkgUsages","setPkgUsages","newPkgUsages","EditablePackagingRow","updatePackaging","pkg","PackagingRow","deletePackaging","pkg_usages","PackagingList","editPackagingID","setEditPackagingID","getDBPackaging","pkgData","pkgID","Packaging_EditablePackagingRow","Packaging_PackagingRow","Packaging_PackagingForm","App","isAdmin","loginState","src_LoginPage","src_NewUserPage","src_PwResetPage","src_LandingPage","IngredientList_IngredientList","PackagingList_PackagingList","StationList_StationList","MealList_MealList","RecipeList_RecipeList","src_ReportsPage","src_UserPage","UserList_UserList","CssBaseline","bgcolor","theme","palette","background","default","minHeight","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"uWAYeA,EAPQ,SAACC,GACpB,IAAMC,EAAOD,EAAMC,KACnB,OACIC,EAAAC,EAAAC,cAAA,UAAKH,ICoHEI,EAtHO,SAACL,GAAU,IAAAM,EACKC,mBAASP,EAAMQ,WAAUC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAApDE,EAASC,EAAA,GAAEG,EAAYH,EAAA,GAAAI,EACQN,mBAAS,CAACO,MAAO,KAAIC,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAApDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAAAG,EACoBX,mBAAS,MAAKY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAlBE,GAAxBD,EAAA,GAAwBA,EAAA,GACdZ,mBAASP,EAAMqB,aAAWC,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAvDC,EAAUC,EAAA,GAAeA,EAAA,GAEhCC,oBAAW,WACPX,EAAaZ,EAAMQ,YACpB,CAACR,EAAMQ,YAKV,IAWMgB,EAAW,SAACC,GACd,OAAIA,EAAYC,OAAS,EACd,CAAC,UAAU,GAGX,CAAC,UAAU,IA2B1B,OAAIL,EAEInB,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aAEKI,EAAUoB,IAAI,SAACC,EAASC,GACrB,OACI5B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,CAACI,IAAKD,GACX5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKD,GACL5B,EAAAC,EAAAC,cAAA,UACKyB,EAAQG,QAEb9B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAASC,QAAS,YAvB3C,SAACH,GACzB,IAAMI,EAAYJ,EACdK,EAAY1B,OAAA2B,EAAA,EAAA3B,CAAOF,GACvB4B,EAAaE,OAAOH,EAAW,GAC/BvB,EAAawB,GACb,IAAMG,EAAMf,EAASY,GACrBpC,EAAMwC,eAAe,CAAC,eAAgBD,EAAI,IAAK,CAACH,EAAcG,EAAI,KAiBQE,CAAoBX,KAAU,eAQxF5B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOU,SAnEjC,SAACC,GAEzB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpFC,EAAUzC,OAAA0C,EAAA,EAAA1C,CAAA,GAAOM,GACvBmC,EAAWN,GAAaG,EAExB/B,EAAekC,IA2DyED,MAAOlC,EAAYgB,UAEvF9B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAASC,QAlDzB,SAACU,GAEtBA,EAAMS,iBAEN,IAAMjB,EAAY,GAAAkB,OAAA5C,OAAA2B,EAAA,EAAA3B,CAAQF,GAAS,CAAEQ,IACrCJ,EAAawB,GAEbnB,EAAe,CAACe,OAAQ,KAExB,IAAMO,EAAMf,EAASY,GAErBpC,EAAMwC,eAAe,CAAC,eAAgBD,EAAI,IAAK,CAACH,EAAcG,EAAI,OAuCM,YAYpErC,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aAEKI,EAAUoB,IAAI,SAACC,EAASC,GACrB,OACI5B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,CAACI,IAAKD,GACX5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKD,GACL5B,EAAAC,EAAAC,cAAA,UACKyB,EAAQG,gBCkCtCuB,EAxIO,SAACvD,GAErB,IAsBAM,EACkCC,mBAtBzB,CACLiD,QAAS,GACTC,eAAWC,EACXC,oBAAgBD,EAChBE,oBAAgBF,EAChBG,SAAU,EACVC,SAAU,EACVC,aAAc,EACdC,QAAS,EACTC,QAAS,EACTC,YAAa,EACbC,MAAO,GACPC,OAAQ,GACRC,KAAM,GACNC,WAAOZ,EACPa,MAAO,GACPC,eAAgB,GAChBC,aAAc,KAK0ChE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAArDoE,EAASjE,EAAA,GAAEkE,EAAYlE,EAAA,GActB+B,EAAiB,SAACoC,EAAOC,GAE7B,IADA,IAAMC,EAAYpE,OAAA0C,EAAA,EAAA1C,CAAA,GAAOgE,GAChBK,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCD,EAAaF,EAAMG,IAAMF,EAAOE,GAGlCJ,EAAaG,IAOTE,EAAmB,SAACpC,GAExB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,MAE7FV,EAAe,CAACK,GAAY,CAACG,KAK/B,OACE9C,EAAAC,EAAAC,cAAA,QAAM6E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAENrD,EAAMkF,aAAaR,GAEnBC,EAjCK,CACLnB,QAAS,GACTC,eAAWC,EACXC,oBAAgBD,EAChBE,oBAAgBF,EAChBG,SAAU,EACVC,SAAU,EACVC,aAAc,EACdC,QAAS,EACTC,QAAS,EACTC,YAAa,EACbC,MAAO,GACPC,OAAQ,GACRC,KAAM,GACNC,WAAOZ,EACPa,MAAO,GACPC,eAAgB,GAChBC,aAAc,OA6CVvE,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,UACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAU0C,GAAG,UAAUnD,KAAK,OAAOoD,UAAU,KAAKC,UAAU,EAAMpC,MAAOwB,EAAUlB,QAASb,SAAUqC,IAElH9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,sBAC1BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAY0C,GAAG,YAAYnD,KAAK,SAASiB,MAAOwB,EAAUjB,UAAWd,SAAUqC,IAE3F9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,kBAAgB,4BAC/BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,iBAAiB0C,GAAG,iBAAiBnD,KAAK,SAASiB,MAAOwB,EAAUf,eAAgBhB,SAAUqC,IAE1G9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,kBAAgB,6BAC/BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,iBAAiB0C,GAAG,iBAAiBnD,KAAK,SAASiB,MAAOwB,EAAUd,eAAgBjB,SAAUqC,IAI1G9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,sBACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,WAAWgB,QAASyB,EAAUZ,SAAUnB,SAAUqC,IAE5F9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,iBACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAU0C,GAAG,UAAUnD,KAAK,WAAWgB,QAASyB,EAAUV,QAASrB,SAAUqC,IAEzF9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,aACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAS0C,GAAG,SAASnD,KAAK,WAAWgB,QAASyB,EAAUa,OAAQ5C,SAAUqC,IAEtF9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,mBACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,WAAWgB,QAASyB,EAAUb,SAAUlB,SAAUqC,IAE5F9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,eAAa,eAC5BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,cAAc0C,GAAG,cAAcnD,KAAK,WAAWgB,QAASyB,EAAUR,YAAavB,SAAUqC,IAGrG9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,SAAO,kBACtBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQ0C,GAAG,QAAQnD,KAAK,MAA+DoD,UAAU,KAAKnC,MAAOwB,EAAUP,MAAOxB,SAAUqC,IAEpJ9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,YACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAS0C,GAAG,SAASC,UAAU,KAAKnC,MAAOwB,EAAUN,OAAQzB,SAAUqC,IAEnF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,UACrBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAO0C,GAAG,OAAOC,UAAU,KAAKnC,MAAOwB,EAAUL,KAAM1B,SAAUqC,IAE7E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,SAAO,iBACtBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQ0C,GAAG,QAAQI,UAAU,IAAIH,UAAU,IAAInC,MAAOwB,EAAUJ,MAAO3B,SAAUqC,IAE7F9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,SAAO,WACtBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQ0C,GAAG,QAAQI,UAAU,IAAIH,UAAU,IAAInC,MAAOwB,EAAUH,MAAO5B,SAAUqC,IAE7F9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,kBAAgB,oBAC/BjF,EAAAC,EAAAC,cAAA,YAAUsC,KAAK,iBAAiB0C,GAAG,iBAAiBC,UAAU,MAAMnC,MAAOwB,EAAUF,eAAgB7B,SAAUqC,IAG/G9E,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACqF,EAAa,CAACjF,UAAWkE,EAAUD,aAAcpD,YAAY,EAAMmB,eAAgBA,IAEpFtC,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,iBC/DhByD,EApEK,SAAC1F,GACjB,IAAM2F,EAAkB3F,EAAM2F,gBAAgBrF,EACtBC,mBACpB,CACIqF,SAAU,GACVC,SAAU,GACVC,MAAO,KAEdrF,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GANMyF,EAAItF,EAAA,GAAEuF,EAAOvF,EAAA,GA4BdwF,EAAgB,SAACrD,GACnB,IAAMC,EAAYD,EAAME,OAAOJ,KACzBM,EAAaJ,EAAME,OAAOI,MAC1BgD,EAAQxF,OAAA0C,EAAA,EAAA1C,CAAA,GAAQqF,GACtBG,EAASrD,GAAaG,EACtBgD,EAAQE,IAiBZ,OACIhG,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,QAAM6E,SAdW,SAACrC,GAEtBA,EAAMS,iBAhCN8C,YAAM,CACFC,OAAQ,OACRC,IAAK,GACLC,KAAMP,IACPQ,KAAK,SAACC,GACL,IAAMF,EAAOE,EAASF,KACtBG,QAAQC,IAAIJ,KACbK,MAAM,SAACC,GACFA,EAAMJ,WACNC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAyBnCnB,EAAgB,eASRzF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOoD,UAAU,KAAK3C,KAAK,WAAWQ,MAAO6C,EAAKH,SAAUjD,SAAUsD,IAClF/F,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cAC9BjF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,WAAWoD,UAAU,KAAK3C,KAAK,WAAWQ,MAAO6C,EAAKF,SAAUlD,SAAUsD,IACtF/F,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,WAC9BjF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,QAAQoD,UAAU,KAAK3C,KAAK,QAAQQ,MAAO6C,EAAKD,MAAOnD,SAAUsD,IAC7E/F,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,aCIhC8E,EAlEK,SAAC/G,GACjB,IAAM2F,EAAkB3F,EAAM2F,gBAAgBrF,EACpBC,mBACtB,CACIqF,SAAU,GACVE,MAAO,KAEdrF,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GALMyF,EAAItF,EAAA,GAAEuG,EAASvG,EAAA,GA2BhBwG,EAAoB,SAACrE,GACvB,IAAMC,EAAYD,EAAME,OAAOJ,KACzBM,EAAaJ,EAAME,OAAOI,MAC1BgD,EAAQxF,OAAA0C,EAAA,EAAA1C,CAAA,GAAOqF,GACrBG,EAASrD,GAAaG,EACtBgE,EAAUd,IAkBd,OACIhG,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,QAAM6E,SAdY,SAACrC,GAEvBA,EAAMS,iBAjCN8C,YAAM,CACFC,OAAQ,OACRC,IAAI,GACJC,KAAMP,IACLQ,KAAK,SAACC,GACP,IAAMF,EAAOE,EAASF,KACtBG,QAAQC,IAAIJ,KACXK,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YA0BjCnB,EAAgB,eASRzF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOoD,UAAU,KAAK3C,KAAK,WAAWQ,MAAO6C,EAAKH,SAAUjD,SAAUsE,IAClF/G,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,WAC9BjF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,QAAQoD,UAAU,KAAK3C,KAAK,QAAQQ,MAAO6C,EAAKD,MAAOnD,SAAUsE,IAC7E/G,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,4EC+DhCiF,EAnHG,SAAClH,GACf,IAAM2F,EAAkB3F,EAAM2F,gBAAgBrF,EACtBC,mBACpB,CACIqF,SAAU,GACVC,SAAU,KAEjBpF,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GALMyF,EAAItF,EAAA,GAAEuF,EAAOvF,EAAA,GAOd0G,EAAmB,WACrBhB,YAAM,CACFC,OAAQ,MACRC,IAAI,yCACHE,KAAK,SAACC,GAGP,IAFA,IAAIY,GAAa,EACbC,OAAW3D,EACNqB,EAAI,EAAGA,EAAIyB,EAASF,KAAK5E,SAAUqD,EACpCyB,EAASF,KAAKvB,GAAGa,WAAaG,EAAKH,UAC/BY,EAASF,KAAKvB,GAAGc,WAAaE,EAAKF,WACnCuB,GAAa,EACbC,EAAWb,EAASF,KAAKvB,IAIjCqC,IACApH,EAAMsH,cAAcD,GACpB1B,EAAgB,kBAEnBgB,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAQ/BS,EAAoB,SAAC3E,GACvB,IAAMC,EAAYD,EAAME,OAAOJ,KACzBM,EAAaJ,EAAME,OAAOI,MAC1BgD,EAAQxF,OAAA0C,EAAA,EAAA1C,CAAA,GAAOqF,GACrBG,EAASrD,GAAaG,EACtBgD,EAAQE,GACRO,QAAQC,IAAIX,EAAKH,SAAUG,EAAKF,WA0BpC,OACIlE,EAAA,cAAC6F,EAAA,EAAI,CAACC,MAAI,EAACC,WAAS,EAACC,QAAQ,KAAKC,GAAI,CAACC,OAAQ,OAAQC,UAAW,MAAOC,SAAU,MAAOC,WAAY,WAGlGrG,EAAA,cAAC6F,EAAA,EAAI,CAACC,MAAI,EAACQ,GAAG,IAAIL,GAAI,CAACM,QAAS,CAACC,GAAI,OAAQF,GAAI,WAC7CtG,EAAA,cAACyG,EAAA,EAAG,CAACC,UAAU,MAAMT,GAAI,CAACU,MAAO,OAAQC,IAAI,wBAC7C5G,EAAA,cAAC6G,EAAA,EAAU,CAACC,QAAQ,KAAKb,GAAI,CAACc,cAAe,QAAO,6BAIxD/G,EAAA,cAAC6F,EAAA,EAAI,CAACC,MAAI,EAACY,UAAWM,IAAMV,GAAG,IAAIW,GAAG,KAAKC,UAAU,IAAIjB,GAAI,CAACkB,QAAS,MAAOC,OAAQ,gBAClFpH,EAAA,cAAC6G,EAAA,EAAU,CAACC,QAAQ,KAAKb,GAAI,CAACc,cAAe,QAAO,WACpD/G,EAAA,sBAAMsD,SAhCQ,SAACrC,GAEvBA,EAAMS,iBAEN8D,MA8BYxF,EAAA,cAACqH,EAAA,EAAK,KACFrH,EAAA,cAACsH,EAAA,EAAS,CAAChH,KAAK,OAAOoD,UAAU,KAAK6D,MAAM,WAAWxG,KAAK,WAAWQ,MAAO6C,EAAKH,SAAUjD,SAAU4E,IACvG5F,EAAA,cAACsH,EAAA,EAAS,CAAChH,KAAK,WAAWoD,UAAU,KAAK6D,MAAM,WAAWxG,KAAK,WAAWQ,MAAO6C,EAAKF,SAAUlD,SAAU4E,IAC3G5F,EAAA,cAACwH,EAAA,EAAM,CAACV,QAAQ,YAAYxG,KAAK,SAASC,QAASiF,GAAiB,WAKxExF,EAAA,cAACqH,EAAA,EAAK,CAACpB,GAAI,CAACwB,UAAW,SAAUtB,UAAW,QACxCnG,EAAA,cAAC6G,EAAA,EAAU,+BAGX7G,EAAA,cAACwH,EAAA,EAAM,CAACV,QAAQ,WAAWY,KAAK,QAAQnH,QAAS,WAnCjEyD,EAAgB,iBAmCwF,WAGxFhE,EAAA,cAAC6G,EAAA,EAAU,8BAGX7G,EAAA,cAACwH,EAAA,EAAM,CAACV,QAAQ,WAAWY,KAAK,QAAQnH,QAAS,WApCjEyD,EAAgB,iBAoCuF,yCCxChG2D,EA1EK,SAACtJ,GACjB,IAAM2F,EAAkB3F,EAAM2F,gBAE9B,OACIzF,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CACDE,WAAS,EACT6B,eAAe,eACfvB,WAAW,UACXwB,UAAU,MACV7B,QAAS,EACTC,GAAI,CAAC6B,UAAW,OAAQ5B,OAAQ,SAChC3H,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CAACC,MAAI,EAACmB,GAAI,GAAIX,GAAI,GACnB/H,EAAAC,EAAAC,cAACuI,EAAA,EAAI,CAACE,UAAU,IAAIjB,GAAI,CAACmB,OAAQ,SAC7B7I,EAAAC,EAAAC,cAACsJ,EAAA,EAAc,CAAC9B,GAAI,CAACmB,OAAQ,QAAS7G,QAAS,kBAAMyD,EAAgB,gBACjEzF,EAAAC,EAAAC,cAACuJ,EAAA,EAAW,KACRzJ,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,MAAI,WACxCvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,6BAC3CvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,uCAM3DvI,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CAACC,MAAI,EAACmB,GAAI,GAAIX,GAAI,GACnB/H,EAAAC,EAAAC,cAACuI,EAAA,EAAI,CAACE,UAAU,IAAIjB,GAAI,CAACmB,OAAQ,SAC7B7I,EAAAC,EAAAC,cAACsJ,EAAA,EAAc,CAAC9B,GAAI,CAACmB,OAAQ,QAAS7G,QAAS,kBAAMyD,EAAgB,eACjEzF,EAAAC,EAAAC,cAACuJ,EAAA,EAAW,KACRzJ,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,MAAI,SACxCvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,gBAC3CvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,0BAM3DvI,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CAACC,MAAI,EAACmB,GAAI,GAAIX,GAAI,GACnB/H,EAAAC,EAAAC,cAACuI,EAAA,EAAI,CAACE,UAAU,IAAIjB,GAAI,CAACmB,OAAQ,SAC7B7I,EAAAC,EAAAC,cAACsJ,EAAA,EAAc,CAAC9B,GAAI,CAACmB,OAAQ,QAAS7G,QAAS,kBAAMyD,EAAgB,mBACjEzF,EAAAC,EAAAC,cAACuJ,EAAA,EAAW,KACRzJ,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,MAAI,aACxCvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,oCAC3CvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,8CAM3DvI,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CAACC,MAAI,EAACmB,GAAI,GAAIX,GAAI,GACnB/H,EAAAC,EAAAC,cAACuI,EAAA,EAAI,CAACE,UAAU,IAAIjB,GAAI,CAACmB,OAAQ,SAC7B7I,EAAAC,EAAAC,cAACsJ,EAAA,EAAc,CAAC9B,GAAI,CAACmB,OAAQ,QAAS7G,QAAS,kBAAMyD,EAAgB,aACjEzF,EAAAC,EAAAC,cAACuJ,EAAA,EAAW,KACRzJ,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,MAAI,WACxCvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,kBAC3CvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,yCAM3DvI,EAAAC,EAAAC,cAACoH,EAAA,EAAI,CAACC,MAAI,EAACmB,GAAI,GAAIX,GAAI,GACnB/H,EAAAC,EAAAC,cAACuI,EAAA,EAAI,CAACE,UAAU,IAAIjB,GAAI,CAACmB,OAAQ,SAC7B7I,EAAAC,EAAAC,cAACsJ,EAAA,EAAc,CAAC9B,GAAI,CAACmB,OAAQ,QAAS7G,QAAS,kBAAMyD,EAAgB,cACjEzF,EAAAC,EAAAC,cAACuJ,EAAA,EAAW,KACRzJ,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,MAAI,kBACxCvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,8BAC3CvI,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACH,UAAU,MAAMI,QAAQ,SAAO,0BC9CxDmB,EAnBG,SAAC5J,GACf,IAAM2F,EAAkB3F,EAAM2F,gBAE9B,OACIzF,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,WAAS,aAGpEzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,aAAW,WAGtEzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,cAAY,cCIpE2D,EAhBK,SAACtJ,GACOA,EAAM2F,gBAE9B,OACIzF,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACLzB,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMlC,EAAM2F,gBAAgB,iBAAe,eAGhFzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMlC,EAAM2F,gBAAgB,eAAa,0CCsB3EkE,EA7Bc,SAAC7J,GAAU,IAC7B8B,EAAoH9B,EAApH8B,QAASgI,EAA2G9J,EAA3G8J,aAAcC,EAA6F/J,EAA7F+J,gBAAiBC,EAA4EhK,EAA5EgK,qBAAsBC,EAAsDjK,EAAtDiK,kBAAmBC,EAAmClK,EAAnCkK,gBAAiB1H,EAAkBxC,EAAlBwC,eACnG2H,EAAKL,EACL/H,EAAMD,EAEZ,OACI5B,EAAAC,EAAAC,cAACgK,EAAA,EAAQ,CAACrI,IAAKA,EAAK6F,GAAI,CAAEyC,0CAA2C,CAAEC,OAAQ,KAC3EpK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAACxI,KAAK,OAAOS,KAAK,UAAUgI,aAAcP,EAAG3G,QAASb,SAAUqH,KAC/F9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAACxI,KAAK,SAASS,KAAK,YAAYgI,aAAcP,EAAG1G,UAAWd,SAAUqH,KACrG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAACxI,KAAK,SAASS,KAAK,iBAAiBgI,aAAcP,EAAGxG,eAAgBhB,SAAUqH,KAC/G9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAACxI,KAAK,SAASS,KAAK,iBAAiBgI,aAAcP,EAAGvG,eAAgBjB,SAAUqH,KAC/G9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,WAAWT,KAAK,WAAWgB,QAASkH,EAAGrG,SAAUnB,SAAUqH,KAChG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,UAAUT,KAAK,WAAWgB,QAASkH,EAAGnG,QAASrB,SAAUqH,KAC9F9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,SAAST,KAAK,WAAWgB,QAASkH,EAAG5E,OAAQ5C,SAAUqH,KAC5F9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,WAAWT,KAAK,WAAWgB,QAASkH,EAAGtG,SAAUlB,SAAUqH,KAChG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,cAAcT,KAAK,WAAWgB,QAASkH,EAAGjG,YAAavB,SAAUqH,KACtG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,QAAQT,KAAK,MAAM0I,QAAQ,6BAA6BnF,UAAU,KAAKH,UAAU,KAAKqF,aAAcP,EAAGhG,MAAOxB,SAAUqH,KAC7J9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,eAAeT,KAAK,OAAOyI,aAAcP,EAAGS,aAAcjI,SAAUqH,KACzG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,OAAOT,KAAK,OAAOyI,aAAcP,EAAG9F,KAAM1B,SAAUqH,KACzF9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,QAAQT,KAAK,SAASuD,UAAU,IAAIH,UAAU,IAAIqF,aAAcP,EAAG7F,MAAO3B,SAAUqH,KACzH9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqK,EAAA,EAAK,CAAC/H,KAAK,QAAQT,KAAK,OAAOuD,UAAU,IAAIH,UAAU,IAAIqF,aAAcP,EAAG5F,MAAO5B,SAAUqH,KACvH9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAAA,YAAUsC,KAAK,iBAAiBgI,aAAcP,EAAG3F,eAAgB7B,SAAUqH,KACpG9J,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAACqF,EAAa,CAACjF,UAAW2J,EAAG1F,aAAcpD,YAAY,EAAM6I,gBAAiBA,EAAiB1H,eAAgBA,KACxItC,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAAClH,KAAK,SAASC,QAAS,WAAK6H,EAAgBhI,KAAM,SACnF7B,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SAAQtK,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACjH,QAAS+H,GAAkB,mFCsCzDY,EAtDM,SAAC7K,GAAU,IACrB8B,EAAwD9B,EAAxD8B,QAAS4C,EAA+C1E,EAA/C0E,UAAWoG,EAAoC9K,EAApC8K,gBAAiBC,EAAmB/K,EAAnB+K,gBACtChJ,EAAMD,EACNqI,EAAKzF,EAAUpE,EACqBC,mBAAS,CAC/CmC,KAAM,GACNsI,MAAO,KACTvK,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAEI2K,GALcxK,EAAA,GAAkBA,EAAA,GAKlB,SAACyK,GACjB,GAAIA,EACA,OAAOhL,EAAAC,EAAAC,cAAC+K,EAAA,EAAK,QAKrB,OACIjL,EAAAC,EAAAC,cAACgK,EAAA,EAAQ,CAACrI,IAAKA,EAAK6F,GAAI,CAAEwD,mCAAoC,CAAEd,OAAQ,KACpEpK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG3G,SAC5BtD,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG1G,WAC5BvD,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAGxG,gBAC5BzD,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAGvG,gBAC5B1D,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQS,EAAWI,QAAQlB,EAAGrG,YAC/C5D,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQS,EAAWI,QAAQlB,EAAGnG,WAE/C9D,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQS,EAAWI,QAAQlB,EAAGtG,YAC/C3D,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQS,EAAWI,QAAQlB,EAAGjG,eAC/ChE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAGhG,OAC5BjE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG/F,QAC5BlE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG9F,MAC5BnE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG7F,OAC5BpE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG5F,OAC5BrE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAQL,EAAG3F,gBAC5BtE,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAOtK,EAAAC,EAAAC,cAACqF,EAAa,CAACjF,UAAW2J,EAAG1F,aAAcpD,YAAY,KAE/EnB,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SACbtK,EAAAC,EAAAC,cAACgI,EAAA,EAAG,CAACR,GAAI,CAAEM,QAAS,OACpBqB,eAAgB,aAEZrJ,EAAAC,EAAAC,cAACkL,EAAA,EAAU,CAACjC,KAAK,QACbnH,QAAS,kBAAK6I,EAAgBhJ,KAC9B7B,EAAAC,EAAAC,cAACmL,EAAApL,EAAQ,OAGbD,EAAAC,EAAAC,cAACkL,EAAA,EAAU,CAACjC,KAAK,QACbnH,QAAS,kBAAM4I,EAAgB/I,KAC/B7B,EAAAC,EAAAC,cAACoL,EAAArL,EAAU,WClDpBsL,EAPD,SAACzL,GACX,IAAM0L,EAAY1L,EAAMC,KACxB,OACIC,EAAAC,EAAAC,cAAA,MAAIuL,MAAO,CAACX,MAAO,QAASU,wCCIrB,SAASE,IAAgB,IAAAtL,EACAC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAhDuL,EAAUpL,EAAA,GAAEqL,EAAarL,EAAA,GAAAI,EACcN,mBAAS,MAAKQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAArDkL,EAAehL,EAAA,GAAEiL,EAAkBjL,EAAA,GAAAG,EACFX,qBAAUY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAA3C4I,EAAY3I,EAAA,GAAE8K,EAAe9K,EAAA,GAAAC,EACQb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAnD8K,EAAc5K,EAAA,GAAE6K,EAAiB7K,EAAA,GAAA8K,EACc7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAA7DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAE5CG,EAAc,SAACC,GACD,iBAAZA,GACAN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,oCAGhBwM,EAAU,UACNN,EACEjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,yCAIpB0M,EAAa,WACfR,EAAkB,OAEtB5K,oBAAU,WACNqL,KACD,IACH,IAAMA,EAAkB,WACpBnG,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,6CACHE,KAAK,SAACC,GACPC,QAAQC,IAAIF,EAASF,KAAK,IAC1B,IAAMuG,EAASrG,EAASF,KACxBwF,EAAce,KACblG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aA8C/BgE,EAAkB,SAAC/I,GAErBoE,YAAM,CACFC,OAAQ,SACRC,IAAK,4CAA4CwF,EAAW9J,GAAKyB,UAChE+C,KAAK,SAACC,GACPoG,MACCjG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAI/BiD,EAAkB,SAAChI,GACrB,IAAI+K,EAAWjB,EAAW9J,GAAKyB,QAC/BiD,QAAQC,IAAIqG,KAAKC,UAAUlD,IAC3B3D,YAAM,CACFC,OAAQ,QACRC,IAAK,4CAA4CyG,EAAS,IAC1DxG,KAAMwD,IACLvD,KAAK,SAACC,GACPoG,MACCjG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCkF,EAAmB,MACnBW,KAEE3C,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,MAEvF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACoC,EAAOC,GAE3B,IADA,IAAMoI,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GACnB/E,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCkI,EAAgBrI,EAAMG,IAAMF,EAAOE,GACnC0B,QAAQC,IAAI,IAAM9B,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKkI,EAAgB1H,QAEvE0G,EAAgBgB,IAEdlC,EAAkB,SAAChJ,GACrBiK,EAAmBjK,GACnBkK,EAAgBJ,EAAW9J,KAEzBkI,EAAoB,WACtB+B,EAAmB,MACnBC,EAAgB,OAEpB,YAAmBvI,IAAfmI,EACQ3L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAKRhN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACEF,EAAAC,EAAAC,cAAC+M,EAAA,EAAK,CAAC9D,KAAK,QAAQhB,UAAW+E,IAAOC,cAAY,EAACzF,GAAI,CAAC0F,SAAU,MAC9DpN,EAAAC,EAAAC,cAACmN,EAAA,EAAS,KACNrN,EAAAC,EAAAC,cAACgK,EAAA,EAAQ,KACLlK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,QACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,UACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,gBACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,iBACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,KACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,MACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,OACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,UACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,gBACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,UACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,QACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,eACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,SACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,kBACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,aACvBtK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QAAM,YAG/BtK,EAAAC,EAAAC,cAACoN,EAAA,EAAS,KAEL3B,EAAWjK,IAAI,SAAC8C,EAAW3C,GACxB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KAGLoK,IAAoBjK,EAClB5B,EAAAC,EAAAC,cAACqN,EAAoB,CAAC3L,QAASA,EAASgI,aAAcA,EAAcC,gBAAiBA,EAAiBC,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IACrM/J,EAAAC,EAAAC,cAACsN,EAAY,CAAC5L,QAASA,EAAS4C,UAAWA,EAAWoG,gBAAiBA,EAAiBC,gBAAiBA,OAMtHc,EAAWnK,OAAS,EAAI8K,EAAY,SAAW,OAGxDtM,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACuN,EAAa,CAACzI,aAtIF,SAACR,GAClB+B,QAAQC,IAAIqG,KAAKC,UAAUtI,IAEtBmH,EAAW+B,KAAK,SAACC,GAAE,OAAKA,EAAGrK,UAAYkB,EAAUlB,UAmBlDgJ,EAAY,iBAjBZrG,YAAM,CACFC,OAAQ,OACRC,IAAK,4CACLC,KAAM5B,IACL6B,KAAK,SAACC,GACPoG,MACCjG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjC6F,QAqHAzM,EAAAC,EAAAC,cAAA,UAAQ8B,QAxJS,WACrBuE,QAAQC,IAAImF,GACZ1F,YAAM,CACFC,OAAQ,OACRC,IAAK,4CACLC,KAAMuF,IACLtF,KAAK,SAACC,GACPoG,MACCjG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,uCAyIL,kBACjC7B,EACAI,GC7ME,SAAS0B,EAAchO,GAIlC,IAAAM,EAEkCC,mBAASP,EAAMsG,MAAK7F,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA/C2N,EAASxN,EAAA,GAAcA,EAAA,GAI9B,OAFAgG,QAAQC,IAAIuH,GAGR/N,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACKM,OAAOwN,KAAKD,EAAU,IAAIrM,IAAI,SAACE,GAC5B,OACI5B,EAAAC,EAAAC,cAAA,UAAK0B,MAIjB5B,EAAAC,EAAAC,cAAA,aACK6N,EAAUrM,IAAI,SAACuM,EAAUrM,GAEtB,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKD,GACRpB,OAAOmE,OAAOsJ,GAAUvM,IAAI,SAACwM,EAAWC,GACrC,IAAI9L,EAAM,KAiBV,OAhBIvC,EAAMsO,SAAWxM,EACjBS,EAAMrC,EAAAC,EAAAC,cAAA,SAAOsC,KAAMhC,OAAOwN,KAAKlO,EAAMuO,UAAUF,GAASpM,KAAMjC,EAAMuO,SAASF,GAASnL,MAAOkL,IAG3E,OAAdA,EACA7L,EAAOrC,EAAAC,EAAAC,cAAA,iBAEmB,kBAAdgO,GAA0BA,GACtC3H,QAAQC,WAAW0H,GACnB7L,EAAOrC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC4N,EAAa,CAAC1H,KAAM8H,MAEN,kBAAdA,IACZ7L,EAAOrC,EAAAC,EAAAC,cAAA,UAAKgO,IAIb7L,SClCpB,SAASqJ,IAAgB,IAAAtL,EAEAC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAhDuL,EAAUpL,EAAA,GAAEqL,EAAarL,EAAA,GAEhCc,oBAAU,WACNqL,KACD,IAEH,IAAMA,EAAkB,WACpBzG,YAAM,CACFC,OAAQ,MACRC,IAAI,gDACHE,KAAK,SAACC,GACP,IAAMqG,EAASrG,EAASF,KACxBwF,EAAce,KACblG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAKrC,YAAmBpD,IAAfmI,EACQ3L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAMRhN,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,aAEXtO,EAAAC,EAAAC,cAAC4N,EAAa,CAAC1H,KAAMuF,KCnCjC,IAoHe4C,EApHQ,SAACzO,GAEtB,IAAM0O,EAAe1O,EAAM2O,UAqB3BrO,EACoCC,mBAnB3B,CACLqO,KAAM,KACNC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACdC,QAAS,KACTC,OAAQ,KACRC,iBAAkB,GAClBC,YAAa,KACbC,KAAM,GACNC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,kBAAmB,OAKwChP,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAxDoP,EAAUjP,EAAA,GAAEkP,EAAalP,EAAA,GA0BxBuE,EAAmB,SAACpC,IAZH,SAACgC,EAAOC,GAE7B,IADA,IAAM+K,EAAalP,OAAA0C,EAAA,EAAA1C,CAAA,GAAOgP,GACjB3K,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChC6K,EAAchL,EAAMG,IAAMF,EAAOE,GAEnC4K,EAAcC,GAYdpN,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,SAO5F,OACEhD,EAAAC,EAAAC,cAAA,QAAM6E,SAhCa,SAACrC,GAEpBA,EAAMS,iBAENrD,EAAM6P,cAAcH,GAEpBC,EA9BK,CACLf,KAAM,KACNC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACdC,QAAS,KACTC,OAAQ,KACRC,iBAAkB,GAClBC,YAAa,KACbC,KAAM,GACNC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,kBAAmB,SA4CfvP,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,mBAAiB,qBAChCjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,kBAAkBT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOwM,EAAWb,gBAAiBlM,SAAUqC,IAEtG9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,kBACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,OAAOiB,MAAOwM,EAAWZ,SAAUnM,SAAUqC,IAEzE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,gBAAc,kBAC7BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,eAAeT,KAAK,OAAOiB,MAAOwM,EAAWX,aAAcpM,SAAUqC,IAEjF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,aACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAOwM,EAAWV,QAASrM,SAAUqC,IAEvE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,iBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,SAASiB,MAAOwM,EAAWT,OAAQtM,SAAUqC,IAEvE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,UACrBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAOwM,EAAWN,KAAMzM,SAAUqC,IAEjE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,OAAOiB,MAAOwM,EAAWL,SAAU1M,SAAUqC,IAEzE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,eAC1BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOwM,EAAWJ,UAAW3M,SAAUqC,IAEzF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOwM,EAAWH,SAAU5M,SAAUqC,IAEvF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,cAC1BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,eAAeC,SAAUqC,GACpC9E,EAAAC,EAAAC,cAAA,UAAQ2P,UAAU,EAAM7M,MAAO,MAAK,OAEnCwL,EAAa9M,IAAI,SAACoO,EAAUjO,GAC3B,OACE7B,EAAAC,EAAAC,cAAA,UAAQ8C,MAAO8M,EAASC,MAAOD,EAASE,WAK9ChQ,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,kBAAgB,yBAC/BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,qBACXxC,EAAAC,EAAAC,cAAA,UAAQ2P,UAAU,EAAM7M,MAAO,MAAK,OACnCwL,EAAa9M,IAAI,SAACoO,EAAUjO,GAC3B,OACE7B,EAAAC,EAAAC,cAAA,UAAQ8C,MAAO8M,EAASC,MAAOD,EAASE,WAK9ChQ,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SCtHtB,SAASkO,EAAsBnQ,GAAO,IAAAM,EACfC,mBAAS,CAAC6P,UAAW,KAAMC,SAAU,OAAM5P,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAtEgQ,EAAS7P,EAAA,GAAE8P,EAAY9P,EAAA,GAAAI,EACIN,mBAASP,EAAMkP,kBAAiBnO,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA3D2P,EAASzP,EAAA,GAAE0P,EAAY1P,EAAA,GAMxB2P,EAAuB,SAAC9N,GAC5B,IAAMb,EAAMa,EAAME,OAAOC,aAAa,WAChCF,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAaJ,EAAME,OAAOI,MAC5ByN,EAAQjQ,OAAA0C,EAAA,EAAA1C,CAAA,GAAO8P,EAAUzO,IAC7B4O,EAAS9N,GAAaG,EACtB,IAAI4N,EAAYlQ,OAAA2B,EAAA,EAAA3B,CAAO8P,GACvB/J,QAAQC,IAAI,eAAgB3E,GAC5B6O,EAAa7O,GAAO4O,EACpBlK,QAAQC,IAAI,eAAgBkK,GAC5BH,EAAaG,GACb5Q,EAAMwC,eAAe,mBAAoBoO,IAGrCC,EAAoB,SAACjO,GACzB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAaJ,EAAME,OAAOI,MAC1ByN,EAAQjQ,OAAA0C,EAAA,EAAA1C,CAAA,GAAO4P,GACrBK,EAAS9N,GAAaG,EACtBuN,EAAaI,IAkBf,GAAIH,EACA,OACItQ,EAAAC,EAAAC,cAAA,aACQF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACHoQ,EAAU5O,IAAI,SAACkP,EAAOhP,GACnB,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKD,GACL5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO2Q,QAASjP,EAASY,KAAK,YAAYT,KAAK,OAAOiB,MAAO4N,EAAMV,UAAWzN,SAAU+N,KAC5FxQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO2Q,QAASjP,EAASY,KAAK,WAAWQ,MAAO4N,EAAMT,SAAU1N,SAAU+N,KAC9ExQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAjBnB,SAACJ,GACvB,IAAMkP,EAAStQ,OAAA2B,EAAA,EAAA3B,CAAO8P,GACtBQ,EAAU1O,OAAOR,EAAS,GAC1B2O,EAAaO,GACbhR,EAAMwC,eAAe,mBAAoBwO,GAaMC,CAAkBnP,KAAS,cAK9D5B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYQ,MAAOoN,EAAUF,UAAWnO,KAAK,OAAOU,SAAUkO,KAC9E3Q,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWQ,MAAOoN,EAAUD,SAAU1N,SAAUkO,KAChE3Q,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAjCP,SAACU,GACtBA,EAAMS,iBACN,IAAM2N,EAAS,GAAA1N,OAAA5C,OAAA2B,EAAA,EAAA3B,CAAO8P,GAAS,CAAEF,IACjCG,EAAaO,GACbT,EAAa,CAACH,UAAW,GAAIC,SAAU,KACvCrQ,EAAMwC,eAAe,mBAAoBwO,KA4BW,UC3D1D,IA8DeE,EA9De,SAAClR,GAAU,IAC9B8B,EAAgI9B,EAAhI8B,QAASgI,EAAuH9J,EAAvH8J,aAAc6E,EAAyG3O,EAAzG2O,UAAWwC,EAA8FnR,EAA9FmR,iBAAkBnH,EAA4EhK,EAA5EgK,qBAAsBC,EAAsDjK,EAAtDiK,kBAAoCzH,GAAkBxC,EAAnCkK,gBAAmClK,EAAlBwC,gBAC/GkN,EAAa5F,EACb/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACP7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,kBAAkBT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOwM,EAAWb,gBAAiBlM,SAAUqH,KAE1G9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOwM,EAAWZ,SAAUnM,SAAUqH,KAE5F9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,eAAeT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOwM,EAAWX,aAAcpM,SAAUqH,KAEpG9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAOwM,EAAWV,QAASrM,SAAUqH,KAE3E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,SAASiB,MAAOwM,EAAWT,OAAQtM,SAAUqH,KAE3E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,OAAOiB,MAAOwM,EAAWL,SAAU1M,SAAUqH,KAE7E9J,EAAAC,EAAAC,cAAC+P,EAAqB,CAACrG,aAAcA,EAActH,eAAgBA,EAAgB0M,iBAAkBQ,EAAWR,mBAEhHhP,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAOwM,EAAWN,KAAMzM,SAAUqH,KAErE9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOwM,EAAWJ,UAAW3M,SAAUqH,KAE7F9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOwM,EAAWH,SAAU5M,SAAUqH,KAE3F9J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,eAAeC,SAAUqH,GACpC9J,EAAAC,EAAAC,cAAA,UAAQ2P,UAAU,EAAM7M,MAAO,MAAK,OACnCyL,EAAU/M,IAAI,SAACoO,EAAUjO,GACxB,IACMqP,EAAczC,EADJ5M,GACuBkO,MAAQP,EAAWF,aAC1D,OACEtP,EAAAC,EAAAC,cAAA,UAAQ2P,SAAUqB,EAAYlO,MAAO8M,EAASC,MAAOD,EAASE,YAMtEhQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,oBAAoBC,SAAUqH,GACzC9J,EAAAC,EAAAC,cAAA,UAAQ2P,UAAU,EAAM7M,MAAO,MAAK,OACnCyL,EAAU/M,IAAI,SAACoO,EAAUjO,GACxB,IACMqP,EAAczC,EADJ5M,GACuBkO,MAAQP,EAAWD,kBAC1D,OACEvP,EAAAC,EAAAC,cAAA,UAAQ2P,SAAUqB,EAAYlO,MAAO8M,EAASC,MAAOD,EAASE,YAMtEhQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAKiP,EAAiBpP,KAAM,SACjD7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCAlCoH,EA1DO,SAACrR,GAAU,IACtB8B,EAA0D9B,EAA1D8B,QAAS4N,EAAiD1P,EAAjD0P,WAAY4B,EAAqCtR,EAArCsR,iBAAkBvG,EAAmB/K,EAAnB+K,gBACxChJ,EAAMD,EACNyP,EAAM7B,EA8BZ,OACIxP,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAKmR,EAAI1C,iBACT3O,EAAAC,EAAAC,cAAA,UAAKmR,EAAIzC,UACT5O,EAAAC,EAAAC,cAAA,UAAKmR,EAAIxC,cACT7O,EAAAC,EAAAC,cAAA,UAAKoR,OAAOD,EAAIvC,UAChB9O,EAAAC,EAAAC,cAAA,UAAKoR,OAAOD,EAAItC,SAChB/O,EAAAC,EAAAC,cAAA,UAAKmR,EAAIlC,UACTnP,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cArCU,SAACJ,GACnB,IAAMyR,EAAazR,EAAM0R,kBACzB,GAAID,EAEA,OAAIA,EAAW/P,OAAS,EAEhBxB,EAAAC,EAAAC,cAAA,aACQF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACHqR,EAAW7P,IAAI,SAACkP,EAAO/O,GACpB,OACI7B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK0Q,EAAMV,WACXlQ,EAAAC,EAAAC,cAAA,UAAK0Q,EAAMT,mBATnC,GAiCkB,CAACqB,kBAAmBH,EAAIrC,oBAE1ChP,EAAAC,EAAAC,cAAA,UAAKmR,EAAIpC,aACTjP,EAAAC,EAAAC,cAAA,UAAKoR,OAAOD,EAAInC,OAChBlP,EAAAC,EAAAC,cAAA,UAAKoR,OAAOD,EAAIjC,YAChBpP,EAAAC,EAAAC,cAAA,UAAKoR,OAAOD,EAAIhC,WAChBrP,EAAAC,EAAAC,cAAA,UAAKmR,EAAII,UAAYJ,EAAII,UAAUzB,OAAS,OAC5ChQ,EAAAC,EAAAC,cAAA,UAAKmR,EAAIK,eAAiBL,EAAIK,eAAe1B,OAAS,OAEtDhQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAK6I,EAAgBhJ,KAAK,SAE/C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMoP,EAAiBvP,KAAK,oBC7C9C,SAAS8P,IAAiB,IAAAvR,EACCC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAlDwR,EAAWrR,EAAA,GAAEsR,EAActR,EAAA,GAAAI,EACAN,wBAASmD,GAAU3C,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA9C8N,EAAS5N,EAAA,GAAEiR,EAAYjR,EAAA,GAAAG,EACkBX,mBAAS,MAAKY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAvD+Q,EAAgB9Q,EAAA,GAAE+Q,EAAmB/Q,EAAA,GAAAC,EACJb,mBAAS,CAC7CqO,KAAM,KACNC,gBAAiB,GACjBC,SAAU,GACVC,aAAc,GACdC,QAAS,KACTC,OAAQ,KACRC,iBAAkB,GAClBC,YAAa,KACbC,KAAM,GACNC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,kBAAmB,OACrBnO,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAfK0I,EAAYxI,EAAA,GAAE2K,EAAe3K,EAAA,GAAA8K,EAgBQ7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAAnDF,EAAcG,EAAA,GAAEF,EAAiBE,EAAA,GAAA8F,EACc5R,mBAAS,MAAK6R,EAAA1R,OAAAC,EAAA,EAAAD,CAAAyR,EAAA,GAA7D7F,EAAmB8F,EAAA,GAAE7F,EAAsB6F,EAAA,GAAAC,EACF9R,mBAAS,MAAK+R,EAAA5R,OAAAC,EAAA,EAAAD,CAAA2R,EAAA,GAAvDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAkB5C/Q,oBAAU,WACNkR,IACAC,KACD,IAEH,IAAMA,EAAiB,WACnBjM,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,4CACHE,KAAK,SAACC,GACPwL,EAAaxL,EAASF,QACrBK,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/B2L,EAAmB,WACrBhM,QAAQC,IAAI,4BACZ8L,EAAoBtS,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,qBAChCkG,YAAM,CACFC,OAAQ,MACRC,IAAI,uDACHE,KAAK,SAACC,GACP,IAAMmM,EAAUnM,EAASF,KACzByL,EAAeY,GACfH,EAAoB,QACnB7L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAoD/BwK,EAAmB,SAACvP,GACtB,IAAM6Q,EAAQd,EAAY/P,GAAW,KACrCoE,YAAM,CACFC,OAAQ,SACRC,IAAI,sDAAsDuM,EAAM,MAC/DrM,KAAK,SAACC,GACPiM,MACC9L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/BqK,EAAmB,SAACpP,GACtB,IAxHiB0K,EAwHboG,EAASf,EAAY/P,GAAW,KAChC+P,EAAYlE,KAAK,SAAC2D,GAAG,OAAKA,EAAI3C,OAASiE,KAEvCX,EAAoB,MACpB/L,YAAM,CACFC,OAAQ,QACRC,IAAI,sDAAsDwM,EAAO,IACjEvM,KAAMwD,IACLvD,KAAK,SAACC,GACPiM,MACC9L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aArIrB,kBADC2F,EA4ID,gBA1IZN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,kCAGC,UAAZwM,GACLN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,yCAyIlB+J,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACE,EAAMQ,GAC1B,IAAM+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBvK,GAAQQ,EACxB+I,EAAgBgB,GAChBxG,QAAQC,IAAIoD,IAGViB,EAAkB,SAAChJ,GACrBmQ,EAAoBnQ,GACpBkK,EAAgB6F,EAAY/P,KAE1BkI,EAAoB,WACtBiI,EAAoB,MACpBjG,EAAgB,OAGpB,YAAoBvI,IAAhBoO,QAA2CpO,IAAdiL,EACrBzO,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAKRhN,EAAAC,EAAAC,cAAA,OAAK0S,MAAM,aACP5S,EAAAC,EAAAC,cAAC2S,EAAa,MACd7S,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACbtO,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kCAGRF,EAAAC,EAAAC,cAAA,aAEK0R,EAAYlQ,IAAI,SAAC8N,EAAY3N,GAC1B,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,CAACI,IAAKD,GAGXmQ,IAAqBnQ,EACnB5B,EAAAC,EAAAC,cAAC4S,EAAqB,CAAClR,QAASA,EAASgI,aAAcA,EAAc6E,UAAWA,EAAWwC,iBAAkBA,EAAkBnH,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IAC9N/J,EAAAC,EAAAC,cAAC6S,EAAa,CAACnR,QAASA,EAAS4N,WAAYA,EAAY4B,iBAAkBA,EAAkBvG,gBAAiBA,SAQnIwH,EACDrS,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC8S,EAAc,CAACrD,cAjJF,SAACH,GACnB,IAAMyD,EAASrB,EAAYA,EAAYpQ,OAAS,GAAS,KACzDgO,EAAiB,KAAIyD,EAAS,EAC9BhN,YAAM,CACFC,OAAQ,OACRC,IAAI,sDACJC,KAAMoJ,IACLnJ,KAAK,SAACC,GACPiM,MACC9L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAzEjCqF,EAAkB,OA6MgCwC,UAAWA,IACzDzO,EAAAC,EAAAC,cAAA,UAAQ8B,QAnKU,WACtBiE,YAAM,CACFC,OAAQ,OACRC,IAAI,gBACJC,KAAMwL,IACLvL,KAAK,SAACC,GACPiM,MACC9L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,uCAqJJ,kBAClC7B,EACAI,GC1Pb,IA8De8G,EA9DK,SAACpT,GAEIA,EAAM6L,WAA7B,IAWAvL,EACgCC,mBATvB,CACL8S,SAAU,GACVC,kBAAc5P,EACdgB,UAAW,GACXD,aAAc,KAKsChE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA/CiT,EAAO9S,EAAA,GAAE+S,EAAU/S,EAAA,GAqC1B,OACEP,EAAAC,EAAAC,cAAA,QAAM6E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAEJrD,EAAMyT,WAAWF,GAEjBC,EApBG,CACLH,SAAU,GACVC,kBAAc5P,EACdgB,UAAW,GACXD,aAAc,OA6CVvE,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,UACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,OAAOoD,UAAU,KAAKC,UAAU,EAAMpC,MAAOqQ,EAAQF,SAAU1Q,SAdxF,SAACC,IAbH,SAACgC,EAAOC,GAE7B,IADA,IAAM6O,EAAUhT,OAAA0C,EAAA,EAAA1C,CAAA,GAAO6S,GACdxO,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAC9B2O,EAAW9O,EAAMG,IAAMF,EAAOE,GAGhCyO,EAAWE,GAYblR,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,WAYzFhD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SC3ChB0R,GAjBY,SAAC3T,GAAU,IAC1B8B,EAAkH9B,EAAlH8B,QAASgI,EAAyG9J,EAAzG8J,aAAc8J,EAA2F5T,EAA3F4T,cAAe5J,EAA4EhK,EAA5EgK,qBAAsBC,EAAsDjK,EAAtDiK,kBAC9D4J,GADoH7T,EAAnCkK,gBAAmClK,EAAlBwC,eAC9FsH,GACJ/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOS,KAAK,WAAWgI,aAAcmJ,EAAER,SAAU1Q,SAAUqH,KAC3E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,SAASS,KAAK,eAAegI,aAAcmJ,EAAEP,aAAc3Q,SAAUqH,KAErF9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAASC,QAAS,WAAK0R,EAAc7R,KAAM,SAC5D7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCOpC6J,GAlBI,SAAC9T,GAAU,IACnB8B,EAAoD9B,EAApD8B,QAASyR,EAA2CvT,EAA3CuT,QAASQ,EAAkC/T,EAAlC+T,cAAehJ,EAAmB/K,EAAnB+K,gBAClChJ,EAAMD,EACN+R,EAAIN,EAGV,OACIrT,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAKyT,EAAER,UACPnT,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAK6I,EAAgBhJ,KAAK,SAE/C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAM6R,EAAchS,KAAK,8BCD3C,SAASiS,KAAc,IAAA1T,EAChBC,wBAASmD,GAAb7C,GAAuBH,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAvB,GACkBC,wBAASmD,IAAU3C,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA5CoT,EAAQlT,EAAA,GAAEmT,EAAWnT,EAAA,GAAAG,EACQX,wBAASmD,GAAUvC,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAhD2K,EAAU1K,EAAA,GAAE2K,EAAa3K,EAAA,GAAAC,EACUb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAjD+S,EAAa7S,EAAA,GAAE8S,EAAgB9S,EAAA,GAAA8K,EACE7L,mBAAS,CAC7C8S,SAAU,GACV3O,UAAW,KACb2H,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAHKtC,EAAYuC,EAAA,GAAEJ,EAAeI,EAAA,GAAA8F,EAKQ5R,mBAAS,MAAK6R,EAAA1R,OAAAC,EAAA,EAAAD,CAAAyR,EAAA,GAAnDjG,EAAckG,EAAA,GAAEjG,EAAiBiG,EAAA,GAAAC,EACc9R,mBAAS,MAAK+R,EAAA5R,OAAAC,EAAA,EAAAD,CAAA2R,EAAA,GAA7D/F,EAAmBgG,EAAA,GAAE/F,EAAsB+F,EAAA,GAAA+B,EACF9T,mBAAS,MAAK+T,EAAA5T,OAAAC,EAAA,EAAAD,CAAA2T,EAAA,GAAvD9B,EAAgB+B,EAAA,GAAE9B,EAAmB8B,EAAA,GAEtC9H,EAAc,SAACC,GACD,iBAAZA,EACAN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,kCAGXwM,EAAU,UACfN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,yCAIlB0M,EAAa,WACfR,EAAkB,OAGtB5K,oBAAU,WAENgT,IACAC,KACD,IAEH,IAAMA,EAAa,WACf/N,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,6CACLE,KAAK,SAACC,GACLC,QAAQC,IAAIF,EAASF,KAAK,IAC1B,IAAMuG,EAASrG,EAASF,KACxBwF,EAAce,KACblG,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/ByN,EAAgB,WAClB9N,QAAQC,IAAI,4BACZ8L,EAAoBtS,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,qBAChCkG,YAAM,CACFC,OAAQ,MACRC,IAAI,2CACHE,KAAK,SAACC,GACP,IAAMiO,EAAUjO,EAASF,KACzB4N,EAAYO,GACZjC,EAAoB,QACnB7L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAwC/BiN,EAAgB,SAAChS,GAEnBoE,YAAM,CACFC,OAAQ,SACRC,IAAK,0CAA4C4N,EAASlS,GAAKsR,WAC9D9M,KAAK,SAACC,GACL0N,EAAYK,OACb5N,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/B8M,EAAgB,SAAC7R,GACnB,IAAI+K,EAAWmH,EAASlS,GAAKsR,SAC7B5M,QAAQC,IAAIqG,KAAKC,UAAUlD,IAC3B3D,YAAM,CACFC,OAAQ,QACRC,IAAK,0CAA0CyG,EAAS,IACxDxG,KAAMwD,IACLvD,KAAK,SAACC,GACL0N,EAAYK,OACb5N,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCsN,EAAiB,MACjBzH,KAGE3C,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,MAEvF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACoC,EAAOC,GAE3B,IADA,IAAMoI,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GACnB/E,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCkI,EAAgBrI,EAAMG,IAAMF,EAAOE,GACnC0B,QAAQC,IAAI,IAAM9B,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKkI,EAAgB1H,QAEvE0G,EAAgBgB,IAGdlC,EAAkB,SAAChJ,GACrBqS,EAAiBrS,GACjBkK,EAAgBgI,EAASlS,KAEvBkI,EAAoB,WACtBmK,EAAiB,MACjBnI,EAAgB,OAGpB,YAAiBvI,IAAbuQ,QAAyCvQ,IAAfmI,EAClB3L,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAKJhN,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,aACftO,EAAAC,EAAAC,cAACsU,EAAS,MACNxU,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACbtO,EAAAC,EAAAC,cAACuU,GAAA,EAAc,CAACtM,UAAW+E,KACvBlN,EAAAC,EAAAC,cAAC+M,EAAA,EAAK,CAACvF,GAAI,CAAE0F,SAAU,KAAOjE,KAAK,SAC/BnJ,EAAAC,EAAAC,cAACmN,EAAA,EAAS,KACNrN,EAAAC,EAAAC,cAACgK,EAAA,EAAQ,KACLlK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,iCAIZF,EAAAC,EAAAC,cAACoN,EAAA,EAAS,KACLyG,EAASrS,IAAI,SAAC2R,EAASxR,GACpB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,CAACI,IAAKD,GAGPqS,IAAkBrS,EACZ5B,EAAAC,EAAAC,cAACwU,GAAkB,CAAC9S,QAASA,EAASgI,aAAcA,EAAc+B,WAAYA,EAAY+H,cAAeA,EAAe5J,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IACvN/J,EAAAC,EAAAC,cAACyU,GAAU,CAAC/S,QAASA,EAASyR,QAASA,EAASQ,cAAeA,EAAehJ,gBAAiBA,OAKpHkJ,EAASvS,OAAS,EAAI8K,EAAY,SAAW,SAK9DtM,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACbtO,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,aAGRF,EAAAC,EAAAC,cAAA,aAEK6T,EAASrS,IAAI,SAAC2R,EAASxR,GACpB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,CAACI,IAAKD,GAGPqS,IAAkBrS,EACZ5B,EAAAC,EAAAC,cAACwU,GAAkB,CAAC9S,QAASA,EAASgI,aAAcA,EAAc+B,WAAYA,EAAY+H,cAAeA,EAAe5J,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IACvN/J,EAAAC,EAAAC,cAACyU,GAAU,CAAC/S,QAASA,EAASyR,QAASA,EAASQ,cAAeA,EAAehJ,gBAAiBA,OAKpHkJ,EAASvS,OAAS,EAAI8K,EAAY,SAAW,OAGrD+F,EAEDrS,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAC0U,EAAW,CAACrB,WApJN,SAACF,GAChB,IAAMJ,EAASc,EAASA,EAASvS,OAAS,GAAS,KACnD6R,EAAc,KAAIJ,EAAS,EAC3BhN,YAAM,CACFC,OAAQ,OACRC,IAAI,0CACJC,KAAMiN,IACLhN,KAAK,SAACC,GACP+N,MACC5N,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjC6F,OAqIQzM,EAAAC,EAAAC,cAAA,UAAQ8B,QAtKG,WACnBiE,YAAM,CACFC,OAAQ,OACRC,IAAK,aACLC,KAAM2N,IACL1N,KAAK,SAACC,GACL+N,MACD5N,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,uCAwJH,kBAC/B7B,EACAI,GC3PjB,IAuCeyI,GAvCK,WAAM,IAAAzU,EACUC,qBAAUE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAnC0U,EAAQvU,EAAA,GAAEwU,EAAWxU,EAAA,GAEtBkF,EAAkB,SAAlBA,EAAmBuP,GACrBzO,QAAQC,IAAIwO,GACK,sBAAbA,EAAkCD,EAAY/U,EAAAC,EAAAC,cAAC+U,EAAgB,CAACxP,gBAAiBA,KAC/D,sBAAbuP,GAAkCD,EAAY/U,EAAAC,EAAAC,cAAC+U,EAAgB,CAACxP,gBAAiBA,MAK9F,OACIzF,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,OACXtO,EAAAC,EAAAC,cAAA,UAAQoO,UAAU,cACdtO,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,uBAAqB,qBAGhFzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,MAAkB,sBAG7DzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,MAAkB,oBAG7DzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,MAAkB,eAG7DzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,MAAkB,gBAG7DzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,MAAkB,sBAG5DqP,KCGFI,GAvCE,SAACpV,GACd,IAAM2F,EAAkB3F,EAAM2F,gBAC9BrF,EACwBC,mBACpB,CACIqF,SAAU,GACVE,MAAO,KAEdrF,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GALUG,EAAA,GAASA,EAAA,GAgBpB,OACIP,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,OACXtO,EAAAC,EAAAC,cAAA,UAAQoO,UAAU,cACdtO,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,qBAC/BjF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMyD,EAAgB,iBAAe,mBAG5DzF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,8BAENF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,uBACNF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMyD,EAAgB,cAAY,mBC+C1D0P,GA3EE,SAACrV,GAEd,IAYFM,EAC0BC,mBAZjB,CACL+U,KAAM,EACN1P,SAAU,GACVC,SAAU,GACV0P,WAAY,EACZzP,MAAO,KAOoCrF,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAtCyF,EAAItF,EAAA,GAAEuF,EAAOvF,EAAA,GA2BduE,EAAmB,SAACpC,IAbH,SAACgC,EAAOC,GAE7B,IADE,IAAM2Q,EAAO9U,OAAA0C,EAAA,EAAA1C,CAAA,GAAQqF,GACdhB,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAC9ByQ,EAAQ5Q,EAAMG,IAAMF,EAAOE,GAG7BiB,EAAQwP,GAYVhT,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,SAO/F,OACEhD,EAAAC,EAAAC,cAAA,QAAM6E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAEJrD,EAAMyV,QAAQ1P,GAEdC,EAvBG,CACLsP,KAAM,EACN1P,SAAU,GACVC,SAAU,GACV0P,WAAY,EACZzP,MAAO,OA+CH5F,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,aACnBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAO0C,GAAG,OAAOnD,KAAK,OAAOiB,MAAO6C,EAAKuP,KAAM3S,SAAUqC,IAEvE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,OAAOiB,MAAO6C,EAAKH,SAAUjD,SAAUqC,IAEnF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAW0C,GAAG,WAAWnD,KAAK,OAAOiB,MAAO6C,EAAKF,SAAUlD,SAAUqC,IAEnF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,cAAY,gBACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,aAAa0C,GAAG,aAAanD,KAAK,SAASiB,MAAO6C,EAAKwP,WAAY5S,SAAUqC,IAE3F9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,SAAO,WACpBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQ0C,GAAG,QAAQnD,KAAK,OAAOiB,MAAO6C,EAAKD,MAAOnD,SAAUqC,IAE1E9E,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SCrDhByT,GApBS,SAAC1V,GAAU,IACvB8B,EAA8F9B,EAA9F8B,QAASgI,EAAqF9J,EAArF8J,aAAc6L,EAAuE3V,EAAvE2V,WAAY3L,EAA2DhK,EAA3DgK,qBAAsBC,EAAqCjK,EAArCiK,kBAC3D2L,GADgG5V,EAAlBwC,eAC1EsH,GACJ/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,SAASS,KAAK,OAAOgI,aAAckL,EAAEN,KAAM3S,SAAUqH,KACrE9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOS,KAAK,WAAWgI,aAAckL,EAAEhQ,SAAUjD,SAAUqH,KAC3E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,OAAOS,KAAK,WAAWgI,aAAckL,EAAE/P,SAAUlD,SAAUqH,KAC3E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,SAASS,KAAK,aAAagI,aAAckL,EAAEL,WAAY5S,SAAUqH,KACjF9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO6B,KAAK,QAAQS,KAAK,QAAQgI,aAAckL,EAAE9P,MAAOnD,SAAUqH,KAEtE9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAASC,QAAS,WAAQyT,EAAW5T,KAAM,SAC5D7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCiCpC4L,GA1CC,SAAC7V,GAAU,IACf8B,EAA8C9B,EAA9C8B,QAASiE,EAAqC/F,EAArC+F,KAAM+P,EAA+B9V,EAA/B8V,WAAY/K,EAAmB/K,EAAnB+K,gBAC7BhJ,EAAMD,EACN8T,EAAI7P,EAGV,OACI7F,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACZoL,EAAEN,MAEPpV,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACZoL,EAAEhQ,UAEP1F,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACZoL,EAAEL,YAEPrV,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACZoL,EAAE9P,OAEP5F,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,SACbtK,EAAAC,EAAAC,cAACgI,EAAA,EAAG,CAACR,GAAI,CAAEM,QAAS,OACpBqB,eAAgB,aAEZrJ,EAAAC,EAAAC,cAACkL,EAAA,EAAU,CAACjC,KAAK,QACbnH,QAAS,kBAAK6I,EAAgBhJ,KAC9B7B,EAAAC,EAAAC,cAACmL,EAAApL,EAAQ,OAGbD,EAAAC,EAAAC,cAACkL,EAAA,EAAU,CAACjC,KAAK,QACbnH,QAAS,kBAAM4T,EAAW/T,KAC1B7B,EAAAC,EAAAC,cAACoL,EAAArL,EAAU,kBC3BpB,SAAS4V,KAAW,IAAAzV,EACLC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAtC0V,EAAKvV,EAAA,GAAEwV,EAAQxV,EAAA,GAAAI,EACcN,mBAAS,MAAKQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA3CqV,EAAUnV,EAAA,GAAEoV,EAAapV,EAAA,GAAAG,EACQX,mBAAS,CAC7C+U,KAAM,EACN1P,SAAU,GACVC,SAAU,GACV0P,WAAY,EACZzP,MAAO,KACT3E,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GANK4I,EAAY3I,EAAA,GAAE8K,EAAe9K,EAAA,GAAAC,EAQQb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAnD8K,EAAc5K,EAAA,GAAE6K,EAAiB7K,EAAA,GAAA8K,EACc7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAA7DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GAE5CG,EAAc,SAACC,GAMjB,GALgB,iBAAZA,GACAN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,8BAGhBwM,EAAU,QACN,OAAOvM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,wCAGzB0M,EAAa,WACfR,EAAkB,OAGtB5K,oBAAU,WACN0U,EAASG,MACV,IAEH,IAAMA,EAAa,WACf3P,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,wCACHE,KAAK,SAACC,GACP,IAAM6P,EAAQ7P,EAASF,KACvB2P,EAASI,KACR1P,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAiD/BgP,EAAa,SAAC/T,GAEhBoE,YAAM,CACFC,OAAQ,SACRC,IAAK,uCAAyC2P,EAAMjU,GAAKuT,OACxD/O,KAAK,SAACC,GACLyP,EAASG,OACVzP,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/B6O,EAAa,SAAC5T,GAChB,IAAI+K,EAAWkJ,EAAMjU,GAAKuT,KAC1B7O,QAAQC,IAAIqG,KAAKC,UAAUlD,IAC3B3D,YAAM,CACFC,OAAQ,QACRC,IAAK,uCAAuCyG,EAAS,IACrDxG,KAAMwD,IACLvD,KAAK,SAACC,GACLyP,EAASG,OACVzP,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCqP,EAAc,MACdxJ,KAGE3C,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,MAAwBW,EAAME,OAAOG,QAAWL,EAAME,OAAOI,MAEvF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACoC,EAAOC,GAE3B,IADA,IAAMoI,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GACnB/E,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCkI,EAAgBrI,EAAMG,IAAMF,EAAOE,GACnC0B,QAAQC,IAAI,IAAM9B,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKkI,EAAgB1H,QAEvE0G,EAAgBgB,IAGdlC,EAAkB,SAAChJ,GACrBoU,EAAcpU,GACdkK,EAAgB+J,EAAMjU,KAEpBkI,EAAoB,WACtBkM,EAAc,MACdlK,EAAgB,OAGpB,YAAcvI,IAAVsS,EACQ9V,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAMRhN,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,aACXtO,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACjBtO,EAAAC,EAAAC,cAACuU,GAAA,EAAc,CAACtM,UAAW+E,KACvBlN,EAAAC,EAAAC,cAAC+M,EAAA,EAAK,CAACvF,GAAI,CAAE0F,SAAU,KAAOjE,KAAK,SAC/BnJ,EAAAC,EAAAC,cAACmN,EAAA,EAAS,KACNrN,EAAAC,EAAAC,cAACgK,EAAA,EAAQ,KACLlK,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,iBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,wBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,uBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,yBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAACC,MAAM,QACbtK,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAACmK,EAAA,EAAS,CAAC+L,OAAO,SACdpW,EAAAC,EAAAC,cAAA,wBAIZF,EAAAC,EAAAC,cAACoN,EAAA,EAAS,KAETwI,EAAMpU,IAAI,SAACmE,EAAMhE,GACd,IAAMD,EAAUC,EAChB,OAEImU,IAAepU,EACL5B,EAAAC,EAAAC,cAACmW,GAAe,CAACzU,QAASA,EAASgI,aAAcA,EAAc6L,WAAYA,EAAY3L,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IACtL/J,EAAAC,EAAAC,cAACoW,GAAO,CAAC1U,QAASA,EAASiE,KAAMA,EAAM+P,WAAYA,EAAY/K,gBAAiBA,MAKjGiL,EAAMtU,OAAS,EAAI8K,EAAY,SAAW,SAKvDtM,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACqW,GAAQ,CAAChB,QA/IE,SAAC1P,GACbU,QAAQC,IAAIqG,KAAKC,UAAUjH,IAEtBiQ,EAAMpI,KAAK,SAAC8I,GAAC,OAAKA,EAAE9Q,WAAaG,EAAKH,WAmBvC4G,EAAY,iBAjBZrG,YAAM,CACFC,OAAQ,OACRC,IAAK,uCACLC,KAAMP,IACLQ,KAAK,SAACC,GACL4P,MACDzP,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjC6F,QA8HJzM,EAAAC,EAAAC,cAAA,UAAQ8B,QAlKQ,WAChBuE,QAAQC,IAAIsP,GACZ7P,YAAM,CACFC,OAAQ,OACRC,IAAK,uCACLC,KAAM0P,IACLzP,KAAK,SAACC,GACL4P,MACDzP,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,uCAmJd,kBAC5B7B,EACAI,GC/NT,IA8GeqK,GA9GI,SAAC3W,GAElB,IAkBAM,EAC4BC,mBAlBnB,CACLqW,MAAO,KACPC,OAAQ,GACRC,MAAO,GACPC,IAAK,GACL3H,KAAM,GACN4H,KAAM,GACNC,OAAQ,GACRC,cAAe,GACfC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXhE,SAAU,GACViE,gBAAiB,KAK8B7W,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA5CiX,EAAM9W,EAAA,GAAE+W,EAAS/W,EAAA,GA4BhBuE,EAAmB,SAACpC,IAbH,SAACgC,EAAOC,GAE7B,IADA,IAAM4S,EAAS/W,OAAA0C,EAAA,EAAA1C,CAAA,GAAO6W,GACbxS,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChC0S,EAAU7S,EAAMG,IAAMF,EAAOE,GAC7B0B,QAAQC,IAAI,IAAM9B,EAAMG,GAAK,KAAOF,EAAOE,GAAK,KAElDyS,EAAUC,GAYVjV,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,SAO5F,OACEhD,EAAAC,EAAAC,cAAA,QAAM6E,SAjCa,SAACrC,GAEpBA,EAAMS,iBAENrD,EAAM0X,UAAUH,GAEhBC,EA9BK,CACLZ,MAAO,KACPC,OAAQ,GACRC,MAAO,GACPC,IAAK,GACL3H,KAAM,GACN4H,KAAM,GACNC,OAAQ,GACRC,cAAe,GACfC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXhE,SAAU,GACViE,gBAAiB,OA8CbpX,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,SAAO,eACtBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQT,KAAK,OAAOoD,UAAU,MAAMnC,MAAOqU,EAAOT,MAAOnU,SAAUqC,IAE/E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,iBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOiB,MAAOqU,EAAOI,YAAahV,SAAUqC,IAEtE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,iBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOiB,MAAOqU,EAAOK,OAAQjV,SAAUqC,IAEjE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,cAAY,iBAC3BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,aAAaT,KAAK,OAAOiB,MAAOqU,EAAOtI,OAAQtM,SAAUqC,IAErE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,UACrBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAOqU,EAAOnI,KAAMzM,SAAUqC,IAE7D9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,YACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,MAAMT,KAAK,OAAOiB,MAAOqU,EAAOR,IAAKpU,SAAUqC,IAE3D9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,iBACrBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAOqU,EAAOP,KAAMrU,SAAUqC,IAE7D9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,uBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOiB,MAAOqU,EAAON,OAAQtU,SAAUqC,IAEjE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,iBAAe,8BAC9BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,gBAAgBT,KAAK,gBAAgBiB,MAAOqU,EAAOL,cAAevU,SAAUqC,IAExF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,kBACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAOqU,EAAOJ,QAASxU,SAAUqC,IAEnE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,WACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAOqU,EAAOH,QAASzU,SAAUqC,IAEnE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,uBAC1BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,OAAOiB,MAAOqU,EAAOF,UAAW1U,SAAUqC,IAEvE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,kBACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,OAAOiB,MAAOqU,EAAOlE,SAAU1Q,SAAUqC,IAErE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,mBAAiB,+BAChCjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,kBAAkBT,KAAK,OAAOiB,MAAOqU,EAAOD,gBAAiB3U,SAAUqC,IAEnF9E,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SClFhB4V,GAzBW,SAAC7X,GAAU,IAC1B8B,EAAiH9B,EAAjH8B,QAASgI,EAAwG9J,EAAxG8J,aAAcgO,EAA0F9X,EAA1F8X,aAAc9N,EAA4EhK,EAA5EgK,qBAAsBC,EAAsDjK,EAAtDiK,kBAC5DsN,GADkHvX,EAAnCkK,gBAAmClK,EAAlBwC,eACvFsH,GACT/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACP7B,EAAAC,EAAAC,cAAA,UAAKmX,EAAO3I,MACZ1O,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,OAAOoD,UAAU,KAAKnC,MAAOqU,EAAOQ,UAAWpV,SAAUqH,KAE1F9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,aAAaT,KAAK,OAAOiB,MAAOqU,EAAOS,WAAYrV,SAAUqH,KAE7E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOgW,YAAaV,EAAOK,OAAQ1U,MAAOqU,EAAOK,OAAQjV,SAAUqH,KAEjG9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,eAAeT,KAAK,SAASiB,MAAOqU,EAAOjE,aAAc3Q,SAAUqH,KAEnF9J,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAK4V,EAAa/V,KAAM,SAC7C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCWlCiO,GA/BG,SAAClY,GAAU,IAClB8B,EAAkD9B,EAAlD8B,QAASyV,EAAyCvX,EAAzCuX,OAAQY,EAAiCnY,EAAjCmY,aAAcpN,EAAmB/K,EAAnB+K,gBAChChJ,EAAMD,EACNsW,EAAIb,EAGV,OACIrX,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAKgY,EAAExB,OACP1W,EAAAC,EAAAC,cAAA,UAAKgY,EAAEvB,QACP3W,EAAAC,EAAAC,cAAA,UAAKgY,EAAEtB,OACP5W,EAAAC,EAAAC,cAAA,UAAKgY,EAAErB,KACP7W,EAAAC,EAAAC,cAAA,UAAKgY,EAAEhJ,MACPlP,EAAAC,EAAAC,cAAA,UAAKgY,EAAEpB,MACP9W,EAAAC,EAAAC,cAAA,UAAKgY,EAAEnB,QACP/W,EAAAC,EAAAC,cAAA,UAAKoR,OAAO4G,EAAElB,gBACdhX,EAAAC,EAAAC,cAAA,UAAKgY,EAAEjB,SACPjX,EAAAC,EAAAC,cAAA,UAAKgY,EAAEtB,OACP5W,EAAAC,EAAAC,cAAA,UAAKgY,EAAEhB,SACPlX,EAAAC,EAAAC,cAAA,UAAKgY,EAAEf,WACPnX,EAAAC,EAAAC,cAAA,UAAKgY,EAAE/E,UACPnT,EAAAC,EAAAC,cAAA,UAAKgY,EAAEd,iBACPpX,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAK6I,EAAgBhJ,KAAK,SAE/C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMiW,EAAapW,KAAK,oBChB1C,SAASsW,KACpB,IAIC/X,EAE6BC,mBANjB,CACT,CAAEqW,MAAO,EAAGC,OAAQ,wBAAyBC,MAAO,EAAG1H,KAAM,IAAM2H,IAAK,EAAGC,KAAM,KAAMC,OAAQ,wCAAyCE,QAAS,EAAGC,QAAS,EAAGC,UAAW,GAAIC,gBAAiB,WAAYgB,OAAQ,IACpN,CAAE1B,MAAO,EAAGC,OAAQ,wBAAyBC,MAAO,EAAG1H,KAAM,IAAM2H,IAAK,GAAIC,KAAM,KAAMC,OAAQ,sBAAuBE,QAAS,EAAGC,QAAS,EAAGC,UAAW,yEAA0EhE,SAAU,0BAA2BiE,gBAAiB,WAAYgB,OAAQ,IAC9S,CAAE1B,MAAO,EAAGC,OAAQ,kCAAmCzH,KAAM,EAAG2H,IAAK,EAAMC,KAAM,MAAOC,OAAQ,qCAAsCE,QAAS,EAAGhI,YAAa,EAAGmI,gBAAiB,WAAYgB,OAAQ,MAG/J7X,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAArCiY,EAAQ9X,EAAA,GAAE+W,EAAS/W,EAAA,GAAAI,EACcN,mBAAS,MAAKQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA/C2X,EAAYzX,EAAA,GAAE0X,EAAe1X,EAAA,GAAAG,EACIX,mBAAS,MAAKY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAA/C4I,EAAY3I,EAAA,GAAE8K,EAAe9K,EAAA,GAAAC,EACQb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAAnD8K,EAAc5K,EAAA,GAAE6K,EAAiB7K,EAAA,GAAA8K,EACc7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAA7DE,EAAmBD,EAAA,GAAEE,EAAsBF,EAAA,GA0C5CM,EAAa,WACfR,EAAkB,OAsBhBgM,EAAe,SAACpW,GAClB,IAAMwW,EAAWxW,EACb0V,EAAS/W,OAAA2B,EAAA,EAAA3B,CAAO6X,GACpBd,EAAUnV,OAAOiW,EAAU,GAC3Bf,EAAUC,IAGRK,EAAe,SAAC/V,GAClB,IAAI8Q,EAAS0F,EAASxW,GAAW,KACjC,GAAIwW,EAAS3K,KAAK,SAAC8K,GAAO,OAAKA,EAAQ9B,QAAU/D,IACjD,CACI,IAAI4E,EAAS/W,OAAA2B,EAAA,EAAA3B,CAAO6X,GACpBd,EAAU1V,GAAO+H,EACjB2O,EAAgB,MAChBjB,EAAUC,GACV9K,QA5CY,iBAgDA,gBA/CZR,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,mCAmDlB+J,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACoC,EAAOC,GAE3B,IADA,IAAMoI,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GACnB/E,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCkI,EAAgBrI,EAAMG,IAAMF,EAAOE,GACnC0B,QAAQC,IAAI,IAAM9B,EAAMG,GAAK,KAAOF,EAAOE,GAAK,IAAKkI,EAAgB0L,OAEvE1M,EAAgBgB,IAGdlC,EAAkB,SAAChJ,GACrB0W,EAAgB1W,GAChBkK,EAAgBsM,EAASxW,KAEvBkI,EAAoB,WACtBwO,EAAgB,MAChBxM,EAAgB,OAIpB,OAEI/L,EAAAC,EAAAC,cAAA,OAAK0S,MAAM,aACP5S,EAAAC,EAAAC,cAACsU,EAAS,MACVxU,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACbtO,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,yCAGRF,EAAAC,EAAAC,cAAA,aAEKmY,EAAS3W,IAAI,SAAC2V,EAAQxV,GACnB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KAGL6W,IAAiB1W,EACf5B,EAAAC,EAAAC,cAACwY,GAAiB,CAAC9W,QAASA,EAASgI,aAAcA,EAAcgO,aAAcA,EAAc9N,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IAC5L/J,EAAAC,EAAAC,cAACyY,GAAS,CAAC/W,QAASA,EAASyV,OAAQA,EAAQY,aAAcA,EAAcpN,gBAAiBA,SAOhH7K,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC0Y,GAAU,CAACpB,UAhHF,SAACH,GACf,IAAMpE,EAASoE,EAAOA,EAAO7V,OAAS,GAAW,OACjD6V,EAAe,OAAIpE,EAAS,EAC5B,IAAIsE,EAAS,GAAAnU,OAAA5C,OAAA2B,EAAA,EAAA3B,CAAO6W,GAAM,CAAEA,IAC5BC,EAAUC,GACV9K,OA4GIzM,EAAAC,EAAAC,cAAA,UAAQ8B,QA7IK,WACjBiE,YAAM,CACFC,OAAQ,OACRC,IAAI,WACJC,KAAMiS,IACLhS,KAAK,SAACC,GApBXL,YAAM,CACFC,OAAQ,MACRC,IAAI,aACHE,KAAK,SAACC,GACP,IAAMuS,EAAavS,EAASF,KAC5BkR,EAAUuB,KACTpS,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,cAY5BH,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,uCA+HT,kBAC7B7B,EACAI,GClLb,IAgFe0M,GAhFM,SAAChZ,GAEpB,IAAMiZ,EAAajZ,EAAMiZ,WAazB3Y,EACwBC,mBAXf,CACL2Y,KAAM,KACNtB,OAAQ,GACRD,YAAa,KACbwB,WAAY,KACZC,cAAe,KACfC,eAAgB,OAKyB5Y,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAtCgZ,EAAI7Y,EAAA,GAAE8Y,EAAO9Y,EAAA,GA6BZuE,EAAmB,SAACpC,IAbH,SAACgC,EAAOC,GAE7B,IADA,IAAM2U,EAAO9Y,OAAA0C,EAAA,EAAA1C,CAAA,GAAO4Y,GACXvU,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCyU,EAAQ5U,EAAMG,IAAMF,EAAOE,GAG7BwU,EAAQC,GAYRhX,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,SAO5F,OACEhD,EAAAC,EAAAC,cAAA,QAAM6E,SAlCa,SAACrC,GAEpBA,EAAMS,iBAENoD,QAAQC,IAAI,iCACZ1G,EAAMyZ,QAAQH,GAEdC,EAxBK,CACLL,KAAM,KACNtB,OAAQ,GACRD,YAAa,KACbwB,WAAY,KACZC,cAAe,KACfC,eAAgB,SA+CZnZ,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,wBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOoD,UAAU,KAAKnC,MAAOoW,EAAK1B,OAAQjV,SAAUqC,IAE9E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,cAAY,UAC3BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,aAAa4W,KAAMA,EAAKH,WAAYxW,SAAUqC,GACxDiU,EAAWrX,IAAI,SAAC2V,GACf,OAAOrX,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,OAAQW,EAAOV,WAIhD3W,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,eAAa,WAC5BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,cAAcQ,MAAOoW,EAAK3B,YAAahV,SAAUqC,GAC3DiU,EAAWrX,IAAI,SAAC2V,GACf,OAAOrX,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,OAAQW,EAAOV,WAIhD3W,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SCzChByX,GAtCS,SAAC1Z,GAAU,IACxB8B,EAA2H9B,EAA3H8B,QAASgI,EAAkH9J,EAAlH8J,aAAcmP,EAAoGjZ,EAApGiZ,WAAYU,EAAwF3Z,EAAxF2Z,WAAY3P,EAA4EhK,EAA5EgK,qBAAsBC,EAAsDjK,EAAtDiK,kBACtEqP,GAD4HtZ,EAAnCkK,gBAAmClK,EAAlBwC,eACnGsH,GACP/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACP7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,OAAOgW,YAAaqB,EAAK1B,OAAQ1U,MAAOoW,EAAK1B,OAAQjV,SAAUqH,KAE7F9J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,aAAaC,SAAUqH,GACjCiP,EAAWrX,IAAI,SAAC2V,GACf,OAAIA,EAAOX,QAAU0C,EAAKH,WAAoBjZ,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,MAAO7G,UAAQ,GAAEwH,EAAOV,QAC/E3W,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,OAAQW,EAAOV,YAKxD3W,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,gBAAgBT,KAAK,SAASiB,MAAOoW,EAAKF,cAAezW,SAAUqH,KAEnF9J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,cAAcC,SAAUqH,GAClCiP,EAAWrX,IAAI,SAAC2V,GACf,OAAIA,EAAOX,QAAU0C,EAAK3B,YAAqBzX,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,MAAO7G,UAAQ,GAAEwH,EAAOV,QAChF3W,EAAAC,EAAAC,cAAA,UAAQ8C,MAAOqU,EAAOX,OAAQW,EAAOV,YAKxD3W,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,iBAAiBT,KAAK,SAASiB,MAAOoW,EAAKD,eAAgB1W,SAAUqH,KAErF9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAKyX,EAAW5X,KAAM,SAC3C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCPlC2P,GA1BK,SAAC5Z,GAAU,IACpB8B,EAA0D9B,EAA1D8B,QAASwX,EAAiDtZ,EAAjDsZ,KAAML,EAA2CjZ,EAA3CiZ,WAAYY,EAA+B7Z,EAA/B6Z,WAAY9O,EAAmB/K,EAAnB+K,gBACxChJ,EAAMD,EACNgY,EAAIR,EACNvB,EAAYkB,EAAWrL,KAAK,SAAAwK,GAAC,OAAIA,EAAExB,QAAUkD,EAAEX,aAC/CnB,EAAaiB,EAAWrL,KAAK,SAAAwK,GAAC,OAAIA,EAAExB,QAAUkD,EAAEnC,cAMpD,OAJII,IAAWA,EAAUA,EAAUlB,QAC/BmB,IAAYA,EAAWA,EAAWnB,QAIlC3W,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAK0Z,EAAElC,QACP1X,EAAAC,EAAAC,cAAA,UAAK2X,GACL7X,EAAAC,EAAAC,cAAA,UAAK0Z,EAAEV,eACPlZ,EAAAC,EAAAC,cAAA,UAAK4X,GACL9X,EAAAC,EAAAC,cAAA,UAAK0Z,EAAET,gBAEPnZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAK6I,EAAgBhJ,KAAK,SAE/C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAM2X,EAAW9X,KAAK,oBCXxC,SAASgY,KAAW,IAAAzZ,EACCC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA5C0Z,EAAQvZ,EAAA,GAAEwZ,EAAWxZ,EAAA,GAAAI,EACQN,wBAASmD,GAAU3C,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAhDoY,EAAUlY,EAAA,GAAEmZ,EAAanZ,EAAA,GAAAG,EACIX,mBAAS,MAAKY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAA3CiZ,EAAUhZ,EAAA,GAAEiZ,EAAajZ,EAAA,GAAAC,EACQb,mBAAS,MAAKe,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAA/C0I,EAAYxI,EAAA,GAAE2K,EAAe3K,EAAA,GAAA8K,EACQ7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAAnDF,EAAcG,EAAA,GAAEF,EAAiBE,EAAA,GAAA8F,EACc5R,mBAAS,MAAK6R,EAAA1R,OAAAC,EAAA,EAAAD,CAAAyR,EAAA,GAA7D7F,EAAmB8F,EAAA,GAAE7F,EAAsB6F,EAAA,GAE5CiI,EAAgB,WAClB5T,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,6CACHE,KAAK,SAACC,GACP,IAAM8T,EAAW9T,EAASF,KAC1B2T,EAAYK,KACX3T,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAyD/B0F,EAAc,SAACC,GACD,iBAAZA,GACAN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,mCAgClB4Z,EAAa,SAAC9X,GAChB,IAAI8Q,EAASmH,EAASjY,GAAW,KAC7BiY,EAASpM,KAAK,SAAC2M,GAAK,OAAKA,EAAMrB,OAASrG,IAExC1M,YAAM,CACFC,OAAQ,SACRC,IAAI,2CAA2CwM,EAAO,MACrDtM,KAAK,SAACC,GACP6T,MACC1T,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAMjC0F,EAAY,iBAIdmN,EAAa,SAAC5X,GAChB,IAAI8Q,EAASmH,EAASjY,GAAW,KAG7BiY,EAASpM,KAAK,SAAC2M,GAAK,OAAKA,EAAMrB,OAASrG,IAExC1M,YAAM,CACFC,OAAQ,QACRC,IAAI,2CAA2CwM,EAAO,IACtDvM,KAAMwD,IACLvD,KAAK,SAACC,GACP6T,IACAD,OAAc1W,KACbiD,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAMjC0F,EAAY,iBAKdxC,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACoC,EAAOC,GAE3B,IADA,IAAMoI,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GACnB/E,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCkI,EAAgBrI,EAAMG,IAAMF,EAAOE,GAGrCkH,EAAgBgB,IAGdlC,EAAkB,SAAChJ,GACrBqY,EAAcrY,GACdkK,EAAgB+N,EAASjY,KAEvBkI,EAAoB,WACtBmQ,EAAc,MACdnO,EAAgB,OAQpB,OALA1K,oBAAU,WACN8Y,IAtKA5T,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,+CACHE,KAAK,SAACC,GACP,IAAMuS,EAAavS,EAASF,KAC5B4T,EAAcnB,GACdtS,QAAQC,IAAIqS,KACXpS,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aA4JlC,SAEYpD,IAAXsW,QAAqCtW,IAAbuV,EAChB/Y,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAMRhN,EAAAC,EAAAC,cAAA,OAAK0S,MAAM,aACT5S,EAAAC,EAAAC,cAACsU,EAAS,MACVxU,EAAAC,EAAAC,cAAA,uBACEF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,8BAGRF,EAAAC,EAAAC,cAAA,aAEK4Z,EAASpY,IAAI,SAAC0X,EAAMvX,GACjB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KAGLwY,IAAerY,EACb5B,EAAAC,EAAAC,cAACoa,GAAe,CAAC1Y,QAASA,EAASgI,aAAcA,EAAcmP,WAAYA,EAAYU,WAAYA,EAAY3P,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IAC9M/J,EAAAC,EAAAC,cAACqa,GAAW,CAAC3Y,QAASA,EAASwX,KAAMA,EAAML,WAAYA,EAAYY,WAAYA,EAAY9O,gBAAiBA,SAOlI7K,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACsa,GAAY,CAACjB,QAlJN,SAACH,GAGb,IAAMnG,EAAS6G,EAASA,EAAStY,OAAS,GAAS,KACnD4X,EAAW,KAAInG,EAAS,EAjCL,SAACmG,GACpB7S,QAAQC,IAAIqG,KAAKC,UAAUsM,IAC3BnT,YAAM,CACFC,OAAQ,OACRC,IAAI,2CACJC,KAAMgT,IACL/S,KAAK,SAACC,GACP6T,MACC1T,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAGjCyF,EAAuBrM,EAAAC,EAAAC,cAAC0N,EAAc,CAACC,IAAI,qCAuB3C4M,CAAerB,GAZfnN,EAAkB,OAqJkB8M,WAAYA,IAC3C/M,EACAI,GClPb,IAoHesO,GApHO,SAAC5a,GAErB,IAAM0O,EAAe1O,EAAM2O,UAqB3BrO,EACkCC,mBAnBzB,CACLsa,KAAM,KACNC,aAAc,GACdC,SAAU,KACVC,UAAW,KACX5L,KAAM,GACN6L,WAAY,KACZjM,QAAS,KACTC,OAAQ,KACRiM,gBAAiB,GACjB/L,YAAa,KACbG,UAAW,KACXC,SAAU,KACV4L,aAAc,KACdC,kBAAmB,OAKqC3a,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAArD+a,EAAS5a,EAAA,GAAE6a,EAAY7a,EAAA,GA0BtBuE,EAAmB,SAACpC,IAZH,SAACgC,EAAOC,GAE7B,IADA,IAAM0W,EAAY7a,OAAA0C,EAAA,EAAA1C,CAAA,GAAO2a,GAChBtW,EAAI,EAAGA,EAAIH,EAAMlD,OAAQqD,IAChCwW,EAAa3W,EAAMG,IAAMF,EAAOE,GAElCuW,EAAaC,GAYb/Y,CAAe,CAHGI,EAAME,OAAOC,aAAa,SAGhB,CAFa,aAAtBH,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,SAO5F,OACEhD,EAAAC,EAAAC,cAAA,QAAM6E,SAhCa,SAACrC,GAEpBA,EAAMS,iBAENrD,EAAMwb,aAAaH,GAEnBC,EA9BK,CACLT,KAAM,KACNC,aAAc,GACdC,SAAU,KACVC,UAAW,KACX5L,KAAM,GACN6L,WAAY,KACZjM,QAAS,KACTC,OAAQ,KACRiM,gBAAiB,GACjB/L,YAAa,KACbG,UAAW,KACXC,SAAU,KACV4L,aAAc,KACdC,kBAAmB,SA4Cflb,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,gBAAc,kBAC7BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,eAAeT,KAAK,OAAOiB,MAAOmY,EAAUvM,SAAUnM,SAAUqC,IAE5E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,cAAY,gBAC3BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,aAAaT,KAAK,WAAWiB,MAAOmY,EAAUJ,WAAYtY,SAAUqC,IAEhF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAASiB,MAAOmY,EAAUN,SAAUpY,SAAUqC,IAE1E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,QAAM,UACrBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAOmY,EAAUjM,KAAMzM,SAAUqC,IAEhE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,oBAC1BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAASiB,MAAOmY,EAAUL,UAAWrY,SAAUqC,IAE5E9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,WAAS,aACxBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAOmY,EAAUrM,QAASrM,SAAUqC,IAEtE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,UAAQ,iBACvBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,SAASiB,MAAOmY,EAAUpM,OAAQtM,SAAUqC,IAEtE9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,eAC1BjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOmY,EAAU/L,UAAW3M,SAAUqC,IAExF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,YAAU,cACzBjF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAAS6N,KAAK,OAAO5M,MAAOmY,EAAU9L,SAAU5M,SAAUqC,IAEtF9E,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,aAAW,cAC1BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,eAAeC,SAAUqC,GACpC9E,EAAAC,EAAAC,cAAA,UAAQsK,cAAc,EAAMxH,MAAO,MAAK,OAEvCwL,EAAa9M,IAAI,SAACoO,EAAUjO,GAC3B,OACE7B,EAAAC,EAAAC,cAAA,UAAQ8C,MAAO8M,EAASC,MAAOD,EAASE,WAK9ChQ,EAAAC,EAAAC,cAAA,SAAO+E,QAAQ,kBAAgB,cAC/BjF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,qBACXxC,EAAAC,EAAAC,cAAA,UAAQsK,cAAc,EAAMxH,MAAO,MAAK,OACvCwL,EAAa9M,IAAI,SAACoO,EAAUjO,GAC3B,OACE7B,EAAAC,EAAAC,cAAA,UAAQ8C,MAAO8M,EAASC,MAAOD,EAASE,WAK9ChQ,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,UAAQ,SCtHhB,SAASwZ,GAAsBzb,GAAO,IAAAM,EACfC,mBAAS,CAAC6P,UAAW,KAAMC,SAAU,OAAM5P,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAtEgQ,EAAS7P,EAAA,GAAE8P,EAAY9P,EAAA,GAAAI,EACIN,mBAASP,EAAMkb,iBAAgBna,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA1D6a,EAAS3a,EAAA,GAAE4a,EAAY5a,EAAA,GAMxB2P,EAAuB,SAAC9N,GAC5B,IAAMb,EAAMa,EAAME,OAAOC,aAAa,WAChCF,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAaJ,EAAME,OAAOI,MAC5ByN,EAAQjQ,OAAA0C,EAAA,EAAA1C,CAAA,GAAOgb,EAAU3Z,IAC7B4O,EAAS9N,GAAaG,EACtB,IAAI4Y,EAAYlb,OAAA2B,EAAA,EAAA3B,CAAOgb,GACvBjV,QAAQC,IAAI,eAAgB3E,GAC5B6Z,EAAa7Z,GAAO4O,EACpBlK,QAAQC,IAAI,eAAgBkV,GAC5BD,EAAaC,GACb5b,EAAMwC,eAAe,kBAAmBoZ,IAGpC/K,EAAoB,SAACjO,GACzB,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAaJ,EAAME,OAAOI,MAC1ByN,EAAQjQ,OAAA0C,EAAA,EAAA1C,CAAA,GAAO4P,GACrBK,EAAS9N,GAAaG,EACtBuN,EAAaI,IAkBf,GAAI+K,EACA,OACIxb,EAAAC,EAAAC,cAAA,aACQF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACHsb,EAAU9Z,IAAI,SAACkP,EAAOhP,GACnB,OACI5B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KACPzB,EAAAC,EAAAC,cAAA,MAAI2B,IAAKD,GACL5B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO2Q,QAASjP,EAASY,KAAK,YAAYT,KAAK,OAAOiB,MAAO4N,EAAMV,UAAWzN,SAAU+N,KAC5FxQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAO2Q,QAASjP,EAASY,KAAK,WAAWQ,MAAO4N,EAAMT,SAAU1N,SAAU+N,KAC9ExQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAlBrB,SAACJ,GACvB,IAAMkP,EAAStQ,OAAA2B,EAAA,EAAA3B,CAAOgb,GACtB1K,EAAU1O,OAAOR,EAAS,GAC1B6Z,EAAa3K,GACbhR,EAAMwC,eAAe,kBAAmBwO,GAcSC,CAAkBnP,KAAS,eAMhE5B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYQ,MAAOoN,EAAUF,UAAWnO,KAAK,OAAOU,SAAUkO,KAC9E3Q,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWQ,MAAOoN,EAAUD,SAAU1N,SAAUkO,KAChE3Q,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAnCP,SAACU,GACtBA,EAAMS,iBACN,IAAM2N,EAAS,GAAA1N,OAAA5C,OAAA2B,EAAA,EAAA3B,CAAOgb,GAAS,CAAEpL,IACjCqL,EAAa3K,GACbT,EAAa,CAACH,UAAW,GAAIC,SAAU,KACvCrQ,EAAMwC,eAAe,kBAAmBwO,KA8BY,UC7D1D,IA8De6K,GA9Dc,SAAC7b,GAAU,IAC7B8B,EAA8G9B,EAA9G8B,QAASgI,EAAqG9J,EAArG8J,aAAc6E,EAAuF3O,EAAvF2O,UAAWmN,EAA4E9b,EAA5E8b,gBAAiB9R,EAA2DhK,EAA3DgK,qBAAsBC,EAAqCjK,EAArCiK,kBAAmBzH,EAAkBxC,EAAlBwC,eAC7FuZ,EAAMjS,EACN/H,EAAMD,EAGZ,OACI5B,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACP7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,iBAAiBT,KAAK,OAAOoD,UAAU,KAAKnC,MAAO6Y,EAAIjB,aAAcnY,SAAUqH,KAE/F9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,aAAaT,KAAK,WAAWgB,QAASoI,QAAQ0Q,EAAId,YAAatY,SAAUqH,KAEzF9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAASiB,MAAO6Y,EAAIhB,SAAUpY,SAAUqH,KAExE9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,OAAOT,KAAK,OAAOiB,MAAO6Y,EAAI3M,KAAMzM,SAAUqH,KAE9D9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAASiB,MAAO6Y,EAAIf,UAAWrY,SAAUqH,KAE1E9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,UAAUT,KAAK,OAAOiB,MAAO6Y,EAAI/M,QAASrM,SAAUqH,KAEpE9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,SAAST,KAAK,SAASiB,MAAO6Y,EAAI9M,OAAQtM,SAAUqH,KAEpE9J,EAAAC,EAAAC,cAACqb,GAAqB,CAAC3R,aAAcA,EAActH,eAAgBA,EAAgB0Y,gBAAiBa,EAAIb,kBAExGhb,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,YAAYT,KAAK,SAAS6N,KAAK,OAAO5M,MAAO6Y,EAAIzM,UAAW3M,SAAUqH,KAEtF9J,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWT,KAAK,SAAS6N,KAAK,OAAO5M,MAAO6Y,EAAIxM,SAAU5M,SAAUqH,KAEpF9J,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,eAAeC,SAAUqH,GACpC9J,EAAAC,EAAAC,cAAA,UAAQsK,cAAc,EAAMxH,MAAO,MAAK,OACvCyL,EAAU/M,IAAI,SAACoO,EAAUjO,GACxB,IACMqP,EAAczC,EADJ5M,GACuBkO,MAAQ8L,EAAIZ,aACnD,OACEjb,EAAAC,EAAAC,cAAA,UAAQsK,aAAc0G,EAAYlO,MAAO8M,EAASC,MAAOD,EAASE,YAM1EhQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,oBAAoBC,SAAUqH,GACzC9J,EAAAC,EAAAC,cAAA,UAAQsK,cAAc,EAAMxH,MAAO,MAAK,OACvCyL,EAAU/M,IAAI,SAACoO,EAAUjO,GACxB,IACMqP,EAAczC,EADJ5M,GACuBkO,MAAQ8L,EAAIX,kBACnD,OACElb,EAAAC,EAAAC,cAAA,UAAQsK,aAAc0G,EAAYlO,MAAO8M,EAASC,MAAOD,EAASE,YAM1EhQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,WAAK4Z,EAAgB/Z,KAAM,SAChD7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS+H,GAAkB,aCAlC+R,GA1DM,SAAChc,GAAU,IACrB8B,EAAwD9B,EAAxD8B,QAASuZ,EAA+Crb,EAA/Cqb,UAAWY,EAAoCjc,EAApCic,gBAAiBlR,EAAmB/K,EAAnB+K,gBACtChJ,EAAMD,EACNia,EAAMV,EA8BZ,OACInb,EAAAC,EAAAC,cAAA,MAAI2B,IAAKA,GACL7B,EAAAC,EAAAC,cAAA,UAAK2b,EAAIjB,cACT5a,EAAAC,EAAAC,cAAA,UAAKoR,OAAOnG,QAAQ0Q,EAAId,cACxB/a,EAAAC,EAAAC,cAAA,UAAK2b,EAAIhB,UACT7a,EAAAC,EAAAC,cAAA,UAAK2b,EAAI3M,MACTlP,EAAAC,EAAAC,cAAA,UAAK2b,EAAIf,WACT9a,EAAAC,EAAAC,cAAA,UAAKoR,OAAOuK,EAAI/M,UAChB9O,EAAAC,EAAAC,cAAA,UAAKoR,OAAOuK,EAAI9M,SAChB/O,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAtCU,SAACJ,GACnB,IAAMkc,EAAalc,EAAMkb,gBACzB,GAAIgB,EAEA,OAAIA,EAAWxa,OAAS,EAEhBxB,EAAAC,EAAAC,cAAA,aACQF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACH8b,EAAWta,IAAI,SAACkP,EAAO/O,GACpB,OACI7B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAK0Q,EAAMV,WACXlQ,EAAAC,EAAAC,cAAA,UAAK0Q,EAAMT,mBATnC,GAkCkB,CAAC6K,gBAAiBa,EAAIb,mBAExChb,EAAAC,EAAAC,cAAA,UAAK2b,EAAI5M,aACTjP,EAAAC,EAAAC,cAAA,UAAKoR,OAAOuK,EAAIzM,YAChBpP,EAAAC,EAAAC,cAAA,UAAKoR,OAAOuK,EAAIxM,WAChBrP,EAAAC,EAAAC,cAAA,UAAK2b,EAAIpK,UAAYoK,EAAIpK,UAAUzB,OAAS,OAC5ChQ,EAAAC,EAAAC,cAAA,UAAK2b,EAAInK,eAAiBmK,EAAInK,eAAe1B,OAAS,OAEtDhQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAK6I,EAAgBhJ,KAAK,SAE/C7B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAM+Z,EAAgBla,KAAK,oBC9C7C,SAASoa,KAAgB,IAAA7b,EACFC,wBAASmD,GAAUjD,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAA9C+a,EAAS5a,EAAA,GAAE6a,EAAY7a,EAAA,GAAAI,EACIN,wBAASmD,GAAU3C,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAA9C8N,EAAS5N,EAAA,GAAEiR,EAAYjR,EAAA,GAAAG,EACgBX,mBAAS,MAAKY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAArDkb,EAAejb,EAAA,GAAEkb,EAAkBlb,EAAA,GAAAC,EACFb,mBAAS,CAC7Csa,KAAM,GACNC,aAAc,GACdC,SAAU,GACVC,UAAW,GACX5L,KAAM,GACN6L,WAAY,GACZjM,QAAS,GACTC,OAAQ,GACRiM,gBAAiB,GACjB/L,YAAa,GACbG,UAAW,GACXC,SAAU,GACV4L,aAAc,GACdC,kBAAmB,KACrB9Z,EAAAZ,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAfK0I,EAAYxI,EAAA,GAAE2K,EAAe3K,EAAA,GAAA8K,EAgBQ7L,mBAAS,MAAK8L,EAAA3L,OAAAC,EAAA,EAAAD,CAAA0L,EAAA,GAAnDF,EAAcG,EAAA,GAAEF,EAAiBE,EAAA,GAAA8F,EACc5R,mBAAS,MAAK6R,EAAA1R,OAAAC,EAAA,EAAAD,CAAAyR,EAAA,GAA7D7F,EAAmB8F,EAAA,GAAwBC,GAAAD,EAAA,GACF7R,mBAAS,OAAK+R,EAAA5R,OAAAC,EAAA,EAAAD,CAAA2R,EAAA,GAAvDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAkB5C/Q,oBAAU,WACN+a,IACA5J,KACD,IAEH,IAAMA,EAAiB,WACnBjM,QAAQC,IAAI,4BACZP,YAAM,CACFC,OAAQ,MACRC,IAAI,4CACHE,KAAK,SAACC,GACPwL,EAAaxL,EAASF,QACrBK,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/BwV,EAAiB,WACnB7V,QAAQC,IAAI,4BACZ8L,EAAoBtS,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,qBAChCkG,YAAM,CACFC,OAAQ,MACRC,IAAI,sDACHE,KAAK,SAACC,GACP,IAAM+V,EAAU/V,EAASF,KACzBgV,EAAaiB,GACb/J,EAAoB,QACnB7L,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAmC/BmV,EAAkB,SAACla,GACrB,IAAMya,EAAQnB,EAAUtZ,GAAW,KACnCoE,YAAM,CACFC,OAAQ,SACRC,IAAI,qDAAqDmW,EAAM,MAC9DjW,KAAK,SAACC,GACP8V,MACC3V,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aAK/BgV,EAAkB,SAAC/Z,GACrB,IAvGiB0K,EAuGboG,EAASwI,EAAUtZ,GAAW,KAC9BsZ,EAAUzN,KAAK,SAACmO,GAAG,OAAKA,EAAIlB,OAAShI,KAErCwJ,EAAmB,MACnBlW,YAAM,CACFC,OAAQ,QACRC,IAAI,qDAAqDwM,EAAO,IAChEvM,KAAMwD,IACLvD,KAAK,SAACC,GACP8V,MACC3V,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,aApHrB,kBADC2F,EA2HD,gBAzHZN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,iCAGC,UAAZwM,GACLN,EACIjM,EAAAC,EAAAC,cAACsM,EAAK,CAACzM,KAAK,yCAwHlB+J,EAAuB,SAACpH,GAE1B,IAAMC,EAAYD,EAAME,OAAOC,aAAa,QACtCC,EAAmC,aAAtBJ,EAAME,OAAOb,KAAsBW,EAAME,OAAOG,QAAUL,EAAME,OAAOI,MAEpF+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBpK,GAAaG,EAE7BiJ,EAAgBgB,IAEdzK,EAAiB,SAACE,EAAMQ,GAC1B,IAAM+J,EAAevM,OAAA0C,EAAA,EAAA1C,CAAA,GAAOoJ,GAC5BmD,EAAgBvK,GAAQQ,EACxB+I,EAAgBgB,GAChBxG,QAAQC,IAAIoD,IAGViB,EAAkB,SAAChJ,GACrBsa,EAAmBta,GACnBkK,EAAgBoP,EAAUtZ,KAExBkI,EAAoB,WACtBoS,EAAmB,MACnBpQ,EAAgB,OAGpB,YAAkBvI,IAAd2X,QAAyC3X,IAAdiL,EACnBzO,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+M,SAAA,gBAKRhN,EAAAC,EAAAC,cAAA,OAAK0S,MAAM,aACP5S,EAAAC,EAAAC,cAAC2S,EAAa,MACd7S,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOoO,UAAU,cACbtO,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kCAGRF,EAAAC,EAAAC,cAAA,aAEKib,EAAUzZ,IAAI,SAACma,EAAKha,GACjB,IAAMD,EAAUC,EAChB,OACI7B,EAAAC,EAAAC,cAACuB,EAAA,SAAQ,KAGLya,IAAoBta,EAClB5B,EAAAC,EAAAC,cAACqc,GAAoB,CAAC3a,QAASA,EAASgI,aAAcA,EAAc6E,UAAWA,EAAWmN,gBAAiBA,EAAiB9R,qBAAsBA,EAAsBxH,eAAgBA,EAAgByH,kBAAmBA,IAC3N/J,EAAAC,EAAAC,cAACsc,GAAY,CAAC5a,QAASA,EAASuZ,UAAWU,EAAKE,gBAAiBA,EAAiBlR,gBAAiBA,SAQxHwH,EACDrS,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACuc,GAAa,CAACnB,aAjJF,SAACO,GAClB,IAAM5I,EAASkI,EAAUA,EAAU3Z,OAAS,GAAS,KACrDqa,EAAU,KAAI5I,EAAS,EACvBhN,YAAM,CACFC,OAAQ,OACRC,IAAI,qDACJC,KAAMyV,IACLxV,KAAK,SAACC,GACP8V,MACC3V,MAAM,SAACC,GACJA,EAAMJ,WACRC,QAAQC,IAAIE,EAAMJ,UAClBC,QAAQC,IAAIE,EAAMJ,SAASK,QAC3BJ,QAAQC,IAAIE,EAAMJ,SAASM,YAxDjCqF,EAAkB,OA4L6BwC,UAAWA,IACrDzC,EACAI,SC7Ob,cC+GesQ,GApFH,WAAM,IAAAtc,EACkBC,qBAAUE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAnC0U,EAAQvU,EAAA,GAAEwU,EAAWxU,EAAA,GAAAI,EACQN,mBAAS,CACzCqF,SAAU,GACVC,SAAU,GACVgX,SAAS,IACX9b,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAJKic,EAAU/b,EAAA,GAAEuG,EAAavG,EAAA,GAM1B4E,EAAkB,SAAlBA,EAAmBuP,GAErB,OADAzO,QAAQC,IAAIwO,GACLA,GACH,IAAK,gBAAiBD,EAAY/U,EAAAC,EAAAC,cAACuN,EAAa,OAAM,MACtD,IAAK,YAAasH,EAAY/U,EAAAC,EAAAC,cAAC2c,EAAS,CAACD,WAAYA,EAAYxV,cAAeA,EAAe3B,gBAAiBA,KAAsB,MACtI,IAAK,cAAesP,EAAY/U,EAAAC,EAAAC,cAAC4c,EAAW,CAACrX,gBAAiBA,KAAsB,MACpF,IAAK,cAAesP,EAAY/U,EAAAC,EAAAC,cAAC6c,EAAW,CAACtX,gBAAiBA,KAAsB,MACpF,IAAK,cAAesP,EAAY/U,EAAAC,EAAAC,cAAC8c,EAAW,CAACvX,gBAAiBA,KAAsB,MACpF,IAAK,YAAasP,EAAY/U,EAAAC,EAAAC,cAACsU,EAAS,CAAC/O,gBAAiBA,KAAsB,MAChF,IAAK,gBAAiBsP,EAAY/U,EAAAC,EAAAC,cAAC2S,EAAa,CAACpN,gBAAiBA,KAAsB,MACxF,IAAK,aAAcsP,EAAY/U,EAAAC,EAAAC,cAACwL,EAAa,OAAM,MACnD,IAAK,oBAAqBqJ,EAAY/U,EAAAC,EAAAC,cAAC+U,EAAgB,CAACxP,gBAAiBA,KAAsB,MAC/F,IAAK,cAAesP,EAAY/U,EAAAC,EAAAC,cAAC+c,EAAW,OAAM,MAClD,IAAK,YAAalI,EAAY/U,EAAAC,EAAAC,cAACgd,GAAS,OAAM,MAC9C,IAAK,WAAYnI,EAAY/U,EAAAC,EAAAC,cAACid,GAAW,OAAM,MAC/C,IAAK,QAASpI,EAAY/U,EAAAC,EAAAC,cAACkd,GAAQ,OAAM,MACzC,IAAK,UAAWrI,EAAY/U,EAAAC,EAAAC,cAACmd,GAAM,OAAM,MACzC,IAAK,UAAWtI,EAAY/U,EAAAC,EAAAC,cAACod,GAAW,OAAM,MAC9C,IAAK,WAAYvI,EAAY/U,EAAAC,EAAAC,cAACqd,GAAQ,CAAC9X,gBAAiBA,KAAsB,MAC9E,IAAK,WAAYsP,EAAY/U,EAAAC,EAAAC,cAACsd,GAAQ,CAAC/X,gBAAiBA,OAuBhE,OACIzF,EAAAC,EAAAC,cAAA,OAAKoO,UAAU,OACXtO,EAAAC,EAAAC,cAACud,GAAA,EAAW,MACZzd,EAAAC,EAAAC,cAACgI,EAAA,EAAG,CAACR,GAAI,CACLgW,QAAS,SAACC,GAAK,OAAKA,EACpBC,QAAQC,WAAWC,SACnBC,UAAW,QACX3V,MAAO,MACPT,OAAQ,SAER3H,EAAAC,EAAAC,cAAA,UAAQoO,UAAU,cACdtO,EAAAC,EAAAC,cAACoI,EAAA,EAAU,CAACC,QAAQ,MAAI,wBACxBvI,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,eAAa,cAGxEzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,iBAAe,gBAG1EzF,EAAAC,EAAAC,cAAC+I,EAAA,EAAM,CAACV,QAAQ,YAAYvG,QAAS,kBAAMyD,EAAgB,cAAY,gBAGvEzF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMyD,EAAgB,sBAE3CzF,EAAAC,EAAAC,cAAA,UAAQ8B,QAAS,kBAAMyD,EAAgB,YAAU,UAGhDqP,MC9FNkJ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAA/X,KAAA8X,EAAAE,KAAA,WAAqBhY,KAAK,SAAAiY,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCADW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhf,EAAAC,EAAAC,cAACF,EAAAC,EAAMgf,WAAU,KACfjf,EAAAC,EAAAC,cAACgf,GAAG,QAORlB","file":"static/js/main.a2d9f7a2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// A display message component\r\n// Takes message text\r\n// Returns an <h4> display message component\r\nconst DisplayMessage = (props) => {\r\n    const text = props.text;\r\n    return (\r\n        <h4>{text}</h4>\r\n    )\r\n}\r\n\r\nexport default DisplayMessage;","import { Fragment } from \"react\";\r\nimport { useState, useEffect } from 'react';\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport React from 'react'\r\n\r\n// Allergy List Component\r\nconst AllergiesList = (props) => {\r\n    const [allergies, setAllergies] = useState(props.allergies);\r\n    const [currAllergy, setCurrAllergy] = useState({aType: ''});\r\n    const [displayMsgComponent, setDisplayMsgComponent] = useState(null);\r\n    const [isEditable, setIsEditable] = useState(props.isEditable);\r\n\r\n    useEffect( () => {\r\n        setAllergies(props.allergies);\r\n    }, [props.allergies]); \r\n\r\n    // Callback function that updates the allergy object currently being edited\r\n    // Takes input change event information (name, type, and value of input field)\r\n    // Returns none\r\n    const handleAllergyChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new household object before setting state\r\n        const newAllergy = {...currAllergy};\r\n        newAllergy[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setCurrAllergy(newAllergy);\r\n    }\r\n\r\n    const setAFlag = (allergyList) => {\r\n        if (allergyList.length > 0) {\r\n            return ['a_flag', true];\r\n        }\r\n        else {\r\n            return ['a_flag', false];\r\n        }\r\n    }\r\n\r\n    const handleAddAllergy = (event) => {\r\n        // Prevent refresh on form submit\r\n        event.preventDefault();\r\n        // Append this allergy to allergies list\r\n        const newAllergies =  [...allergies, currAllergy];\r\n        setAllergies(newAllergies);\r\n        // Clear the allergy field\r\n        setCurrAllergy({a_type: ''});\r\n        // Get key value for updating allergyFlag\r\n        const ret = setAFlag(newAllergies);\r\n        // Batch updating the allergies and the allergy flag together\r\n        props.updateEditForm(['hh_allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    const handleDeleteAllergy = (key) => {\r\n        const allergyID = key; \r\n        let newAllergies = [...allergies];\r\n        newAllergies.splice(allergyID, 1);\r\n        setAllergies(newAllergies);\r\n        const ret = setAFlag(newAllergies);\r\n        props.updateEditForm(['hh_allergies', ret[0]], [newAllergies, ret[1]]);\r\n    }\r\n\r\n    if (isEditable) {\r\n        return (\r\n            <Fragment>\r\n                <table>  \r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment key={thisKey}>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.a_type}\r\n                                        </td>\r\n                                        <td>\r\n                                            <button type='button' onClick={() => {handleDeleteAllergy(thisKey)}}>\r\n                                                delete\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                        <tr>\r\n                            <td>\r\n                                <input name=\"a_type\" type=\"text\" onChange={handleAllergyChange} value={currAllergy.a_type}></input>\r\n                            </td>\r\n                            <td>\r\n                                <button type='button' onClick={handleAddAllergy}>\r\n                                    Add\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <Fragment>\r\n                <table>\r\n                    <tbody>\r\n                        {/* Show a row for each allergy object in allergies */}\r\n                        {allergies.map((allergy, thisKey) => {\r\n                            return (\r\n                                <Fragment key={thisKey}>\r\n                                    <tr key={thisKey}>\r\n                                        <td>\r\n                                            {allergy.a_type}\r\n                                        </td>\r\n                                    </tr>\r\n                                </Fragment>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default AllergiesList;","import {useState} from 'react'\r\nimport AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n// Kainoa Borges\r\n\r\n// Household Form component\r\n// Takes AddHousehold callback function\r\n// Returns a form that can be used to define a new household object in a HouseholdList\r\nconst HouseholdForm = (props) => {\r\n\r\n  const clearHousehold = () => {\r\n    return {\r\n      hh_name: \"\",\r\n      num_adult: undefined,\r\n      num_child_lt_6: undefined,\r\n      num_child_gt_6: undefined,\r\n      sms_flag: 0,\r\n      veg_flag: 0,\r\n      allergy_flag: 0,\r\n      gf_flag: 0,\r\n      ls_flag: 0,\r\n      paused_flag: 0,\r\n      phone: \"\",\r\n      street: \"\",\r\n      city: \"\",\r\n      pcode: undefined,\r\n      state: \"\",\r\n      delivery_notes: \"\",\r\n      hh_allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this Household Form with each attribute of Household, using the clearHousehold helper function\r\n  const [household, setHousehold] = useState(clearHousehold());\r\n\r\n    // Handle form submission (prevent refresh, pass household to addHousehold, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass household object to HouseholdList callback\r\n      props.addHousehold(household)\r\n      // Clear the form state\r\n      setHousehold(clearHousehold());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newHousehold = {...household};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newHousehold[names[i]] = values[i];\r\n        // console.log('(' + names[i] + ', ' + values[i] + ')', newHousehold.aFlag);\r\n      }\r\n      setHousehold(newHousehold);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n      // Create new household object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic household info */}\r\n          <label htmlFor=\"hh_name\">Name: </label>\r\n          <input name=\"hh_name\" id=\"hh_name\" type=\"text\" maxLength='30' required={true} value={household.hh_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_adult'>Number of Adults: </label>\r\n          <input name='num_adult' id=\"num_adult\" type=\"number\" value={household.num_adult} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_child_lt_6'>Number of Children 0-6: </label>\r\n          <input name='num_child_lt_6' id=\"num_child_lt_6\" type=\"number\" value={household.num_child_lt_6} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='num_child_gt_6'>Number of Children 7-17: </label>\r\n          <input name='num_child_gt_6' id=\"num_child_gt_6\" type=\"number\" value={household.num_child_gt_6} onChange={handleFormChange}/>\r\n          \r\n\r\n          {/* Flags should be on separate lines */}\r\n          <br/>\r\n\r\n          <label htmlFor='veg_flag'>Vegan/Vegetarian: </label>          \r\n          <input name='veg_flag' id='veg_flag' type=\"checkbox\" checked={household.veg_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='gf_flag'>Gluten Free: </label>          \r\n          <input name='gf_flag' id='gf_flag' type='checkbox' checked={household.gf_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='a_flag'>Allergy: </label>\r\n          <input name='a_flag' id='a_flag' type='checkbox' checked={household.a_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n          \r\n          <label htmlFor='sms_flag'>Recieving SMS: </label>\r\n          <input name='sms_flag' id='sms_flag' type='checkbox' checked={household.sms_flag} onChange={handleFormChange}/>\r\n          \r\n          <br/>\r\n\r\n          <label htmlFor='paused_flag'>Is Paused: </label>          \r\n          <input name='paused_flag' id='paused_flag' type='checkbox' checked={household.paused_flag} onChange={handleFormChange}/>\r\n          \r\n          {/* Delivery info should be a separate line */}\r\n          <br/>\r\n\r\n          <label htmlFor='phone'>Phone Number: </label>          \r\n          <input name='phone' id='phone' type='tel' /**pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12'*/ maxLength='10' value={household.phone} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='street'>Street: </label>          \r\n          <input name='street' id='street' maxLength='50' value={household.street} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='city'>City: </label>\r\n          <input name='city' id='city' maxLength='50' value={household.city} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='pcode'>Postal Code: </label>\r\n          <input name='pcode' id='pcode' minLength='5' maxLength='5' value={household.pcode} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='state'>State: </label>\r\n          <input name='state' id='state' minLength='2' maxLength='2' value={household.state} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor='delivery_notes'>Delivery Notes: </label>\r\n          <textarea name='delivery_notes' id='delivery_notes' maxLength='255' value={household.delivery_notes} onChange={handleFormChange}/>\r\n\r\n          {/* Allergies input should be on a separate line */}\r\n          <br/>\r\n\r\n          <label>Allergies</label>\r\n          <AllergiesList allergies={household.hh_allergies} isEditable={true} updateEditForm={updateEditForm}/>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default HouseholdForm","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport axios from 'axios'\r\n\r\n// Login Page Component\r\n// Takes handlePageClick callback function to enable page switching when login is completed\r\n// Returns a login page component that allows users to enter account information \r\nconst NewUserPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            password: '',\r\n            email: ''\r\n        }\r\n    );\r\n\r\n    const sendCreateRequest = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"\",\r\n            data: user\r\n        }).then((response) => {\r\n            const data = response.data;\r\n            console.log(data);\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle input change for user login\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const createNewUser = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = { ...user };\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n    }\r\n\r\n    // Handle login form submit\r\n    // Takes login form event information (form submission)\r\n    // Returns none\r\n    const handleCreateUser = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // send login to backend\r\n        sendCreateRequest();\r\n        // Switch to 'landing' page\r\n        handlePageClick('loginPage');\r\n        // TO DO;\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h3>Create New User</h3>\r\n            <form onSubmit={handleCreateUser}>\r\n                <label htmlFor='username'>Username: </label>\r\n                <input type='text' maxLength='30' name='username' value={user.username} onChange={createNewUser}></input>\r\n                <br/><label htmlFor='username'>Password: </label>\r\n                <input type='password' maxLength='30' name='password' value={user.password} onChange={createNewUser}></input>\r\n                <br/><label htmlFor='username'>Email: </label>\r\n                <input type='email' maxLength='30' name='email' value={user.email} onChange={createNewUser}></input>\r\n                <br/><br/><button type='Submit'>Submit</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default NewUserPage;","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {Fragment} from 'react'\r\nimport axios from 'axios'\r\n\r\n// PW Reset Page Component\r\n// Takes handlePageClick callback function to enable page switching when reset request is complete\r\n// Returns a reset request page component that allows users to enter account information \r\nconst PwResetPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, sendEmail] = useState(\r\n        {\r\n            username: '',\r\n            email: ''\r\n        }\r\n    );\r\n\r\n    const sendResetRequest = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"\",\r\n            data: user\r\n          }).then((response)=>{\r\n            const data = response.data;\r\n            console.log(data);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    // Handle input change for user password reset\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const handleResetChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = {...user};\r\n        thisUser[fieldName] = fieldValue;\r\n        sendEmail(thisUser);                                //*** Function needs to be implemented ***/\r\n// Send email if account and email match\r\n    }\r\n    \r\n    // Handle reset form submit\r\n    // Takes reset form event information (form submission)\r\n    // Returns none\r\n    const handleResetSubmit = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // send reset request to backend\r\n        sendResetRequest();\r\n        // Switch to 'Login Page' page\r\n        handlePageClick('loginPage');\r\n        // TO DO;\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h3>Password Reset Page</h3>\r\n            <form onSubmit={handleResetSubmit}>\r\n                <label htmlFor='username'>Username: </label>\r\n                <input type='text' maxLength='30' name='username' value={user.username} onChange={handleResetChange}></input>\r\n                <br/><label htmlFor='username'>Email: </label>\r\n                <input type='email' maxLength='30' name='email' value={user.email} onChange={handleResetChange}></input>\r\n                <br/><br/><button type='Submit'>Submit</button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default PwResetPage;","import * as React from 'react'\r\nimport {useState} from 'react'\r\nimport {Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport NewUserPage from \"./NewUserPage.js\"\r\nimport PwResetPage from './PwResetPage.js'\r\n\r\nimport Button from '@mui/material/Button'\r\nimport { Grid, Typography, Stack, Paper, Box} from '@mui/material'\r\nimport TextField from '@mui/material/TextField'\r\nimport { Card } from '@mui/material'\r\n\r\n\r\n// Login Page Component\r\n// Takes handlePageClick callback function to enable page switching when login is completed\r\n// Returns a login page component that allows users to enter account information \r\nconst LoginPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            password: ''\r\n        }\r\n    );\r\n\r\n    const sendLoginRequest = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "users/\"\r\n          }).then((response)=>{\r\n            let userInList = false;\r\n            let userData = undefined;\r\n            for (let i = 0; i < response.data.length; ++i) {\r\n                if (response.data[i].username === user.username) {\r\n                    if (response.data[i].password === user.password) {\r\n                        userInList = true;\r\n                        userData = response.data[i];\r\n                    }\r\n                }\r\n            }\r\n            if (userInList) {\r\n                props.setLoginState(userData);\r\n                handlePageClick('landingPage');\r\n            }\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    // Handle input change for user login\r\n    // Takes input change event information (name, value)\r\n    // Returns none\r\n    const handleLoginChange = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = {...user};\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n        console.log(user.username, user.password)\r\n    }\r\n    \r\n    // Handle login form submit\r\n    // Takes login form event information (form submission)\r\n    // Returns none\r\n    const handleLoginSubmit = (event) => {\r\n        // Prevent refresh\r\n        event.preventDefault();\r\n        // send login to backend\r\n        sendLoginRequest();\r\n        // Switch to 'landing' page\r\n        //handlePageClick('landingPage');\r\n        // TO DO;\r\n    }\r\n\r\n    const handleCreateClick = (event) => {\r\n        handlePageClick('newUserPage');\r\n        //else if (pageName === 'pwResetPage') setCurrPage(<PwResetPage handlePageClick={handlePageClick} />);\r\n    }\r\n\r\n    const handleResetClick = (event) => {\r\n        handlePageClick('pwResetPage');\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <Grid item container spacing='12' sx={{margin: 'auto', marginTop: '4em', maxWidth: '90%', alignItems: 'center'}}>\r\n            \r\n            {/* Logo and Welcome Message (left-side) */}\r\n            <Grid item md='7' sx={{display: {xs: 'none', md: 'block'}}}>\r\n                <Box component='img' sx={{width: '80%'}} src=\"Images\\ff_logo.jpg\"/>\r\n                <Typography variant='h3' sx={{paddingBottom: '1em'}}>Welcome to Food Forward!</Typography>\r\n            </Grid>\r\n\r\n            {/* Login Box */}\r\n            <Grid item component={Card} md='5' sm='12' elevation='4' sx={{padding: '1em', height: 'fit-content'}}>\r\n                <Typography variant='h5' sx={{paddingBottom: '1em'}}>Sign In</Typography>\r\n                <form onSubmit={handleLoginSubmit}>\r\n            \r\n                    <Stack>\r\n                        <TextField type='Text' maxLength='30' label='Username' name='username' value={user.username} onChange={handleLoginChange}/>\r\n                        <TextField type='password' maxLength='30' label='Password' name='password' value={user.password} onChange={handleLoginChange}/>\r\n                        <Button variant='contained' type='Submit' onClick={sendLoginRequest}>\r\n                            Log In\r\n                        </Button>\r\n                    </Stack>\r\n            \r\n                    <Stack sx={{textAlign: 'center', marginTop: '2em'}}>\r\n                        <Typography>\r\n                            Don't have an account?\r\n                        </Typography>\r\n                        <Button variant='outlined' size='small' onClick={() => handleCreateClick('newUserPage')}>\r\n                            Sign Up\r\n                        </Button>\r\n                        <Typography>\r\n                            Forgot your password?\r\n                        </Typography>\r\n                        <Button variant='outlined' size='small' onClick={() => handleResetClick('pwResetPage')}>\r\n                            Reset Password\r\n                        </Button>\r\n                    </Stack>\r\n            \r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default LoginPage;","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport { Container, Button, Typography, Card, Grid, CardContent, CardActionArea } from '@mui/material'\r\n\r\n\r\nconst LandingPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    // HTML structure of this component\r\n    return (\r\n        <Grid \r\n            container \r\n            justifyContent='space-around' \r\n            alignItems='stretch'\r\n            direction='row'\r\n            spacing={2}\r\n            sx={{maxHeight: '40vh', margin: 'auto'}}>\r\n            <Grid item sm={12} md={4}>\r\n                <Card elevation='4' sx={{height: '100%'}}>\r\n                    <CardActionArea sx={{height: '100%'}} onClick={() => handlePageClick('households')}>\r\n                        <CardContent>\r\n                            <Typography component='div' variant='h5'>Clients</Typography>\r\n                            <Typography component='div' variant='body1'>- View client information</Typography>\r\n                            <Typography component='div' variant='body1'>- Add/Update client information</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>    \r\n            </Grid>\r\n\r\n            <Grid item sm={12} md={4}>\r\n                <Card elevation='4' sx={{height: '100%'}}>\r\n                    <CardActionArea sx={{height: '100%'}} onClick={() => handlePageClick('mealsPage')}>\r\n                        <CardContent>\r\n                            <Typography component='div' variant='h5'>Meals</Typography>\r\n                            <Typography component='div' variant='body1'>- View meals</Typography>\r\n                            <Typography component='div' variant='body1'>- Add/Update meals</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>    \r\n            </Grid>\r\n\r\n            <Grid item sm={12} md={4}>\r\n                <Card elevation='4' sx={{height: '100%'}}>\r\n                    <CardActionArea sx={{height: '100%'}} onClick={() => handlePageClick('inventoryPage')}>\r\n                        <CardContent>\r\n                            <Typography component='div' variant='h5'>Inventory</Typography>\r\n                            <Typography component='div' variant='body1'>- View ingredients and packaging</Typography>\r\n                            <Typography component='div' variant='body1'>- Add/Update ingredients and packaging</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>    \r\n            </Grid>\r\n\r\n            <Grid item sm={12} md={4}>\r\n                <Card elevation='4' sx={{height: '100%'}}>\r\n                    <CardActionArea sx={{height: '100%'}} onClick={() => handlePageClick('reports')}>\r\n                        <CardContent>\r\n                            <Typography component='div' variant='h5'>Reports</Typography>\r\n                            <Typography component='div' variant='body1'>- View reports</Typography>\r\n                            <Typography component='div' variant='body1'>- Print or send reports via email</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>    \r\n            </Grid>\r\n\r\n            <Grid item sm={12} md={4}>\r\n                <Card elevation='4' sx={{height: '100%'}}>\r\n                    <CardActionArea sx={{height: '100%'}} onClick={() => handlePageClick('userList')}>\r\n                        <CardContent>\r\n                            <Typography component='div' variant='h5'>Administration</Typography>\r\n                            <Typography component='div' variant='body1'>- View users in the system</Typography>\r\n                            <Typography component='div' variant='body1'>- Add/Edit users</Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>    \r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default LandingPage;","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport { Container, Button, Typography } from '@mui/material'\r\n\r\n\r\nconst MealsPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h2>Meals Page</h2>\r\n            <Button variant='contained' onClick={() => handlePageClick('meals')}>\r\n                Meal Plan\r\n            </Button>\r\n            <Button variant='contained' onClick={() => handlePageClick('recipes')}>\r\n                Recipes\r\n            </Button>\r\n            <Button variant='contained' onClick={() => handlePageClick('stations')}>\r\n                Stations\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default MealsPage;","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport { Container, Button, Typography } from '@mui/material'\r\n\r\n\r\nconst LandingPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    // HTML structure of this component\r\n    return (\r\n        <Fragment>\r\n            <h2>Landing Page</h2>\r\n            <Button variant='contained' onClick={() => props.handlePageClick('ingredients')}>\r\n                Ingredients\r\n            </Button>\r\n            <Button variant='contained' onClick={() => props.handlePageClick('packaging')}>\r\n                Packaging\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default LandingPage;","import AllergiesList from './AllergiesList.js'\r\nimport React from 'react'\r\n\r\nimport {TableRow, TableCell, Input, Button} from '@mui/material'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableHouseholdRow = (props) => {\r\n    const {thisKey, editFormData, updateHousehold, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const hh = editFormData;\r\n    const key = thisKey;\r\n\r\n    return (\r\n        <TableRow key={key} sx={{ '&:last-child TableCell, &:last-child th': { border: 0 } }}>\r\n            <TableCell align='right'><Input type=\"text\" name=\"hh_name\" defaultValue={hh.hh_name} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input type=\"number\" name=\"num_adult\" defaultValue={hh.num_adult} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input type=\"number\" name=\"num_child_lt_6\" defaultValue={hh.num_child_lt_6} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input type=\"number\" name=\"num_child_gt_6\" defaultValue={hh.num_child_gt_6} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='veg_flag' type=\"checkbox\" checked={hh.veg_flag} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='gf_flag' type='checkbox' checked={hh.gf_flag} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='a_flag' type='checkbox' checked={hh.a_flag} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='sms_flag' type='checkbox' checked={hh.sms_flag} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='paused_flag' type='checkbox' checked={hh.paused_flag} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='phone' type='tel' pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}' minLength='12' maxLength='12' defaultValue={hh.phone} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='sTableRoweet' type='text' defaultValue={hh.sTableRoweet} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='city' type='text' defaultValue={hh.city} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='pcode' type='number' minLength='5' maxLength='5' defaultValue={hh.pcode} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><Input name='state' type='text' minLength='2' maxLength='2' defaultValue={hh.state} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><textarea name='delivery_notes' defaultValue={hh.delivery_notes} onChange={handleEditFormChange}/></TableCell>\r\n            <TableCell align='right'><AllergiesList allergies={hh.hh_allergies} isEditable={true} updateAllergies={updateAllergies} updateEditForm={updateEditForm}/></TableCell>\r\n            <TableCell align='right'><Button type='Submit' onClick={()=>{updateHousehold(key)}}>Save</Button></TableCell>\r\n            <TableCell align='right'><Button onClick={handleCancelClick}>Cancel</Button></TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default EditableHouseholdRow;","import AllergiesList from './AllergiesList.js'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//import Button from 'react-bootstrap/Button'\r\nimport { Formik } from \"formik\"\r\nimport { Grid, TextField, Typography, Paper, Button, IconButton, Box, TableRow, TableCell } from \"@mui/material\"\r\nimport EditIcon from '@mui/icons-material/Edit'\r\nimport DeleteIcon from '@mui/icons-material/Delete' \r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport * as yup from \"yup\"\r\nimport { Check } from '@mui/icons-material';\r\n//import { Link, useNavigate } from \"react-router-dom\"\r\n\r\n// Household Row component\r\n// Takes: key of current row, the state of the Household Page's hh list, deleteHousehold callback, handleEditClick callback\r\n// Returns a household table row component \r\nconst HouseholdRow = (props) => {\r\n    const {thisKey, household, deleteHousehold, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const hh = household;\r\n    const [initialValues, setInitialValues] = useState({\r\n        name: \"\",\r\n        color: \"\"\r\n    });\r\n\r\n    const TrueMarker = ((bool) => {\r\n        if (bool) {\r\n            return <Check></Check>\r\n        }\r\n    });\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <TableRow key={key} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n            <TableCell align='left'>{hh.hh_name}</TableCell>\r\n            <TableCell align='left'>{hh.num_adult}</TableCell>\r\n            <TableCell align='left'>{hh.num_child_lt_6}</TableCell>\r\n            <TableCell align='left'>{hh.num_child_gt_6}</TableCell>\r\n            <TableCell align='left'>{TrueMarker(Boolean(hh.veg_flag))}</TableCell>\r\n            <TableCell align='left'>{TrueMarker(Boolean(hh.gf_flag))}</TableCell>\r\n            \r\n            <TableCell align='left'>{TrueMarker(Boolean(hh.sms_flag))}</TableCell>\r\n            <TableCell align='left'>{TrueMarker(Boolean(hh.paused_flag))}</TableCell>\r\n            <TableCell align='left'>{hh.phone}</TableCell>\r\n            <TableCell align='left'>{hh.street}</TableCell>\r\n            <TableCell align='left'>{hh.city}</TableCell>\r\n            <TableCell align='left'>{hh.pcode}</TableCell>\r\n            <TableCell align='left'>{hh.state}</TableCell>\r\n            <TableCell align='left'>{hh.delivery_notes}</TableCell>\r\n            <TableCell align='left'><AllergiesList allergies={hh.hh_allergies} isEditable={false}/></TableCell>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <TableCell align='right'>\r\n                <Box sx={{ display: \"flex\",\r\n                justifyContent: \"flex-end\"}}>\r\n                    {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n                    <IconButton size=\"large\"\r\n                        onClick={()=> handleEditClick(key)}>\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                    {/* When delete is clicked, deleteUser is called with this row's key */}\r\n                    <IconButton size=\"large\"\r\n                        onClick={() => deleteHousehold(key)}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default HouseholdRow;","import React from 'react'\r\n\r\n// Error message component\r\n// Takes error text\r\n// Returns an <h3> error message component\r\nconst Error = (props) => {\r\n    const errorText = props.text;\r\n    return (\r\n        <h3 style={{color: 'red'}}>{errorText}</h3>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdForm from './HouseholdForm.js'\r\nimport EditableHouseholdRow from './EditableHouseholdRow.js'\r\nimport HouseholdRow from './HouseholdRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\n//import './HouseholdList.css'\r\nimport {Table, TableHead, TableRow, TableCell, TableBody, Paper} from '@mui/material'\r\n\r\n// Household List Component\r\nexport default function HouseholdList() {\r\n    const [households, setHouseholds] = useState(undefined);\r\n    const [editHouseholdID, setEditHouseholdID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState();\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Household Name already found!\"/>\r\n            )\r\n        }\r\n        if (errCode = 'empty') {\r\n                setErrorComponent(\r\n                  <Error text=\"There doesn't seem to be any data!\"/>\r\n                )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n    useEffect(() => {\r\n        getDBHouseholds();\r\n    }, []);\r\n    const getDBHouseholds = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "households\"\r\n          }).then((response)=>{\r\n            console.log(response.data[0])\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n    const postDBHouseholds = () => {\r\n        console.log(households);\r\n        axios({\r\n            method: \"POST\",\r\n            url: \process.env.REACT_APP_API_URL + "households/\",\r\n            data: households\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n    const addHousehold = (household) => {\r\n        console.log(JSON.stringify(household));\r\n        // Check to see if we already have a duplicate Household Name\r\n        if (!households.find((HH) => HH.hh_name === household.hh_name))\r\n        {\r\n            axios({\r\n                method: \"POST\",\r\n                url: \process.env.REACT_APP_API_URL + "households/\",\r\n                data: household\r\n              }).then((response)=>{\r\n                getDBHouseholds();\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this household is already in households list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n    const deleteHousehold = (key) => {\r\n        const householdID = key; \r\n        axios({\r\n            method: \"DELETE\",\r\n            url: \process.env.REACT_APP_API_URL + "households/\"+households[key].hh_name,\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n        });\r\n    }\r\n    const updateHousehold = (key) => {\r\n        let thisName = households[key].hh_name;\r\n        console.log(JSON.stringify(editFormData));\r\n        axios({\r\n            method: \"PATCH\",\r\n            url: \process.env.REACT_APP_API_URL + "households/\"+thisName+'/',\r\n            data: editFormData\r\n          }).then((response)=>{\r\n            getDBHouseholds();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setEditHouseholdID(null);\r\n        clearError();\r\n    }\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n        // Create new household object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new household object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n    const handleEditClick = (key) => {\r\n        setEditHouseholdID(key);\r\n        setEditFormData(households[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditHouseholdID(null);\r\n        setEditFormData(null);\r\n    }\r\n    if (households === undefined) {\r\n        return (<>loading</>);\r\n    }\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div>\r\n          <h3>Clients</h3>\r\n            <Table size='small' component={Paper} stickyHeader sx={{minWidth: 650}}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align='left'>Name</TableCell>\r\n                        <TableCell align='left'>Adults</TableCell>\r\n                        <TableCell align='left'>Children 0-6</TableCell>\r\n                        <TableCell align='left'>Children 7-17</TableCell>\r\n                        <TableCell align='left'>V</TableCell>\r\n                        <TableCell align='left'>GF</TableCell>\r\n                        <TableCell align='left'>SMS</TableCell>\r\n                        <TableCell align='left'>Paused</TableCell>\r\n                        <TableCell align='left'>Phone Number</TableCell>\r\n                        <TableCell align='left'>Street</TableCell>\r\n                        <TableCell align='left'>City</TableCell>\r\n                        <TableCell align='left'>Postal Code</TableCell>\r\n                        <TableCell align='left'>State</TableCell>\r\n                        <TableCell align='left'>Delivery Notes</TableCell>\r\n                        <TableCell align='left'>Allergies</TableCell>\r\n                        <TableCell align='left'>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {/* Show a row for each household in households.*/}\r\n                    {households.map((household, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this household is the one to be edited, show an editable row instead\r\n                                editHouseholdID === thisKey \r\n                                ? <EditableHouseholdRow thisKey={thisKey} editFormData={editFormData} updateHousehold={updateHousehold} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <HouseholdRow thisKey={thisKey} household={household} deleteHousehold={deleteHousehold} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                    {/* If the list is empty display EmptyTableMessage */}\r\n                    {households.length < 1 ? handleError('empty') : null}\r\n                </TableBody>\r\n            </Table>\r\n            <h3>Add A Household</h3>\r\n            <HouseholdForm addHousehold={addHousehold}></HouseholdForm>\r\n            <button onClick={postDBHouseholds}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nimport React, {useState} from 'react'\r\n\r\nexport default function ReusableTable(props) {\r\n    // const data = [\r\n    //     {hh_name: 'Anom', num_adult: 2, num_child: 1, veg_flag: false, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '123-456-7890', street: '1234 aStreet', city: 'aCity', pcode: '12345', state: 'MI', delivery_notes: 'N/A', allergies: []},\r\n    //     {hh_name: 'Jean', num_adult: 1, num_child: 1, veg_flag: true, gf_flag: true, a_flag: false, sms_flag: true, paused_flag: false, phone: '234-567-8912', street: '4321 bStreet', city: 'bCity', pcode: '54321', state: 'MI', delivery_notes: 'Leave on porch', allergies: [{aType: 'Peanut'}]}\r\n    // ]\r\n\r\n    const [dataState, setDataState] = useState(props.data);\r\n\r\n    console.log(dataState);\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                {Object.keys(dataState[1]).map((thisKey) => {\r\n                    return (\r\n                        <th>{thisKey}</th>\r\n                    )\r\n                })}\r\n            </thead>\r\n            <tbody>\r\n                {dataState.map((thisData, thisKey) => {\r\n                    // console.log(props.editID, thisKey);\r\n                    return(\r\n                        <tr key={thisKey}>\r\n                        {Object.values(thisData).map((thisValue, colKey) => {\r\n                            let ret = null;\r\n                            if (props.editID === thisKey) {\r\n                                ret = <input name={Object.keys(props.metadata)[colKey]} type={props.metadata[colKey]} value={thisValue}/>\r\n                            }\r\n                            else {\r\n                                if (thisValue === null) {\r\n                                    ret = (<td>N/A</td>)\r\n                                }\r\n                                else if (typeof thisValue === 'object' && thisValue) {\r\n                                    console.log(typeof thisValue);\r\n                                    ret = (<td><ReusableTable data={thisValue}/></td>)\r\n                                }\r\n                                else if (typeof thisValue !== 'object') {\r\n                                    ret = (<td>{thisValue}</td>)\r\n                                }\r\n                            }\r\n                            \r\n                            return(ret)\r\n                        })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdForm from './HouseholdForm.js'\r\nimport EditableHouseholdRow from './EditableHouseholdRow.js'\r\nimport HouseholdRow from './HouseholdRow.js'\r\nimport ReusableTable from '../ReusableTable.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\n\r\n// Household List Component\r\nexport default function HouseholdList() {\r\n\r\n    const [households, setHouseholds] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        getDBHouseholds();\r\n    }, []);\r\n\r\n    const getDBHouseholds = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"http://localhost:8000/api/households-report\"\r\n          }).then((response)=>{\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    if (households === undefined) {\r\n        return (<>loading</>);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div className='table-div'>\r\n            {/* Show a row for each household in households.*/}\r\n            <ReusableTable data={households}/>\r\n        </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm.js'\r\n\r\n// Kainoa Borges\r\n\r\n// Ingredient Form component\r\n// Takes AddIngredient callback function\r\n// Returns a form that can be used to define a new ingredient object in a IngredientList\r\nconst IngredientForm = (props) => {\r\n\r\n  const supplierList = props.suppliers;\r\n  \r\n  const clearIngredient = () => {\r\n    return {\r\n      i_id: null,\r\n      ingredient_name: \"\",\r\n      pkg_type: \"\",\r\n      storage_type: \"\",\r\n      in_date: null,\r\n      in_qty: null,\r\n      ingredient_usage: [],\r\n      qty_on_hand: null,\r\n      unit: \"\",\r\n      exp_date: null,\r\n      unit_cost: null,\r\n      flat_fee: null,\r\n      isupplier_id: null,\r\n      pref_isupplier_id: null\r\n  }\r\n  }\r\n\r\n  // The state of this Ingredient Form with each attribute of Ingredient\r\n  const [ingredient, setIngredient] = useState(clearIngredient());\r\n\r\n    // Handle form submission (prevent refresh, pass ingredient to addIngredient, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass ingredient object to IngredientList callback\r\n      props.addIngredient(ingredient)\r\n      // Clear the form state\r\n      setIngredient(clearIngredient());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newIngredient = {...ingredient};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newIngredient[names[i]] = values[i];\r\n      }\r\n      setIngredient(newIngredient);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new ingredient object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic ingredient info */}\r\n          <label htmlFor=\"ingredient_name\">Ingredient Name: </label>\r\n          <input name=\"ingredient_name\" type=\"text\" maxLength='30' value={ingredient.ingredient_name} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='pkg_type'>Package Type: </label>\r\n          <input name='pkg_type' type=\"text\" value={ingredient.pkg_type} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='storage_type'>Storage Type: </label>\r\n          <input name='storage_type' type=\"text\" value={ingredient.storage_type} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor=\"in_date\">In Date: </label>\r\n          <input name=\"in_date\" type=\"date\" value={ingredient.in_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"in_qty\">In Quantity: </label>\r\n          <input name=\"in_qty\" type=\"number\" value={ingredient.in_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit\">Unit: </label>\r\n          <input name=\"unit\" type=\"text\" value={ingredient.unit} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"exp_date\">Exp Date: </label>\r\n          <input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit_cost\">Unit Cost: </label>\r\n          <input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={ingredient.unit_cost} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"flat_fee\">Flat Fee: </label>\r\n          <input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={ingredient.flat_fee} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"isupplier\">Supplier: </label>\r\n          <select name=\"isupplier_id\" onChange={handleFormChange}>\r\n            <option selected={true} value={null}>N/A</option>\r\n            {/* Get supplier_name from  */}\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option value={supplier.s_id}>{supplier.s_name}</option>\r\n              )\r\n            })}\r\n          </select>\r\n\r\n          <label htmlFor=\"pref_isupplier\"> Preferred Supplier: </label>\r\n          <select name=\"pref_isupplier_id\">\r\n            <option selected={true} value={null}>N/A</option>\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option value={supplier.s_id}>{supplier.s_name}</option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          <br /><button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default IngredientForm","import React, {useState, useEffect, Fragment} from 'react'\r\n\r\nexport default function EditableIngUsageTable(props) {\r\n    const [currUsage, setCurrUsage] = useState({used_date: null, used_qty: null});\r\n    const [ingUsages, setIngUsages] = useState(props.ingredient_usage);\r\n\r\n    // useEffect(()=>{\r\n    //   setIngUsages(props.editFormData.ingredient_usage);\r\n    // }, props.editFormData);\r\n    \r\n    const handleKeyUsageChange = (event) => {\r\n      const key = event.target.getAttribute('dataKey');\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.value;\r\n      let newUsage = {...ingUsages[key]};\r\n      newUsage[fieldName] = fieldValue;\r\n      let newIngUsages = [...ingUsages];\r\n      console.log('eiut line18 ', key);\r\n      newIngUsages[key] = newUsage;\r\n      console.log('eiut line20 ', newIngUsages);\r\n      setIngUsages(newIngUsages);\r\n      props.updateEditForm('ingredient_usage', newIngUsages);\r\n    }\r\n\r\n    const handleUsageChange = (event) => {\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.value;\r\n      const newUsage = {...currUsage};\r\n      newUsage[fieldName] = fieldValue;\r\n      setCurrUsage(newUsage);\r\n    }\r\n\r\n    const handleAddUsage = (event) => {\r\n      event.preventDefault();\r\n      const newUsages = [...ingUsages, currUsage];\r\n      setIngUsages(newUsages);\r\n      setCurrUsage({used_date: '', used_qty: ''});\r\n      props.updateEditForm('ingredient_usage', newUsages);\r\n    }\r\n\r\n    const handleDeleteUsage = (thisKey) => {\r\n        const newUsages = [...ingUsages];\r\n        newUsages.splice(thisKey, 1);\r\n        setIngUsages(newUsages);\r\n        props.updateEditForm('ingredient_usage', newUsages);\r\n    }\r\n\r\n    if (ingUsages) {\r\n        return (\r\n            <table>\r\n                    <th>used date</th>\r\n                    <th>used qty</th>\r\n                {ingUsages.map((usage, thisKey) => {\r\n                    return (\r\n                        <tr key={thisKey}>\r\n                            <td><input dataKey={thisKey} name=\"used_date\" type=\"date\" value={usage.used_date} onChange={handleKeyUsageChange}/></td>\r\n                            <td><input dataKey={thisKey} name=\"used_qty\" value={usage.used_qty} onChange={handleKeyUsageChange}/></td>\r\n                            <td><button onClick={() => handleDeleteUsage(thisKey)}>Delete</button></td>\r\n                        </tr>\r\n                        )\r\n                    })\r\n                }\r\n                    <tr>\r\n                      <td><input name=\"used_date\" value={currUsage.used_date} type=\"date\" onChange={handleUsageChange}/></td>\r\n                      <td><input name=\"used_qty\" value={currUsage.used_qty} onChange={handleUsageChange}/></td>\r\n                      <td><button onClick={handleAddUsage}>Add</button></td>\r\n                    </tr>\r\n            </table>\r\n        )\r\n    }\r\n}","import React, {useState, useEffect, Fragment} from 'react'\r\nimport EditableIngUsageTable from '../Ingredients/EditableIngUsageTable.js'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditableIngredientRow = (props) => {\r\n    const {thisKey, editFormData, suppliers, updateIngredient, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const ingredient = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n          <td><input name=\"ingredient_name\" type=\"text\" maxLength='30' value={ingredient.ingredient_name} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='pkg_type' type=\"text\" maxLength='30' value={ingredient.pkg_type} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='storage_type' type=\"text\" maxLength='30' value={ingredient.storage_type} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name=\"in_date\" type=\"date\" value={ingredient.in_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"in_qty\" type=\"number\" value={ingredient.in_qty} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"exp_date\" type=\"date\" value={ingredient.exp_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <EditableIngUsageTable editFormData={editFormData} updateEditForm={updateEditForm} ingredient_usage={ingredient.ingredient_usage}/>\r\n\r\n          <td></td>\r\n\r\n          <td><input name=\"unit\" type=\"text\" value={ingredient.unit} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={ingredient.unit_cost} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={ingredient.flat_fee} onChange={handleEditFormChange}/></td>\r\n\r\n          <td>\r\n            <select name=\"isupplier_id\" onChange={handleEditFormChange}>\r\n              <option selected={true} value={null}>N/A</option>\r\n              {suppliers.map((supplier, key) => {\r\n                const thisKey = key;\r\n                const isSelected = (suppliers[thisKey].s_id == ingredient.isupplier_id)\r\n                return(\r\n                  <option selected={isSelected} value={supplier.s_id}>{supplier.s_name}</option>\r\n                )\r\n              })}  \r\n            </select>\r\n          </td>\r\n\r\n          <td>\r\n            <select name=\"pref_isupplier_id\" onChange={handleEditFormChange}>\r\n              <option selected={true} value={null}>N/A</option>\r\n              {suppliers.map((supplier, key) => {\r\n                const thisKey = key;\r\n                const isSelected = (suppliers[thisKey].s_id == ingredient.pref_isupplier_id)\r\n                return(\r\n                  <option selected={isSelected} value={supplier.s_id}>{supplier.s_name}</option>\r\n                )\r\n              })}  \r\n            </select>\r\n          </td>\r\n\r\n          <td><button onClick={()=>{updateIngredient(key)}}>Save</button></td>\r\n          <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableIngredientRow;","import React from 'react'\r\n\r\n// Ingredient Row component\r\n// Takes: key of current row, the state of the Ingredient Page's ingredient list, deleteIngredient callback, handleEditClick callback\r\n// Returns a Ingredient table row component \r\nconst IngredientRow = (props) => {\r\n    const {thisKey, ingredient, deleteIngredient, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const ing = ingredient;\r\n\r\n    const IngUsageTable = (props) => {\r\n        const ing_usages = props.ingredient_usages\r\n        if (ing_usages) {\r\n            // console.log(JSON.stringify(this_ing.usages))\r\n            if (ing_usages.length > 0) {\r\n                return(\r\n                    <table>\r\n                            <th>used date</th>\r\n                            <th>used qty</th>\r\n                        {ing_usages.map((usage, key) => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{usage.used_date}</td>\r\n                                    <td>{usage.used_qty}</td>\r\n                                </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                        );\r\n            }\r\n        }\r\n        else {\r\n            return\r\n        }\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{ing.ingredient_name}</td>\r\n            <td>{ing.pkg_type}</td>\r\n            <td>{ing.storage_type}</td>\r\n            <td>{String(ing.in_date)}</td>\r\n            <td>{String(ing.in_qty)}</td>\r\n            <td>{ing.exp_date}</td>\r\n            <td>\r\n                <IngUsageTable ingredient_usages={ing.ingredient_usage}/>\r\n            </td>\r\n            <td>{ing.qty_on_hand}</td>\r\n            <td>{String(ing.unit)}</td>\r\n            <td>{String(ing.unit_cost)}</td>\r\n            <td>{String(ing.flat_fee)}</td>\r\n            <td>{ing.isupplier ? ing.isupplier.s_name : 'N/A'}</td>\r\n            <td>{ing.pref_isupplier ? ing.pref_isupplier.s_name : 'N/A'}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteIngredient is called with this row's key */}\r\n            <td><button onClick={() => deleteIngredient(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default IngredientRow;","import React, {Fragment, useState, useEffect, Suspense} from 'react'\r\nimport axios from 'axios'\r\nimport IngredientForm from './IngredientForm.js'\r\nimport EditableIngredientRow from './EditableIngredientRow.js'\r\nimport IngredientRow from './IngredientRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './IngredientList.css'\r\nimport InventoryPage from '../InventoryPage'\r\n\r\n\r\n// Ingredient List Component\r\nexport default function IngredientList() {\r\n    const [ingredients, setIngredients] = useState(undefined);\r\n    const [suppliers, setSuppliers] = useState(undefined);\r\n    const [editIngredientID, setEditIngredientID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState({\r\n        i_id: null,\r\n        ingredient_name: \"\",\r\n        pkg_type: \"\",\r\n        storage_type: \"\",\r\n        in_date: null,\r\n        in_qty: null,\r\n        ingredient_usage: [],\r\n        qty_on_hand: null,\r\n        unit: \"\",\r\n        exp_date: null,\r\n        unit_cost: null,\r\n        flat_fee: null,\r\n        isupplier_id: null,\r\n        pref_isupplier_id: null\r\n    });\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n    const [loadingComponent, setLoadingComponent] = useState(null);\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient ID already found!\"/>\r\n            )\r\n        } \r\n        else if (errCode === 'empty') {\r\n            setErrorComponent(\r\n                <Error text=\"There doesn't seem to be any data!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDBIngredients();\r\n        getDBSuppliers();\r\n    }, []);\r\n\r\n    const getDBSuppliers = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "suppliers\"\r\n          }).then((response)=>{\r\n            setSuppliers(response.data);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const getDBIngredients = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        setLoadingComponent(<Error text=\"LOADING DATA...\"/>);\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "ingredient-inventory\"\r\n          }).then((response)=>{\r\n            const ingData = response.data\r\n            setIngredients(ingData);\r\n            setLoadingComponent(null);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBIngredients = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/ingredients/\",\r\n            data: ingredients\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const addIngredient = (ingredient) => {\r\n        const lastID = ingredients[ingredients.length - 1]['i_id'];\r\n        ingredient['i_id'] = lastID + 1;\r\n        axios({\r\n            method: \"POST\",\r\n            url:\process.env.REACT_APP_API_URL + "ingredient-inventory/\",\r\n            data: ingredient\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        clearError();\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        // if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        // {\r\n        //     let newIngredients = [...ingredients, ingredient];\r\n        //     setIngredients(newIngredients);\r\n        //     clearError();\r\n        // }\r\n        // else {\r\n        //     // If this ingredient is already in ingredients list, display error message\r\n        //     handleError('DuplicateKey');\r\n        // }\r\n    }\r\n\r\n    const deleteIngredient = (key) => {\r\n        const ingID = ingredients[key]['i_id']; \r\n        axios({\r\n            method: \"DELETE\",\r\n            url:\process.env.REACT_APP_API_URL + "ingredient-inventory/\"+ingID+'/',\r\n          }).then((response)=>{\r\n            getDBIngredients();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const updateIngredient = (key) => {\r\n        let thisID = ingredients[key]['i_id'];\r\n        if (ingredients.find((ing) => ing.i_id === thisID))\r\n        {\r\n            setEditIngredientID(null);\r\n            axios({\r\n                method: \"PATCH\",\r\n                url:\process.env.REACT_APP_API_URL + "ingredient-inventory/\"+thisID+'/',\r\n                data: editFormData\r\n              }).then((response)=>{\r\n                getDBIngredients();\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (name, value) => {\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[name] = value;\r\n        setEditFormData(newEditFormData);\r\n        console.log(editFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditIngredientID(key);\r\n        setEditFormData(ingredients[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditIngredientID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    if (ingredients === undefined || suppliers === undefined) {\r\n        return (<>loading</>)\r\n    }\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <InventoryPage />\r\n            <h3>Ingredients</h3>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Ingredient Name</th>\r\n                        <th>Package Type</th>\r\n                        <th>Storage Type</th>\r\n                        <th>Date In</th>\r\n                        <th>Qty In</th>\r\n                        <th>Expiration Date</th>\r\n                        <th>Usages</th>\r\n                        <th>Qty On Hand</th>\r\n                        <th>Unit</th>\r\n                        <th>Unit Cost</th>\r\n                        <th>Flat Fee</th>\r\n                        <th>Supplier</th>\r\n                        <th>Preferred Supplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {ingredients.map((ingredient, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment key={thisKey}>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editIngredientID === thisKey \r\n                                ? <EditableIngredientRow thisKey={thisKey} editFormData={editFormData} suppliers={suppliers} updateIngredient={updateIngredient} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <IngredientRow thisKey={thisKey} ingredient={ingredient} deleteIngredient={deleteIngredient} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                    {/* {ingredients.length < 1 ? handleError('empty') : null} */}\r\n                </tbody>\r\n            </table>\r\n            {loadingComponent}\r\n            <h3>Add An Ingredient</h3>\r\n            <IngredientForm addIngredient={addIngredient} suppliers={suppliers}></IngredientForm>\r\n            <button onClick={postDBIngredients}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\n\r\n// Angela McNeese\r\n\r\n// Station Form component\r\n// Takes AddStation callback function\r\n// Returns a form that can be used to define a new Station object in a StationList\r\nconst StationForm = (props) => {\r\n  \r\n  const HouseholdsList = props.households;\r\n\r\n  const clearStation = () => {\r\n    return {\r\n      stn_name: \"\",\r\n      num_servings: undefined,\r\n      household: [],\r\n      hh_allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this Station Form with each attribute of Station, using the clearStation helper function\r\n    const [station, setStation] = useState(clearStation());\r\n\r\n    // Handle form submission (prevent refresh, pass Station to addStation, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass Station object to StationList callback\r\n        props.addStation(station)\r\n      // Clear the form state\r\n        setStation(clearStation());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newStation = {...station};\r\n      for (let i = 0; i < names.length; i++) {\r\n          newStation[names[i]] = values[i];\r\n        // console.log('(' + names[i] + ', ' + values[i] + ')', newStation.aFlag);\r\n      }\r\n        setStation(newStation);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n      // Create new Station object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic station info */}\r\n          <label htmlFor=\"stn_name\">Name: </label>\r\n            <input name=\"stn_name\" id=\"stn_name\" type=\"text\" maxLength='50' required={true} value={station.stn_name} onChange={handleFormChange}/>\r\n          <br />\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default StationForm","import React from 'react'\r\n\r\n// Editable Station Row\r\n// Takes: key of current row, the state of the Station Page's editFormData, updateStation callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable Station table row component\r\nconst EditableStationRow = (props) => {\r\n    const { thisKey, editFormData, updateStation, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const s = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"text\" name=\"stn_name\" defaultValue={s.stn_name} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"number\" name=\"num_servings\" defaultValue={s.num_servings} onChange={handleEditFormChange}/></td>\r\n\r\n            <td><button type='Submit' onClick={()=>{updateStation(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableStationRow;","import React from 'react'\r\nimport AllergiesList from '../Households/AllergiesList.js'\r\n\r\n// Station Row component\r\n// Takes: key of current row, the state of the Station Page's list, deleteStation callback, handleEditClick callback\r\n// Returns a Station table row component \r\nconst StationRow = (props) => {\r\n    const {thisKey, station, deleteStation, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const s = station;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{s.stn_name}</td>\r\n            <td></td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteStation is called with this row's key */}\r\n            <td><button onClick={() => deleteStation(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default StationRow;","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport StationForm from './StationForm.js'\r\nimport EditableStationRow from './EditableStationRow.js'\r\nimport StationRow from './StationRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport { Button, Box, Paper, Table, TableBody, \r\n    TableCell, TableContainer, TableHead, TableRow, \r\n    IconButton } from \"@mui/material\"\r\nimport EditIcon from \"@mui/icons-material\"\r\nimport MealsPage from '../MealsPage'\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\"\r\n\r\nimport './StationList.css'\r\n\r\n// Station List Component\r\n\r\nexport default function StationList() {\r\n    const [recipes] = useState(undefined);\r\n    const [stations, setStations] = useState(undefined);\r\n    const [households, setHouseholds] = useState(undefined);\r\n    const [editStationID, setEditStationID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState({\r\n        stn_name: \"\",\r\n        household: []\r\n    });\r\n\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n    const [loadingComponent, setLoadingComponent] = useState(null);\r\n    \r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Station Name already found!\"/>\r\n            )\r\n        }\r\n        else if (errCode = 'empty') {\r\n            setErrorComponent(\r\n                <Error text=\"There doesn't seem to be any data!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n//        setStations(getDBStations());\r\n        getDBStations();\r\n        getDBHhref();\r\n    }, []);\r\n\r\n    const getDBHhref = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "households\"\r\n        }).then((response)=>{\r\n            console.log(response.data[0])\r\n            const hhData = response.data\r\n            setHouseholds(hhData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const getDBStations = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        setLoadingComponent(<Error text=\"LOADING DATA...\"/>);\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "stations\"\r\n          }).then((response)=>{\r\n            const stnData = response.data\r\n            setStations(stnData);\r\n            setLoadingComponent(null);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBStations = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"/stations/\",\r\n            data: stations\r\n          }).then((response)=>{\r\n              getDBStations();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const addStation = (station) => {\r\n        const lastID = stations[stations.length - 1]['s_id'];\r\n        station['s_id'] = lastID + 1;\r\n        axios({\r\n            method: \"POST\",\r\n            url:\process.env.REACT_APP_API_URL + "stations/\",\r\n            data: station\r\n          }).then((response)=>{\r\n            getDBStations();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        clearError();\r\n    }\r\n    const deleteStation = (key) => {\r\n        const stationID = key; \r\n        axios({\r\n            method: \"DELETE\",\r\n            url: \process.env.REACT_APP_API_URL + "stations/\" + stations[key].stn_name,\r\n          }).then((response)=>{\r\n              setStations(getDBStations());\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n        });\r\n    }\r\n\r\n    const updateStation = (key) => {\r\n        let thisName = stations[key].stn_name;\r\n        console.log(JSON.stringify(editFormData));\r\n        axios({\r\n            method: \"PATCH\",\r\n            url: \process.env.REACT_APP_API_URL + "stations/\"+thisName+'/',\r\n            data: editFormData\r\n          }).then((response)=>{\r\n              setStations(getDBStations());\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setEditStationID(null);\r\n        clearError();\r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n        // Create new Station object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new Station object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditStationID(key);\r\n        setEditFormData(stations[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditStationID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    if (stations === undefined || households === undefined) {\r\n        return (<>loading</>);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n            <div className='table-div'>\r\n            <MealsPage />\r\n                <h3>Prep Stations</h3>\r\n                <table className='main-table'>\r\n                    <TableContainer component={Paper}>\r\n                        <Table sx={{ minWidth: 360 }} size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"left\">\r\n                                        <h4>Recipe Selection</h4>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {stations.map((station, key) => {\r\n                                    const thisKey = key\r\n                                    return (\r\n                                        <Fragment key={thisKey}>\r\n                                            {\r\n                                                // If this Station is the one to be edited, show an editable row instead\r\n                                                editStationID === thisKey\r\n                                                    ? <EditableStationRow thisKey={thisKey} editFormData={editFormData} households={households} updateStation={updateStation} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick} />\r\n                                                    : <StationRow thisKey={thisKey} station={station} deleteStation={deleteStation} handleEditClick={handleEditClick} />}\r\n                                        </Fragment>\r\n                                    )\r\n                                })}\r\n                                {/* If the list is empty display EmptyTableMessage */}\r\n                                {stations.length < 1 ? handleError('empty') : null}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </table>\r\n                <table className='main-table'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Station Select Dropdown</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {/* Show a row for each station in stations.*/}\r\n                        {stations.map((station, key) => {\r\n                            const thisKey = key\r\n                            return (\r\n                                <Fragment key={thisKey}>\r\n                                    {\r\n                                        // If this Station is the one to be edited, show an editable row instead\r\n                                        editStationID === thisKey\r\n                                            ? <EditableStationRow thisKey={thisKey} editFormData={editFormData} households={households} updateStation={updateStation} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick} />\r\n                                            : <StationRow thisKey={thisKey} station={station} deleteStation={deleteStation} handleEditClick={handleEditClick} />}\r\n                                </Fragment>\r\n                            )\r\n                        })}\r\n                        {/* If the list is empty display EmptyTableMessage */}\r\n                        {stations.length < 1 ? handleError('empty') : null}\r\n                    </tbody>\r\n                </table>\r\n                {loadingComponent}\r\n\r\n                <h3>Add A Station</h3>\r\n                <StationForm addStation={addStation}></StationForm>\r\n                <button onClick={postDBStations}>Submit Changes</button>\r\n                {errorComponent}\r\n                {displayMsgComponent}\r\n            </div>\r\n    )\r\n}\r\n/*\r\n<table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th># Adults</th>\r\n                        <th># Children 0-6</th>\r\n                        <th># Children 7-17</th>\r\n                        <th>SMS</th>\r\n                        <th>Vegan</th>\r\n                        <th>Allergies</th>\r\n                        <th>Gluten Free</th>\r\n                        <th>Lactose Free</th>\r\n                        <th>Paused</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each station in stations.}\r\n                    {households.map((hhref, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment key={thisKey}>\r\n                                {\r\n                                // If this Station is the one to be edited, show an editable row instead\r\n                                <HhrefRow thisKey={thisKey} hhref={hhref}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                    {/* If the list is empty display EmptyTableMessage }\r\n                    {households.length < 1 ? handleError('empty') : null}\r\n                </tbody>\r\n            </table>\r\n        */","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport axios from 'axios'\r\nimport HouseholdsReport from './Households/HouseholdsReport.js'\r\nimport { Container, Button, Typography } from '@mui/material'\r\n\r\n\r\nconst ReportsPage = () => {\r\n    const [currPage, setCurrPage] = useState();\r\n    \r\n    const handlePageClick = (pageName) => {\r\n        console.log(pageName)\r\n        if (pageName === 'households-report') setCurrPage(<HouseholdsReport handlePageClick={handlePageClick} />);\r\n        else if (pageName === 'households-report') setCurrPage(<HouseholdsReport handlePageClick={handlePageClick} />);\r\n\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h2>Generate Report</h2>\r\n                <Button variant='contained' onClick={() => handlePageClick('households-report')}>\r\n                    Households Report\r\n                </Button>\r\n                <Button variant='contained' onClick={() => handlePageClick()}>\r\n                    Ingredients Report\r\n                </Button>\r\n                <Button variant='contained' onClick={() => handlePageClick()}>\r\n                    Packaging Report\r\n                </Button>\r\n                <Button variant='contained' onClick={() => handlePageClick()}>\r\n                    Cost Totals\r\n                </Button>\r\n                <Button variant='contained' onClick={() => handlePageClick()}>\r\n                    Menu Reports\r\n                </Button>\r\n                <Button variant='contained' onClick={() => handlePageClick()}>\r\n                    Purchasing Reports\r\n                </Button>\r\n                {currPage}\r\n            </header>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ReportsPage;","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { Fragment } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst UserPage = (props) => {\r\n    const handlePageClick = props.handlePageClick;\r\n    // HTML structure of this component\r\n    const [user, setUser] = useState(\r\n        {\r\n            username: '',\r\n            email: ''\r\n        }\r\n    );\r\n\r\n    const handleUser = (event) => {\r\n        const fieldName = event.target.name;\r\n        const fieldValue = event.target.value;\r\n        const thisUser = { ...user };\r\n        thisUser[fieldName] = fieldValue;\r\n        setUser(thisUser);\r\n    }\r\n   \r\n    // HTML structure of this component\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h3>User Account</h3>\r\n                <label htmlFor='username'>Username: </label>\r\n                <br /><label htmlFor='username'>Change Password: </label>\r\n                <br /><button onClick={() => handlePageClick('pwResetPage')}>\r\n                    Change Password\r\n                </button>\r\n                <br /><text>Account Type: </text>\r\n\r\n                <br /><text>Email: </text>\r\n                <br /><button onClick={() => handlePageClick('UserPage')}>\r\n                    Update Email\r\n                </button>\r\n            </header>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default UserPage;\r\n\r\n","import {useState} from 'react'\r\nimport React from 'react'\r\n\r\n// Angela McNeese\r\n\r\n// User Form component\r\n// Takes AddUser callback function\r\n// Returns a form that can be used to define a new User object in a UserList\r\nconst UserForm = (props) => {\r\n\r\n    const clearUser = () => {\r\n    return {\r\n      u_id: 0,\r\n      username: \"\",\r\n      password: \"\",\r\n      admin_flag: 0,\r\n      email: \"\"\r\n     \r\n     // hh_allergies: []\r\n    }\r\n  }\r\n\r\n  // The state of this User Form with each attribute of User, using the clearUser helper function\r\n    const [user, setUser] = useState(clearUser());\r\n\r\n    // Handle form submission (prevent refresh, pass User to addUser, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass User object to UserList callback\r\n        props.addUser(user)\r\n      // Clear the form state\r\n        setUser(clearUser());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n        const newUser = { ...user };\r\n      for (let i = 0; i < names.length; i++) {\r\n          newUser[names[i]] = values[i];\r\n        // console.log('(' + names[i] + ', ' + values[i] + ')', newUser.aFlag);\r\n      }\r\n        setUser(newUser);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n      // Create new User object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic User info */}\r\n          <label htmlFor='u_id'>User ID: </label>\r\n            <input name='u_id' id=\"u_id\" type=\"text\" value={user.u_id} onChange={handleFormChange} />\r\n\r\n          <label htmlFor='username'>Username: </label>\r\n            <input name='username' id=\"username\" type=\"text\" value={user.username} onChange={handleFormChange} />\r\n\r\n          <label htmlFor='password'>Password: </label>\r\n            <input name='password' id=\"password\" type=\"text\" value={user.password} onChange={handleFormChange} />\r\n\r\n          <label htmlFor='admin_flag'>User Level: </label>\r\n            <input name='admin_flag' id=\"admin_flag\" type=\"number\" value={user.admin_flag} onChange={handleFormChange} />\r\n\r\n          <label htmlFor='email'>Email: </label>\r\n            <input name='email' id=\"email\" type=\"text\" value={user.email} onChange={handleFormChange} />\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default UserForm","import React from 'react'\r\n\r\n// Editable User Row\r\n// Takes: key of current row, the state of the User Page's editFormData, updateUser callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable User table row component\r\nconst EditableUserRow = (props) => {\r\n    const { thisKey, editFormData, updateUser, handleEditFormChange, handleCancelClick, updateEditForm} = props\r\n    const u = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td><input type=\"number\" name=\"u_id\" defaultValue={u.u_id} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"text\" name=\"username\" defaultValue={u.username} onChange={handleEditFormChange}/></td>\r\n            <td><input type=\"text\" name=\"password\" defaultValue={u.password} onChange={handleEditFormChange} /></td>\r\n            <td><input type=\"number\" name=\"admin_flag\" defaultValue={u.admin_flag} onChange={handleEditFormChange} /></td>\r\n            <td><input type=\"email\" name=\"email\" defaultValue={u.email} onChange={handleEditFormChange} /></td>\r\n\r\n            <td><button type='Submit' onClick={() => { updateUser(key)}}>Save</button></td>\r\n            <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableUserRow;","import React, { useEffect, useState } from 'react'\r\nimport {Formik} from \"formik\";\r\nimport { TableCell, TextField, Typography, Paper, Button, Box, IconButton } from \"@mui/material\";\r\nimport * as yup from \"yup\";\r\nimport { Link, useNavigate }from \"react-router-dom\";\r\nimport EditIcon from \"@mui/icons-material/Edit\"\r\nimport DeleteIcon from \"@mui/icons-material/Delete\"\r\n\r\n// User Row component\r\n// Takes: key of current row, the state of the User Page's u list, deleteUser callback, handleEditClick callback\r\n// Returns a User table row component \r\nconst UserRow = (props) => {\r\n    const { thisKey, user, deleteUser, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const u = user;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <TableCell align=\"left\">\r\n                {u.u_id}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {u.username}\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                <text>*****</text>\r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {u.admin_flag}  \r\n            </TableCell>\r\n            <TableCell align=\"left\">\r\n                {u.email}\r\n            </TableCell>\r\n            <TableCell align=\"right\">\r\n                <Box sx={{ display: \"flex\",\r\n                justifyContent: \"flex-end\"}}>\r\n                    {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n                    <IconButton size=\"large\"\r\n                        onClick={()=> handleEditClick(key)}>\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                    {/* When delete is clicked, deleteUser is called with this row's key */}\r\n                    <IconButton size=\"large\"\r\n                        onClick={() => deleteUser(key)}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Box>\r\n            </TableCell>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default UserRow;","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport UserForm from './UserForm.js'\r\nimport EditableUserRow from './EditableUserRow.js'\r\nimport UserRow from './UserRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport {Formik} from \"formik\";\r\nimport { Container, Grid, TextField, Typography, Paper, Button, Box, IconButton } from \"@mui/material\";\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@mui/material\"\r\nimport * as yup from \"yup\";\r\nimport { Link, useNavigate }from \"react-router-dom\";\r\n\r\nimport './UserList.css'\r\n\r\n\r\n// User List Component\r\n\r\nexport default function UserList() {\r\n    const [users, setUsers] = useState(undefined);\r\n    const [editUserID, setEditUserID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState({\r\n        u_id: 0,\r\n        username: \"\",\r\n        password: \"\",\r\n        admin_flag: 0,\r\n        email: \"\"\r\n    });\r\n\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"User Name already found!\"/>\r\n            )\r\n        }\r\n        if (errCode = 'empty') {\r\n                return <Error text=\"There doesn't seem to be any data!\"/>\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUsers(getDBUsers());\r\n    }, []);\r\n\r\n    const getDBUsers = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "users\"\r\n          }).then((response)=>{\r\n            const uData = response.data\r\n            setUsers(uData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBUsers = () => {\r\n        console.log(users);\r\n        axios({\r\n            method: \"POST\",\r\n            url: \process.env.REACT_APP_API_URL + "users/\",\r\n            data: users\r\n          }).then((response)=>{\r\n              getDBUsers();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const addUser = (user) => {\r\n        console.log(JSON.stringify(user));\r\n        // Check to see if we already have a duplicate User Name\r\n        if (!users.find((U) => U.username === user.username))\r\n        {\r\n            axios({\r\n                method: \"POST\",\r\n                url: \process.env.REACT_APP_API_URL + "users/\",\r\n                data: user\r\n              }).then((response)=>{\r\n                  getDBUsers();\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this User is already in Users list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const deleteUser = (key) => {\r\n        const userID = key; \r\n        axios({\r\n            method: \"DELETE\",\r\n            url: \process.env.REACT_APP_API_URL + "users/\" + users[key].u_id,\r\n          }).then((response)=>{\r\n              setUsers(getDBUsers());\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n        });\r\n    }\r\n\r\n    const updateUser = (key) => {\r\n        let thisName = users[key].u_id;\r\n        console.log(JSON.stringify(editFormData));\r\n        axios({\r\n            method: \"PATCH\",\r\n            url: \process.env.REACT_APP_API_URL + "users/\"+thisName+'/',\r\n            data: editFormData\r\n          }).then((response)=>{\r\n              setUsers(getDBUsers());\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setEditUserID(null);\r\n        clearError();\r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? (+event.target.checked) : event.target.value;\r\n        // Create new User object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new User object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.a_flag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditUserID(key);\r\n        setEditFormData(users[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditUserID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    if (users === undefined) {\r\n        return (<>loading</>);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div className='table-div'>\r\n            <h3>Administration</h3>\r\n            <table className='main-table'>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 360 }} size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"left\">\r\n                                <h4>ID</h4>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <h4>User Name</h4>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <h4>Password</h4>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <h4>User Level</h4>\r\n                            </TableCell>\r\n                            <TableCell align=\"left\">\r\n                                <h4>Email</h4>\r\n                            </TableCell>\r\n                            <TableCell allign=\"right\">\r\n                                <h4>Actions</h4>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {/* Show a row for each User in Users.*/}\r\n                    {users.map((user, key) => {\r\n                        const thisKey = key;\r\n                        return (\r\n                            // If this User is the one to be edited, show an editable row instead\r\n                            editUserID === thisKey \r\n                                    ? <EditableUserRow thisKey={thisKey} editFormData={editFormData} updateUser={updateUser} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                    : <UserRow thisKey={thisKey} user={user} deleteUser={deleteUser} handleEditClick={handleEditClick}/>\r\n                            )\r\n                    })}\r\n                    \r\n                    {/* If the list is empty display EmptyTableMessage */}\r\n                    {users.length < 1 ? handleError('empty') : null}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </table>\r\n        <h3>Add A User</h3>\r\n        <UserForm addUser={addUser}></UserForm>\r\n        <button onClick={postDBUsers}>Submit Changes</button>\r\n        {errorComponent}\r\n        {displayMsgComponent}\r\n    </div>\r\n    )\r\n}","import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm'\r\n// Sabona Abubeker\r\n\r\n// Recipe Form component\r\n// Takes AddRecipe callback function\r\n// Returns a form that can be used to define a new ingredient object in a IngredientList\r\nconst RecipeForm = (props) => {\r\n  \r\n  const clearRecipe = () => {\r\n    return {\r\n      r_num: null,\r\n      r_name: \"\",\r\n      ri_id: '',\r\n      amt: '',\r\n      unit: '',\r\n      prep: '',\r\n      ri_ing: '',\r\n      ri_recipe_num: '',\r\n      inst_id: '',\r\n      step_no: '',\r\n      step_inst: '',\r\n      stn_name: '',\r\n      inst_recipe_num: '',\r\n    }\r\n  }\r\n\r\n  // The state of this Recipe Form with each attribute of Recipes\r\n  const [recipe, setRecipe] = useState(clearRecipe());\r\n  //const [recipeList, setRecipeList] = useState([{r_num: 1, r_name: 'Recipe Name'}, {r_num: 2, r_name: 'Recipe Name'}]);\r\n\r\n    // Handle form submission (prevent refresh, pass Recipe to addRecipe, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass ingredient object to RecipeList callback\r\n      props.addRecipe(recipe)\r\n      // Clear the form state\r\n      setRecipe(clearRecipe());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newRecipe = {...recipe};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newRecipe[names[i]] = values[i];\r\n        console.log('(' + names[i] + ', ' + values[i] + ')');\r\n      }\r\n      setRecipe(newRecipe);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new Recipe object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic ingredient info */}\r\n          <label htmlFor=\"ri_id\">Recipe ID: </label>\r\n          <input name=\"ri_id\" type=\"text\" maxLength='300' value={recipe.ri_id} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='r_name'>Recipe Name: </label>\r\n          <input name='r_name' type=\"text\" value={recipe.snack_r_num} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor=\"m_date\">Recipe Date: </label>\r\n          <input name=\"m_date\" type=\"date\" value={recipe.m_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"meal_r_num\">Recipe Diet: </label>\r\n          <input name=\"meal_r_num\" type=\"text\" value={recipe.in_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit\">Unit: </label>\r\n          <input name=\"unit\" type=\"text\" value={recipe.unit} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"amount\">Amount: </label>\r\n          <input name=\"amt\" type=\"text\" value={recipe.amt} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"prep\">Preparation: </label>\r\n          <input name=\"prep\" type=\"text\" value={recipe.prep} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"ri_ing\">Recipe Ingredient: </label>\r\n          <input name=\"ri_ing\" type=\"text\" value={recipe.ri_ing} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"ri_recipe_num\">Recipe Ingredient Number: </label>\r\n          <input name=\"ri_recipe_num\" type=\"ri_recipe_num\" value={recipe.ri_recipe_num} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"inst_id\">Instructions: </label>\r\n          <input name=\"inst_id\" type=\"text\" value={recipe.inst_id} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"step_no\">Steps: </label>\r\n          <input name=\"step_no\" type=\"text\" value={recipe.step_no} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"step_inst\">Step Instructions: </label>\r\n          <input name=\"step_inst\" type=\"text\" value={recipe.step_inst} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"stn_name\">Station Name: </label>\r\n          <input name=\"stn_name\" type=\"text\" value={recipe.stn_name} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"inst_recipe_num\">Recipe Instruction Number: </label>\r\n          <input name=\"inst_recipe_num\" type=\"text\" value={recipe.inst_recipe_num} onChange={handleFormChange}/>\r\n\r\n          <button type='Submit'>Add</button>\r\n\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default RecipeForm\r\n","import React from 'react'\r\n\r\n// Editable Meal Plan Row\r\n// Takes: key of current row, the state of the Meal Plans Page's editFormData, updateMealPlan callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable Meal Plan table row component\r\nconst EditableRecipeRow = (props) => {\r\n    const {thisKey, editFormData, updateRecipe, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const recipe = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n          <td>{recipe.i_id}</td>\r\n          <td><input name=\"meal_name\" type=\"text\" maxLength='30' value={recipe.meal_name} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='snack_name' type=\"text\" value={recipe.snack_name} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name=\"m_date\" type=\"date\" placeholder={recipe.m_date} value={recipe.m_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"num_servings\" type=\"number\" value={recipe.num_servings} onChange={handleEditFormChange}/></td>\r\n\r\n          <td>placeholder</td>\r\n\r\n          <td><button onClick={()=>{updateRecipe(key)}}>Save</button></td>\r\n          <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableRecipeRow;\r\n","import React from 'react'\r\n\r\n// Recipe Row component\r\n// Takes: key of current row, the state of the Meal Plan Page's meal list, deleteMeal callback, handleEditClick callback\r\n// Returns a Recipe table row component \r\nconst RecipeRow = (props) => {\r\n    const {thisKey, recipe, deleteRecipe, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const r = recipe;\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{r.r_num}</td>\r\n            <td>{r.r_name}</td>\r\n            <td>{r.ri_id}</td>\r\n            <td>{r.amt}</td>\r\n            <td>{r.unit}</td>\r\n            <td>{r.prep}</td>\r\n            <td>{r.ri_ing}</td>\r\n            <td>{String(r.ri_recipe_num)}</td>\r\n            <td>{r.inst_id}</td>\r\n            <td>{r.ri_id}</td>\r\n            <td>{r.step_no}</td>\r\n            <td>{r.step_inst}</td>\r\n            <td>{r.stn_name}</td>\r\n            <td>{r.inst_recipe_num}</td>\r\n            <td>placeholder</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteRecipe is called with this row's key */}\r\n            <td><button onClick={() => deleteRecipe(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default RecipeRow;\r\n","import React, {Fragment, useState} from 'react'\r\nimport axios from 'axios'\r\nimport RecipeForm from './RecipeForm.js'\r\nimport EditableRecipeRow from './EditableRecipeRow.js'\r\nimport RecipeRow from './RecipeRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport ReusableTable from '../ReusableTable.js'\r\nimport RecipeDropDown from './RecipeDropDown.js'\r\n\r\nimport MealsPage from '../MealsPage'\r\nimport './RecipeList.css'\r\n\r\n\r\n// Recipe List Component\r\nexport default function RecipeList() {\r\n    const data = [\r\n        { r_num: 1, r_name: 'Veggie Lasagna Recipe', ri_id: 1, unit: 5.50, amt: 8, prep: 'oz', ri_ing: 'Lasagna Noodles, Tomato Sauce, Onions', inst_id: 1, step_no: 1, step_inst: '', inst_recipe_num: 'Recipe 1', usages: []},\r\n        { r_num: 2, r_name: 'Tuna Casserole Recipe', ri_id: 2, unit: 5.50, amt: 24, prep: 'oz', ri_ing: 'Tuna, Noodles, Peas', inst_id: 2, step_no: 2, step_inst: 'Preheat oven. Mix tuna with cut veggies, noodles, and cheese. place in', stn_name: 'Tuna, Pasta, Vegetables', inst_recipe_num: 'Recipe 2', usages: []},\r\n        { r_num: 3, r_name: 'Bean and Beef Enchiladas Recipe', unit: 3, amt: 2.00, prep: 'gal', ri_ing: 'Beans, Beef, Soft Tortillas Shells', inst_id: 3, qty_on_hand: 3, inst_recipe_num: 'Recipe 3', usages: []}\r\n    ]\r\n\r\n    const [recipeID, setRecipe] = useState(data);\r\n    const [editRecipeID, setEditRecipeID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBRecipe = () => {\r\n        axios({\r\n            method: \"GET\",\r\n            url:\"/recipe/\"\r\n          }).then((response)=>{\r\n            const recipeData = response.data\r\n            setRecipe(recipeData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBRecipe = () => {\r\n        axios({\r\n            method: \"POST\",\r\n            url:\"/recipe/\",\r\n            data: recipeID\r\n          }).then((response)=>{\r\n            getDBRecipe();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient ID already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addRecipe = (recipe) => {\r\n        const lastID = recipe[recipe.length - 1]['r_name'];\r\n        recipe['r_name'] = lastID + 1;\r\n        let newRecipe = [...recipe, recipe];\r\n        setRecipe(newRecipe);\r\n        clearError();\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        // if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        // {\r\n        //     let newIngredients = [...ingredients, ingredient];\r\n        //     setIngredients(newIngredients);\r\n        //     clearError();\r\n        // }\r\n        // else {\r\n        //     // If this ingredient is already in ingredients list, display error message\r\n        //     handleError('DuplicateKey');\r\n        // }\r\n    }\r\n\r\n    const deleteRecipe = (key) => {\r\n        const recipeID = key; \r\n        let newRecipe = [...recipeID];\r\n        newRecipe.splice(recipeID, 1);\r\n        setRecipe(newRecipe);\r\n    }\r\n\r\n    const updateRecipe = (key) => {\r\n        let thisID = recipeID[key]['i_id'];\r\n        if (recipeID.find((recipes) => recipes.r_num === thisID))\r\n        {\r\n            let newRecipe = [...recipeID];\r\n            newRecipe[key] = editFormData;\r\n            setEditRecipeID(null);\r\n            setRecipe(newRecipe)\r\n            clearError();\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n          console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.aFlag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditRecipeID(key);\r\n        setEditFormData(recipeID[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditRecipeID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <MealsPage />\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <h3>Recipes</h3>\r\n                    <tr>\r\n                        <th>Recipe Number</th>\r\n                        <th>Recipe Name</th>\r\n                        <th>Recipe ID</th>\r\n                        <th>Amount</th>\r\n                        <th>Unit</th>\r\n                        <th>Recipe Ingredient</th>\r\n                        <th>Recipe Ingredient Recipe Number</th>\r\n                        <th>Recipe Instruction ID</th>\r\n                        <th>Step number</th>\r\n                        <th>Step Instruction</th>\r\n                        <th>Station Name</th>\r\n                        <th>Recipe Instruction Number</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {recipeID.map((recipe, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editRecipeID === thisKey \r\n                                ? <EditableRecipeRow thisKey={thisKey} editFormData={editFormData} updateRecipe={updateRecipe} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <RecipeRow thisKey={thisKey} recipe={recipe} deleteRecipe={deleteRecipe} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add Recipe</h3>\r\n            <RecipeForm addRecipe={addRecipe}></RecipeForm>\r\n            <button onClick={postDBRecipe}>Submit Changes</button>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm.js'\r\n\r\n// Sabona Abubeker\r\n\r\n// Neal Plan Form component\r\n// Takes AddMeal callback function\r\n// Returns a form that can be used to define a new meal object in a mealList\r\nconst MealPlanForm = (props) => {\r\n\r\n  const recipeList = props.recipeList;\r\n  \r\n  const clearMeal = () => {\r\n    return {\r\n      m_id: null,\r\n      m_date: '',\r\n      snack_r_num: null,\r\n      meal_r_num: null,\r\n      meal_servings: null,\r\n      snack_servings: null\r\n    }\r\n  }\r\n\r\n  // The state of this Meal Plan Form with each attribute of Meals\r\n  const [meal, setMeal] = useState(clearMeal());\r\n  //const [mealList, setMealList] = useState([{m_id: 1, meal_r_num: 'Meal Name'}, {m_id: 2, meal_r_num: 'Meal Name'}]);\r\n\r\n    // Handle form submission (prevent refresh, pass ingredient to addMeal, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass Meal object to MealList callback\r\n      console.log('HERE IN MEAL PLAN FORM SUBMIT');\r\n      props.addMeal(meal)\r\n      // Clear the form state\r\n      setMeal(clearMeal());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newMeal = {...meal};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newMeal[names[i]] = values[i];\r\n        // console.log('(' + names[i] + ', ' + values[i] + ')');\r\n      }\r\n      setMeal(newMeal);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new ingredient object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic Meal Plan info */}\r\n          <label htmlFor=\"m_date\">Next Delivery Date: </label>\r\n          <input name=\"m_date\" type=\"date\" maxLength='50' value={meal.m_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"meal_r_num\">Meal: </label>\r\n          <select name='meal_r_num' meal={meal.meal_r_num} onChange={handleFormChange}>\r\n            {recipeList.map((recipe) => {\r\n              return(<option value={recipe.r_num}>{recipe.r_name}</option>)\r\n            })}\r\n          </select>\r\n          \r\n          <label htmlFor='snack_r_num'>Snack: </label>\r\n          <select name='snack_r_num' value={meal.snack_r_num} onChange={handleFormChange}>\r\n            {recipeList.map((recipe) => {\r\n              return(<option value={recipe.r_num}>{recipe.r_name}</option>)\r\n            })}\r\n          </select>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default MealPlanForm\r\n","import React from 'react'\r\n\r\n// Editable Meal Plan Row\r\n// Takes: key of current row, the state of the Meal Plans Page's editFormData, updateMealPlan callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable Meal Plan table row component\r\nconst EditableMealRow = (props) => {\r\n    const {thisKey, editFormData, recipeList, updateMeal, handleEditFormChange, handleCancelClick, updateAllergies, updateEditForm} = props\r\n    const meal = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n          <td><input name=\"m_date\" type=\"date\" placeholder={meal.m_date} value={meal.m_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td>\r\n            <select name=\"meal_r_num\" onChange={handleEditFormChange}>\r\n              {recipeList.map((recipe) => {\r\n                if (recipe.r_num === meal.meal_r_num) return (<option value={recipe.r_num} selected>{recipe.r_name}</option>)\r\n                else return (<option value={recipe.r_num}>{recipe.r_name}</option>)\r\n              })}  \r\n            </select>\r\n          </td>\r\n\r\n          <td><input name=\"meal_servings\" type=\"number\" value={meal.meal_servings} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td>\r\n            <select name=\"snack_r_num\" onChange={handleEditFormChange}>\r\n              {recipeList.map((recipe) => {\r\n                if (recipe.r_num === meal.snack_r_num) return (<option value={recipe.r_num} selected>{recipe.r_name}</option>)\r\n                else return (<option value={recipe.r_num}>{recipe.r_name}</option>)\r\n              })}  \r\n            </select>\r\n          </td>\r\n          \r\n          <td><input name=\"snack_servings\" type=\"number\" value={meal.snack_servings} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><button onClick={()=>{updateMeal(key)}}>Save</button></td>\r\n          <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableMealRow;\r\n","import React from 'react'\r\n\r\n// Meal Plan Row component\r\n// Takes: key of current row, the state of the Meal Plan Page's meal list, deleteMeal callback, handleEditClick callback\r\n// Returns a MealPlan table row component \r\nconst MealPlanRow = (props) => {\r\n    const {thisKey, meal, recipeList, deleteMeal, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const m = meal;\r\n    let meal_name = recipeList.find(r => r.r_num === m.meal_r_num)\r\n    let snack_name = recipeList.find(r => r.r_num === m.snack_r_num)\r\n\r\n    if (meal_name) meal_name=meal_name.r_name\r\n    if (snack_name) snack_name=snack_name.r_name\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{m.m_date}</td>\r\n            <td>{meal_name}</td>\r\n            <td>{m.meal_servings}</td>\r\n            <td>{snack_name}</td>\r\n            <td>{m.snack_servings}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deleteIngredient is called with this row's key */}\r\n            <td><button onClick={() => deleteMeal(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default MealPlanRow;\r\n","import React, {Fragment, useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport MealPlanForm from './MealPlanForm.js'\r\nimport EditableMealRow from './EditableMealRow.js'\r\nimport MealPlanRow from './MealPlanRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\nimport ReusableTable from '../ReusableTable.js'\r\nimport MealsPage from '../MealsPage'\r\n\r\nimport './MealList.css'\r\n// import Table from 'react-bootstrap/Table'\r\nimport Table from '@mui/material/Table'\r\n\r\n// Meal List Component\r\nexport default function MealList() {\r\n    const [mealPlan, setMealPlan] = useState(undefined);\r\n    const [recipeList, setRecipeList] = useState(undefined);\r\n    const [editMealID, setEditMealID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState(null);\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n\r\n    const getDBMealPlan = () => {\r\n        console.log('MAKING REQUEST TO DJANGO')\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "mealplans/\"\r\n          }).then((response)=>{\r\n            const mealData = response.data\r\n            setMealPlan(mealData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const getDBRecipeList = () => {\r\n        console.log('MAKING REQUEST TO DJANGO')\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "recipe-list/\"\r\n          }).then((response)=>{\r\n            const recipeData = response.data\r\n            setRecipeList(recipeData);\r\n            console.log(recipeData);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const getDBServingCalculations = () => {\r\n        console.log('MAKING REQUEST TO DJANGO')\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "serving-calculations/\"\r\n          }).then((response)=>{\r\n            return response.data;\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const postDBMealPlan = (meal) => {\r\n        console.log(JSON.stringify(meal));\r\n        axios({\r\n            method: \"POST\",\r\n            url:\process.env.REACT_APP_API_URL + "mealplans/\",\r\n            data: meal\r\n          }).then((response)=>{\r\n            getDBMealPlan();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        setdisplayMsgComponent(<DisplayMessage msg='Submitting changes to database!'/>);\r\n    }\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Ingredient ID already found!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    const addMeal = (meal) => {\r\n        // console.log(JSON.stringify(meal))\r\n        // console.log(meal['meal_servings'])\r\n        const lastID = mealPlan[mealPlan.length - 1]['m_id'];\r\n        meal['m_id'] = lastID + 1;\r\n        // let calc_servings = getDBServingCalculations();\r\n        // meal['meal_servings'] = calc_servings['meal_servings']\r\n        // meal['snack_servings'] = calc_servings['snack_servings']\r\n        // let newMeal = [...mealPlan, meal];\r\n        postDBMealPlan(meal);\r\n        clearError();\r\n        // Check to see if we already have a duplicate Ingredient Name\r\n        // if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        // {\r\n        //     let newIngredients = [...ingredients, ingredient];\r\n        //     setIngredients(newIngredients);\r\n        //     clearError();\r\n        // }\r\n        // else {\r\n        //     // If this ingredient is already in ingredients list, display error message\r\n        //     handleError('DuplicateKey');\r\n        // }\r\n    }\r\n\r\n    const deleteMeal = (key) => {\r\n        let thisID = mealPlan[key]['m_id'];\r\n        if (mealPlan.find((meals) => meals.m_id === thisID))\r\n        {\r\n            axios({\r\n                method: \"DELETE\",\r\n                url:\process.env.REACT_APP_API_URL + "mealplans/\"+thisID+'/',\r\n              }).then((response)=>{\r\n                getDBMealPlan();\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n    }\r\n\r\n    const updateMeal = (key) => {\r\n        let thisID = mealPlan[key]['m_id'];\r\n        // console.log(thisID);\r\n        // console.log(JSON.stringify(editFormData))\r\n        if (mealPlan.find((meals) => meals.m_id === thisID))\r\n        {\r\n            axios({\r\n                method: \"PATCH\",\r\n                url:\process.env.REACT_APP_API_URL + "mealplans/\"+thisID+'/',\r\n                data: editFormData\r\n              }).then((response)=>{\r\n                getDBMealPlan();\r\n                setEditMealID(undefined);\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n        }\r\n        else {\r\n            // If this Ingredient is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Ingredient object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (names, values) => {\r\n        const newEditFormData = {...editFormData};\r\n        for (let i = 0; i < names.length; i++) {\r\n          newEditFormData[names[i]] = values[i];\r\n        //   console.log('(' + names[i] + ', ' + values[i] + ')', newEditFormData.aFlag);\r\n        }\r\n        setEditFormData(newEditFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditMealID(key);\r\n        setEditFormData(mealPlan[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditMealID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDBMealPlan();\r\n        getDBRecipeList();\r\n    }, [])\r\n\r\n    if (mealPlan===undefined || recipeList===undefined) {\r\n        return (<>loading</>)\r\n    }\r\n\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n          <MealsPage />\r\n          <h3>Meal Plan</h3>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Next Delivery Date</th>\r\n                        <th>Meal Name</th>\r\n                        <th>Meal Servings</th>\r\n                        <th>Snack Name</th>\r\n                        <th>Snack Servings</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {mealPlan.map((meal, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editMealID === thisKey \r\n                                ? <EditableMealRow thisKey={thisKey} editFormData={editFormData} recipeList={recipeList} updateMeal={updateMeal} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <MealPlanRow thisKey={thisKey} meal={meal} recipeList={recipeList} deleteMeal={deleteMeal} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <h3>Add A Meal</h3>\r\n            <MealPlanForm addMeal={addMeal} recipeList={recipeList}></MealPlanForm>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport React from 'react'\r\nimport ReusableForm from '../ReusableForm.js'\r\n\r\n// Kainoa Borges\r\n\r\n// Packaging Form component\r\n// Takes AddPackaging callback function\r\n// Returns a form that can be used to define a new packaging object in a PackagingList\r\nconst PackagingForm = (props) => {\r\n\r\n  const supplierList = props.suppliers;\r\n  \r\n  const clearPackaging = () => {\r\n    return {\r\n      p_id: null,\r\n      package_type: \"\",\r\n      unit_qty: null,\r\n      qty_holds: null,\r\n      unit: \"\",\r\n      returnable: null,\r\n      in_date: null,\r\n      in_qty: null,\r\n      packaging_usage: [],\r\n      qty_on_hand: null,\r\n      unit_cost: null,\r\n      flat_fee: null,\r\n      psupplier_id: null,\r\n      pref_psupplier_id: null\r\n  }\r\n  }\r\n\r\n  // The state of this Packaging Form with each attribute of Packaging\r\n  const [packaging, setPackaging] = useState(clearPackaging());\r\n\r\n    // Handle form submission (prevent refresh, pass packaging to addPackaging, and clear form state)\r\n    // Takes submit event information (form submission)\r\n    // Returns none\r\n    const handleSubmit = (event) => {\r\n      // Prevent refresh\r\n      event.preventDefault();\r\n      // Pass packaging object to PackagingList callback\r\n      props.addPackaging(packaging)\r\n      // Clear the form state\r\n      setPackaging(clearPackaging());\r\n    }\r\n\r\n    const updateEditForm = (names, values) => {\r\n      const newPackaging = {...packaging};\r\n      for (let i = 0; i < names.length; i++) {\r\n        newPackaging[names[i]] = values[i];\r\n      }\r\n      setPackaging(newPackaging);\r\n    }\r\n\r\n    // Handle the data inputted to each form input and set the state with the new values\r\n    // General solution, input verification is tricky with this implementation\r\n    // Takes input change event information (name, type, and value)\r\n    // Returns None\r\n    const handleFormChange = (event) => {\r\n      // Get the name and value of the changed field\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n      // Create new packaging object before setting state\r\n      updateEditForm([fieldName], [fieldValue]);\r\n      // updateEditForm('aFlag', true);\r\n    }\r\n\r\n    // HTML structure of this component\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n          {/* Basic packaging info */}          \r\n          <label htmlFor='package_type'>Package Type: </label>\r\n          <input name='package_type' type=\"text\" value={packaging.pkg_type} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor='returnable'>Returnable: </label>\r\n          <input name='returnable' type='checkbox' value={packaging.returnable} onChange={handleFormChange}/>\r\n          \r\n          <label htmlFor=\"unit_qty\">Unit Qty: </label>\r\n          <input name=\"unit_qty\" type=\"number\" value={packaging.unit_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit\">Unit: </label>\r\n          <input name=\"unit\" type=\"text\" value={packaging.unit} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"qty_holds\">Quantity Holds: </label>\r\n          <input name=\"qty_holds\" type=\"number\" value={packaging.qty_holds} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"in_date\">In Date: </label>\r\n          <input name=\"in_date\" type=\"date\" value={packaging.in_date} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"in_qty\">In Quantity: </label>\r\n          <input name=\"in_qty\" type=\"number\" value={packaging.in_qty} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"unit_cost\">Unit Cost: </label>\r\n          <input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={packaging.unit_cost} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"flat_fee\">Flat Fee: </label>\r\n          <input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={packaging.flat_fee} onChange={handleFormChange}/>\r\n\r\n          <label htmlFor=\"psupplier\">Supplier: </label>\r\n          <select name=\"psupplier_id\" onChange={handleFormChange}>\r\n            <option defaultValue={true} value={null}>N/A</option>\r\n            {/* Get supplier_name from  */}\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option value={supplier.s_id}>{supplier.s_name}</option>\r\n              )\r\n            })}\r\n          </select>\r\n\r\n          <label htmlFor=\"pref_psupplier\">Supplier: </label>\r\n          <select name=\"pref_psupplier_id\">\r\n            <option defaultValue={true} value={null}>N/A</option>\r\n            {supplierList.map((supplier, key) => {\r\n              return (\r\n                <option value={supplier.s_id}>{supplier.s_name}</option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          <button type='Submit'>Add</button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default PackagingForm","import React, {useState, useEffect, Fragment} from 'react'\r\n\r\nexport default function EditablePkgUsageTable(props) {\r\n    const [currUsage, setCurrUsage] = useState({used_date: null, used_qty: null});\r\n    const [pkgUsages, setPkgUsages] = useState(props.packaging_usage);\r\n\r\n    // useEffect(()=>{\r\n    //   setPkgUsages(props.editFormData.ingredient_usage);\r\n    // }, props.editFormData);\r\n    \r\n    const handleKeyUsageChange = (event) => {\r\n      const key = event.target.getAttribute('dataKey');\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.value;\r\n      let newUsage = {...pkgUsages[key]};\r\n      newUsage[fieldName] = fieldValue;\r\n      let newPkgUsages = [...pkgUsages];\r\n      console.log('eput line18 ', key);\r\n      newPkgUsages[key] = newUsage;\r\n      console.log('eput line20 ', newPkgUsages);\r\n      setPkgUsages(newPkgUsages);\r\n      props.updateEditForm('packaging_usage', newPkgUsages);\r\n    }\r\n\r\n    const handleUsageChange = (event) => {\r\n      const fieldName = event.target.getAttribute('name');\r\n      const fieldValue = event.target.value;\r\n      const newUsage = {...currUsage};\r\n      newUsage[fieldName] = fieldValue;\r\n      setCurrUsage(newUsage);\r\n    }\r\n\r\n    const handleAddUsage = (event) => {\r\n      event.preventDefault();\r\n      const newUsages = [...pkgUsages, currUsage];\r\n      setPkgUsages(newUsages);\r\n      setCurrUsage({used_date: '', used_qty: ''});\r\n      props.updateEditForm('packaging_usage', newUsages);\r\n    }\r\n\r\n    const handleDeleteUsage = (thisKey) => {\r\n        const newUsages = [...pkgUsages];\r\n        newUsages.splice(thisKey, 1);\r\n        setPkgUsages(newUsages);\r\n        props.updateEditForm('packaging_usage', newUsages);\r\n    }\r\n\r\n    if (pkgUsages) {\r\n        return (\r\n            <table>\r\n                    <th>used date</th>\r\n                    <th>used qty</th>\r\n                {pkgUsages.map((usage, thisKey) => {\r\n                    return (\r\n                        <Fragment>\r\n                          <tr key={thisKey}>\r\n                              <td><input dataKey={thisKey} name=\"used_date\" type=\"date\" value={usage.used_date} onChange={handleKeyUsageChange}/></td>\r\n                              <td><input dataKey={thisKey} name=\"used_qty\" value={usage.used_qty} onChange={handleKeyUsageChange}/></td>\r\n                              <td><button onClick={() => handleDeleteUsage(thisKey)}>Delete</button></td>\r\n                          </tr>\r\n                        </Fragment>\r\n                        )\r\n                    })\r\n                }\r\n                    <tr>\r\n                      <td><input name=\"used_date\" value={currUsage.used_date} type=\"date\" onChange={handleUsageChange}/></td>\r\n                      <td><input name=\"used_qty\" value={currUsage.used_qty} onChange={handleUsageChange}/></td>\r\n                      <td><button onClick={handleAddUsage}>Add</button></td>\r\n                    </tr>\r\n            </table>\r\n        )\r\n    }\r\n}","import React, {useState, useEffect, Fragment} from 'react'\r\nimport EditablePkgUsageTable from '../Packaging/EditablePkgUsageTable.js'\r\n\r\n// Editable Household Row\r\n// Takes: key of current row, the state of the Household Page's editFormData, updateHousehold callback, handleEditFormChange callback, and handleCancelClick callback\r\n// Returns an editable household table row component\r\nconst EditablePackagingRow = (props) => {\r\n    const {thisKey, editFormData, suppliers, updatePackaging, handleEditFormChange, handleCancelClick, updateEditForm} = props\r\n    const pkg = editFormData;\r\n    const key = thisKey;\r\n\r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>          \r\n          <td><input name='packaging_type' type=\"text\" maxLength='30' value={pkg.package_type} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='returnable' type=\"checkbox\" checked={Boolean(pkg.returnable)} onChange={handleEditFormChange}/></td>\r\n          \r\n          <td><input name='unit_qty' type=\"number\" value={pkg.unit_qty} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"unit\" type=\"text\" value={pkg.unit} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name='qty_holds' type=\"number\" value={pkg.qty_holds} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"in_date\" type=\"date\" value={pkg.in_date} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"in_qty\" type=\"number\" value={pkg.in_qty} onChange={handleEditFormChange}/></td>\r\n\r\n          <EditablePkgUsageTable editFormData={editFormData} updateEditForm={updateEditForm} packaging_usage={pkg.packaging_usage}/>\r\n\r\n          <td></td>\r\n\r\n          <td><input name=\"unit_cost\" type=\"number\" step=\"0.01\" value={pkg.unit_cost} onChange={handleEditFormChange}/></td>\r\n\r\n          <td><input name=\"flat_fee\" type=\"number\" step=\"0.01\" value={pkg.flat_fee} onChange={handleEditFormChange}/></td>\r\n\r\n          <td>\r\n            <select name=\"psupplier_id\" onChange={handleEditFormChange}>\r\n              <option defaultValue={true} value={null}>N/A</option>\r\n              {suppliers.map((supplier, key) => {\r\n                const thisKey = key;\r\n                const isSelected = (suppliers[thisKey].s_id == pkg.psupplier_id)\r\n                return(\r\n                  <option defaultValue={isSelected} value={supplier.s_id}>{supplier.s_name}</option>\r\n                )\r\n              })}  \r\n            </select>\r\n          </td>\r\n\r\n          <td>\r\n            <select name=\"pref_psupplier_id\" onChange={handleEditFormChange}>\r\n              <option defaultValue={true} value={null}>N/A</option>\r\n              {suppliers.map((supplier, key) => {\r\n                const thisKey = key;\r\n                const isSelected = (suppliers[thisKey].s_id == pkg.pref_psupplier_id)\r\n                return(\r\n                  <option defaultValue={isSelected} value={supplier.s_id}>{supplier.s_name}</option>\r\n                )\r\n              })}  \r\n            </select>\r\n          </td>\r\n\r\n          <td><button onClick={()=>{updatePackaging(key)}}>Save</button></td>\r\n          <td><button onClick={handleCancelClick}>Cancel</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditablePackagingRow;","import React from 'react'\r\n\r\n// Ingredient Row component\r\n// Takes: key of current row, the state of the Ingredient Page's ingredient list, deletePackaging callback, handleEditClick callback\r\n// Returns a Ingredient table row component \r\nconst PackagingRow = (props) => {\r\n    const {thisKey, packaging, deletePackaging, handleEditClick} = props;\r\n    const key = thisKey;\r\n    const pkg = packaging;\r\n\r\n    const PkgUsageTable = (props) => {\r\n        const pkg_usages = props.packaging_usage\r\n        if (pkg_usages) {\r\n            // console.log(JSON.stringify(this_ing.usages))\r\n            if (pkg_usages.length > 0) {\r\n                return (\r\n                    <table>\r\n                            <th>used date</th>\r\n                            <th>used qty</th>\r\n                        {pkg_usages.map((usage, key) => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{usage.used_date}</td>\r\n                                    <td>{usage.used_qty}</td>\r\n                                </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                )\r\n            }\r\n        }\r\n        else {\r\n            return\r\n        }\r\n    }\r\n    \r\n    // HTML structure of this component\r\n    return (\r\n        <tr key={key}>\r\n            <td>{pkg.package_type}</td>\r\n            <td>{String(Boolean(pkg.returnable))}</td>\r\n            <td>{pkg.unit_qty}</td>\r\n            <td>{pkg.unit}</td>\r\n            <td>{pkg.qty_holds}</td>\r\n            <td>{String(pkg.in_date)}</td>\r\n            <td>{String(pkg.in_qty)}</td>\r\n            <td>\r\n                <PkgUsageTable packaging_usage={pkg.packaging_usage}/>\r\n            </td>\r\n            <td>{pkg.qty_on_hand}</td>\r\n            <td>{String(pkg.unit_cost)}</td>\r\n            <td>{String(pkg.flat_fee)}</td>\r\n            <td>{pkg.isupplier ? pkg.isupplier.s_name : 'N/A'}</td>\r\n            <td>{pkg.pref_isupplier ? pkg.pref_isupplier.s_name : 'N/A'}</td>\r\n            {/* When edit is clicked, handleEditClick is called with this row's key */}\r\n            <td><button onClick={()=> handleEditClick(key)}>Edit</button></td>\r\n            {/* When delete is clicked, deletePackaging is called with this row's key */}\r\n            <td><button onClick={() => deletePackaging(key)}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default PackagingRow;","import React, {Fragment, useState, useEffect, Suspense} from 'react'\r\nimport axios from 'axios'\r\nimport PackagingForm from './PackagingForm.js'\r\nimport EditablePackagingRow from './EditablePackagingRow.js'\r\nimport PackagingRow from './PackagingRow.js'\r\nimport Error from '../Error.js'\r\nimport DisplayMessage from '../DisplayMessage.js'\r\n\r\nimport './PackagingList.css'\r\nimport InventoryPage from '../InventoryPage'\r\n\r\n// Packaging List Component\r\nexport default function PackagingList() {\r\n    const [packaging, setPackaging] = useState(undefined);\r\n    const [suppliers, setSuppliers] = useState(undefined);\r\n    const [editPackagingID, setEditPackagingID] = useState(null);\r\n    const [editFormData, setEditFormData] = useState({\r\n        p_id: '',\r\n        package_type: \"\",\r\n        unit_qty: '',\r\n        qty_holds: '',\r\n        unit: \"\",\r\n        returnable: '',\r\n        in_date: '',\r\n        in_qty: '',\r\n        packaging_usage: [],\r\n        qty_on_hand: '',\r\n        unit_cost: '',\r\n        flat_fee: '',\r\n        psupplier_id: '',\r\n        pref_psupplier_id: ''\r\n    });\r\n    const [errorComponent, setErrorComponent] = useState(null);\r\n    const [displayMsgComponent, setdisplayMsgComponent] = useState(null);\r\n    const [loadingComponent, setLoadingComponent] = useState(null);\r\n\r\n    const handleError = (errCode) => {\r\n        if (errCode === 'DuplicateKey') {\r\n            setErrorComponent(\r\n                <Error text=\"Packaging ID already found!\"/>\r\n            )\r\n        } \r\n        else if (errCode === 'empty') {\r\n            setErrorComponent(\r\n                <Error text=\"There doesn't seem to be any data!\"/>\r\n            )\r\n        }\r\n    }\r\n    const clearError = () => {\r\n        setErrorComponent(null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDBPackaging();\r\n        getDBSuppliers();\r\n    }, []);\r\n\r\n    const getDBSuppliers = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "suppliers\"\r\n          }).then((response)=>{\r\n            setSuppliers(response.data);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const getDBPackaging = () => {\r\n        console.log(\"MAKING REQUEST TO DJANGO\")\r\n        setLoadingComponent(<Error text=\"LOADING DATA...\"/>);\r\n        axios({\r\n            method: \"GET\",\r\n            url:\process.env.REACT_APP_API_URL + "packaging-inventory\"\r\n          }).then((response)=>{\r\n            const pkgData = response.data\r\n            setPackaging(pkgData);\r\n            setLoadingComponent(null);\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const addPackaging = (pkg) => {\r\n        const lastID = packaging[packaging.length - 1]['p_id'];\r\n        pkg['p_id'] = lastID + 1;\r\n        axios({\r\n            method: \"POST\",\r\n            url:\process.env.REACT_APP_API_URL + "packaging-inventory/\",\r\n            data: pkg\r\n          }).then((response)=>{\r\n            getDBPackaging();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n        clearError();\r\n        // Check to see if we already have a duplicate Packaging Name\r\n        // if (!ingredients.find((ing) => ing.i_id === ing.i_id))\r\n        // {\r\n        //     let newPackagings = [...ingredients, ingredient];\r\n        //     setPackagings(newPackagings);\r\n        //     clearError();\r\n        // }\r\n        // else {\r\n        //     // If this ingredient is already in ingredients list, display error message\r\n        //     handleError('DuplicateKey');\r\n        // }\r\n    }\r\n\r\n    const deletePackaging = (key) => {\r\n        const pkgID = packaging[key]['p_id']; \r\n        axios({\r\n            method: \"DELETE\",\r\n            url:\process.env.REACT_APP_API_URL + "packaging-inventory/\"+pkgID+'/',\r\n          }).then((response)=>{\r\n            getDBPackaging();\r\n          }).catch((error) => {\r\n            if (error.response) {\r\n              console.log(error.response);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n              }\r\n          });\r\n    }\r\n\r\n    const updatePackaging = (key) => {\r\n        let thisID = packaging[key]['p_id'];\r\n        if (packaging.find((pkg) => pkg.p_id === thisID))\r\n        {\r\n            setEditPackagingID(null);\r\n            axios({\r\n                method: \"PATCH\",\r\n                url:\process.env.REACT_APP_API_URL + "packaging-inventory/\"+thisID+'/',\r\n                data: editFormData\r\n              }).then((response)=>{\r\n                getDBPackaging();\r\n              }).catch((error) => {\r\n                if (error.response) {\r\n                  console.log(error.response);\r\n                  console.log(error.response.status);\r\n                  console.log(error.response.headers);\r\n                  }\r\n              });\r\n        }\r\n        else {\r\n            // If this Packaging is already in ingredients list, display error message\r\n            handleError('DuplicateKey');\r\n        }\r\n        \r\n    }\r\n\r\n    const handleEditFormChange = (event) => {\r\n        // Get the name and value of the changed field\r\n        const fieldName = event.target.getAttribute('name');\r\n        const fieldValue = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        // Create new Packaging object before setting state\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[fieldName] = fieldValue;\r\n        // Set state with new ingredient object\r\n        setEditFormData(newEditFormData);\r\n    }\r\n    const updateEditForm = (name, value) => {\r\n        const newEditFormData = {...editFormData};\r\n        newEditFormData[name] = value;\r\n        setEditFormData(newEditFormData);\r\n        console.log(editFormData);\r\n      }\r\n\r\n    const handleEditClick = (key) => {\r\n        setEditPackagingID(key);\r\n        setEditFormData(packaging[key]);\r\n    }\r\n    const handleCancelClick = () => {\r\n        setEditPackagingID(null);\r\n        setEditFormData(null);\r\n    }\r\n\r\n    if (packaging === undefined || suppliers === undefined) {\r\n        return (<>loading</>)\r\n    }\r\n    // The HTML structure of this component\r\n    return (\r\n        /* Fragment is an invisible tag that can be used to encapsulate multiple JSX elements without changing the HTML structure of the page */\r\n        <div class='table-div'>\r\n            <InventoryPage />\r\n            <h3>Packaging</h3>\r\n            <table className='main-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Package Type</th>\r\n                        <th>Returnable</th>\r\n                        <th>Unit Qty</th>\r\n                        <th>Unit</th>\r\n                        <th>Qty Holds</th>\r\n                        <th>Date In</th>\r\n                        <th>Qty In</th>\r\n                        <th>Usages</th>\r\n                        <th>Qty On Hand</th>\r\n                        <th>Unit Cost</th>\r\n                        <th>Flat Fee</th>\r\n                        <th>Supplier</th>\r\n                        <th>Preferred Supplier</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/* Show a row for each ingredient in ingredients.*/}\r\n                    {packaging.map((pkg, key) => {\r\n                        const thisKey = key;\r\n                        return(\r\n                            <Fragment>\r\n                                {\r\n                                // If this ingredient is the one to be edited, show an editable row instead\r\n                                editPackagingID === thisKey \r\n                                ? <EditablePackagingRow thisKey={thisKey} editFormData={editFormData} suppliers={suppliers} updatePackaging={updatePackaging} handleEditFormChange={handleEditFormChange} updateEditForm={updateEditForm} handleCancelClick={handleCancelClick}/>\r\n                                : <PackagingRow thisKey={thisKey} packaging={pkg} deletePackaging={deletePackaging} handleEditClick={handleEditClick}/>\r\n                                }\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                    {/* {ingredients.length < 1 ? handleError('empty') : null} */}\r\n                </tbody>\r\n            </table>\r\n            {loadingComponent}\r\n            <h3>Add Packaging</h3>\r\n            <PackagingForm addPackaging={addPackaging} suppliers={suppliers}></PackagingForm>\r\n            {errorComponent}\r\n            {displayMsgComponent}\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\n\r\nconst Search = ({ data }) => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  const handleInputChange = e => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  const filteredData = data.filter(item =>\r\n    item.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={searchQuery}\r\n        onChange={handleInputChange}\r\n      />\r\n      <ul>\r\n        {filteredData.map(item => (\r\n          <li key={item.id}>\r\n            {item.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import HouseholdForm from './Households/HouseholdForm.js'\r\nimport LoginPage from './LoginPage.js'\r\nimport PwResetPage from './PwResetPage.js'\r\nimport LandingPage from './LandingPage.js'\r\nimport MealsPage from './MealsPage.js'\r\nimport InventoryPage from './InventoryPage.js'\r\nimport HouseholdList from './Households/HouseholdList.js'\r\nimport HouseholdsReport from './Households/HouseholdsReport.js'\r\nimport AllergiesList from './Households/AllergiesList.js'\r\nimport Ingredients from './Ingredients/IngredientList.js'\r\n//import IngredientReport from './Ingredients/IngredientReport.js'\r\nimport StationList from './Stations/StationList.js'\r\nimport ReportsPage from \"./ReportsPage.js\"\r\nimport UserPage from \"./UserPage.js\"\r\nimport UserList from \"./User/UserList.js\"\r\nimport NewUserPage from \"./NewUserPage.js\"\r\nimport Recipe from './Recipe/RecipeList.js'\r\nimport MealPlan from './Meals/MealList.js'\r\nimport Packaging from './Packaging/PackagingList.js'\r\nimport RecipeDropDown from './Recipe/RecipeDropDown.js'\r\nimport Search from './Search.js'\r\nimport React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\nimport { useState } from 'react'\r\nimport { CssBaseline, Box } from '@mui/material'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport { Container, Button, Typography } from '@mui/material'\r\nimport { ThemeProvider } from 'styled-components'\r\n\r\nconst App = () => {\r\n    const [currPage, setCurrPage] = useState();\r\n    const [loginState, setLoginState] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n        isAdmin: false\r\n    })\r\n\r\n    const handlePageClick = (pageName) => {\r\n        console.log(pageName)\r\n        switch(pageName) {\r\n            case 'householdForm': setCurrPage(<HouseholdForm />); break;\r\n            case 'loginPage': setCurrPage(<LoginPage loginState={loginState} setLoginState={setLoginState} handlePageClick={handlePageClick} />); break;\r\n            case 'newUserPage': setCurrPage(<NewUserPage handlePageClick={handlePageClick} />); break;\r\n            case 'pwResetPage': setCurrPage(<PwResetPage handlePageClick={handlePageClick} />); break;\r\n            case 'landingPage': setCurrPage(<LandingPage handlePageClick={handlePageClick} />); break;\r\n            case 'mealsPage': setCurrPage(<MealsPage handlePageClick={handlePageClick} />); break;\r\n            case 'inventoryPage': setCurrPage(<InventoryPage handlePageClick={handlePageClick} />); break;\r\n            case 'households': setCurrPage(<HouseholdList />); break;\r\n            case 'households-report': setCurrPage(<HouseholdsReport handlePageClick={handlePageClick} />); break;\r\n            case 'ingredients': setCurrPage(<Ingredients />); break;\r\n            case 'packaging': setCurrPage(<Packaging />); break;\r\n            case 'stations': setCurrPage(<StationList />); break;\r\n            case 'meals': setCurrPage(<MealPlan />); break;\r\n            case 'recipes': setCurrPage(<Recipe />); break;\r\n            case 'reports': setCurrPage(<ReportsPage />); break;\r\n            case 'userPage': setCurrPage(<UserPage handlePageClick={handlePageClick} />); break;\r\n            case 'userList': setCurrPage(<UserList handlePageClick={handlePageClick} />); break;\r\n            // case 'allergies': setCurrPage(<AllergiesList allergies={[{ aType: 'Gluten' }, { aType: 'Peanut' }]} />); break;\r\n        }\r\n        // if (pageName === 'householdForm') setCurrPage(<HouseholdForm />);\r\n        // else if (pageName === 'loginPage') setCurrPage(<LoginPage loginState={loginState} setLoginState={setLoginState} handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'newUserPage') setCurrPage(<NewUserPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'pwResetPage') setCurrPage(<PwResetPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'landingPage') setCurrPage(<LandingPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'mealsPage') setCurrPage(<MealsPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'inventoryPage') setCurrPage(<InventoryPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'households') setCurrPage(<HouseholdList />);\r\n        // else if (pageName === 'households-report') setCurrPage(<HouseholdsReport handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'ingredients') setCurrPage(<Ingredients />);\r\n        // else if (pageName === 'packaging') setCurrPage(<Packaging />);\r\n        // else if (pageName === 'stations') setCurrPage(<StationList />);\r\n        // else if (pageName === 'landing') setCurrPage(<HouseholdList />);\r\n        // else if (pageName === 'meals') setCurrPage(<MealPlan />);\r\n        // else if (pageName === 'recipes') setCurrPage(<Recipe />);\r\n        // else if (pageName === 'reports') setCurrPage(<ReportsPage />);\r\n        // else if (pageName === 'userPage') setCurrPage(<UserPage handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'userList') setCurrPage(<UserList handlePageClick={handlePageClick} />);\r\n        // else if (pageName === 'allergies') setCurrPage(<AllergiesList allergies={[{ aType: 'Gluten' }, { aType: 'Peanut' }]} />);\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <CssBaseline />\r\n            <Box sx={{\r\n                bgcolor: (theme) => theme.\r\n                palette.background.default,\r\n                minHeight: \"100vh\",\r\n                width: '90%',\r\n                margin: 'auto'\r\n            }}>\r\n                <header className=\"App-header\">\r\n                    <Typography variant='h4'>Food Forward Tracker</Typography>\r\n                    <Button variant='contained' onClick={() => handlePageClick('loginPage')}>\r\n                        Login Page\r\n                    </Button>\r\n                    <Button variant='contained' onClick={() => handlePageClick('landingPage')}>\r\n                        Landing Page\r\n                    </Button>\r\n                    <Button variant='contained' onClick={() => handlePageClick('userPage')}>\r\n                        User Account\r\n                    </Button>\r\n                    <select>\r\n                        <button onClick={() => handlePageClick('RecipeDropDown')}></button>\r\n                    </select>\r\n                    <button onClick={() => handlePageClick('Search')}>\r\n                        Search\r\n                    </button>\r\n                    {currPage}\r\n                </header>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n/*\r\nexport default function App() {\r\n    return <div>\r\n        <CssBaseline />\r\n        <Router>\r\n            <Box sx={{\r\n                bgcolor: (theme) => theme.\r\n                palette.background.default,\r\n                minHeight: \"100vh\"\r\n            }}>\r\n                <Routes>\r\n                    <route path=\"/example\"\r\n                    element={<Example />} />\r\n                </Routes>\r\n            </Box>\r\n        </Router>\r\n    </div>\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n*/","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}